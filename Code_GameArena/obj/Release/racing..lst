                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : FreeWare ANSI-C Compiler
                              3 ; Version 2.6.0 #4309 (Jul 28 2006)
                              4 ; This file generated Fri Dec 09 17:15:35 2016
                              5 ;--------------------------------------------------------
                              6 	.module racing
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _SCORE
                             13 	.globl _BITMAP
                             14 	.globl _RACING_BITMAP
                             15 	.globl _P5_7
                             16 	.globl _P5_6
                             17 	.globl _P5_5
                             18 	.globl _P5_4
                             19 	.globl _P5_3
                             20 	.globl _P5_2
                             21 	.globl _P5_1
                             22 	.globl _P5_0
                             23 	.globl _P4_7
                             24 	.globl _P4_6
                             25 	.globl _P4_5
                             26 	.globl _P4_4
                             27 	.globl _P4_3
                             28 	.globl _P4_2
                             29 	.globl _P4_1
                             30 	.globl _P4_0
                             31 	.globl _PX0L
                             32 	.globl _PT0L
                             33 	.globl _PX1L
                             34 	.globl _PT1L
                             35 	.globl _PLS
                             36 	.globl _PT2L
                             37 	.globl _PPCL
                             38 	.globl _EC
                             39 	.globl _CCF0
                             40 	.globl _CCF1
                             41 	.globl _CCF2
                             42 	.globl _CCF3
                             43 	.globl _CCF4
                             44 	.globl _CR
                             45 	.globl _CF
                             46 	.globl _TF2
                             47 	.globl _EXF2
                             48 	.globl _RCLK
                             49 	.globl _TCLK
                             50 	.globl _EXEN2
                             51 	.globl _TR2
                             52 	.globl _C_T2
                             53 	.globl _CP_RL2
                             54 	.globl _T2CON_7
                             55 	.globl _T2CON_6
                             56 	.globl _T2CON_5
                             57 	.globl _T2CON_4
                             58 	.globl _T2CON_3
                             59 	.globl _T2CON_2
                             60 	.globl _T2CON_1
                             61 	.globl _T2CON_0
                             62 	.globl _PT2
                             63 	.globl _ET2
                             64 	.globl _CY
                             65 	.globl _AC
                             66 	.globl _F0
                             67 	.globl _RS1
                             68 	.globl _RS0
                             69 	.globl _OV
                             70 	.globl _F1
                             71 	.globl _P
                             72 	.globl _PS
                             73 	.globl _PT1
                             74 	.globl _PX1
                             75 	.globl _PT0
                             76 	.globl _PX0
                             77 	.globl _RD
                             78 	.globl _WR
                             79 	.globl _T1
                             80 	.globl _T0
                             81 	.globl _INT1
                             82 	.globl _INT0
                             83 	.globl _TXD
                             84 	.globl _RXD
                             85 	.globl _P3_7
                             86 	.globl _P3_6
                             87 	.globl _P3_5
                             88 	.globl _P3_4
                             89 	.globl _P3_3
                             90 	.globl _P3_2
                             91 	.globl _P3_1
                             92 	.globl _P3_0
                             93 	.globl _EA
                             94 	.globl _ES
                             95 	.globl _ET1
                             96 	.globl _EX1
                             97 	.globl _ET0
                             98 	.globl _EX0
                             99 	.globl _P2_7
                            100 	.globl _P2_6
                            101 	.globl _P2_5
                            102 	.globl _P2_4
                            103 	.globl _P2_3
                            104 	.globl _P2_2
                            105 	.globl _P2_1
                            106 	.globl _P2_0
                            107 	.globl _SM0
                            108 	.globl _SM1
                            109 	.globl _SM2
                            110 	.globl _REN
                            111 	.globl _TB8
                            112 	.globl _RB8
                            113 	.globl _TI
                            114 	.globl _RI
                            115 	.globl _P1_7
                            116 	.globl _P1_6
                            117 	.globl _P1_5
                            118 	.globl _P1_4
                            119 	.globl _P1_3
                            120 	.globl _P1_2
                            121 	.globl _P1_1
                            122 	.globl _P1_0
                            123 	.globl _TF1
                            124 	.globl _TR1
                            125 	.globl _TF0
                            126 	.globl _TR0
                            127 	.globl _IE1
                            128 	.globl _IT1
                            129 	.globl _IE0
                            130 	.globl _IT0
                            131 	.globl _P0_7
                            132 	.globl _P0_6
                            133 	.globl _P0_5
                            134 	.globl _P0_4
                            135 	.globl _P0_3
                            136 	.globl _P0_2
                            137 	.globl _P0_1
                            138 	.globl _P0_0
                            139 	.globl _EECON
                            140 	.globl _KBF
                            141 	.globl _KBE
                            142 	.globl _KBLS
                            143 	.globl _BRL
                            144 	.globl _BDRCON
                            145 	.globl _T2MOD
                            146 	.globl _SPDAT
                            147 	.globl _SPSTA
                            148 	.globl _SPCON
                            149 	.globl _SADEN
                            150 	.globl _SADDR
                            151 	.globl _WDTPRG
                            152 	.globl _WDTRST
                            153 	.globl _P5
                            154 	.globl _P4
                            155 	.globl _IPH1
                            156 	.globl _IPL1
                            157 	.globl _IPH0
                            158 	.globl _IPL0
                            159 	.globl _IEN1
                            160 	.globl _IEN0
                            161 	.globl _CMOD
                            162 	.globl _CL
                            163 	.globl _CH
                            164 	.globl _CCON
                            165 	.globl _CCAPM4
                            166 	.globl _CCAPM3
                            167 	.globl _CCAPM2
                            168 	.globl _CCAPM1
                            169 	.globl _CCAPM0
                            170 	.globl _CCAP4L
                            171 	.globl _CCAP3L
                            172 	.globl _CCAP2L
                            173 	.globl _CCAP1L
                            174 	.globl _CCAP0L
                            175 	.globl _CCAP4H
                            176 	.globl _CCAP3H
                            177 	.globl _CCAP2H
                            178 	.globl _CCAP1H
                            179 	.globl _CCAP0H
                            180 	.globl _CKCKON1
                            181 	.globl _CKCKON0
                            182 	.globl _CKRL
                            183 	.globl _AUXR1
                            184 	.globl _AUXR
                            185 	.globl _TH2
                            186 	.globl _TL2
                            187 	.globl _RCAP2H
                            188 	.globl _RCAP2L
                            189 	.globl _T2CON
                            190 	.globl _B
                            191 	.globl _ACC
                            192 	.globl _PSW
                            193 	.globl _IP
                            194 	.globl _P3
                            195 	.globl _IE
                            196 	.globl _P2
                            197 	.globl _SBUF
                            198 	.globl _SCON
                            199 	.globl _P1
                            200 	.globl _TH1
                            201 	.globl _TH0
                            202 	.globl _TL1
                            203 	.globl _TL0
                            204 	.globl _TMOD
                            205 	.globl _TCON
                            206 	.globl _PCON
                            207 	.globl _DPH
                            208 	.globl _DPL
                            209 	.globl _SP
                            210 	.globl _P0
                            211 	.globl _build_road_borders
                            212 	.globl _build_road_divider
                            213 	.globl _build_road_divider_1
                            214 	.globl _generate_random_number
                            215 	.globl _glcdUpdate1
                            216 	.globl _move_block
                            217 	.globl _move_block_other
                            218 	.globl _move_block_other_1
                            219 	.globl _refreshCarDir
                            220 ;--------------------------------------------------------
                            221 ; special function registers
                            222 ;--------------------------------------------------------
                            223 	.area RSEG    (DATA)
                    0080    224 _P0	=	0x0080
                    0081    225 _SP	=	0x0081
                    0082    226 _DPL	=	0x0082
                    0083    227 _DPH	=	0x0083
                    0087    228 _PCON	=	0x0087
                    0088    229 _TCON	=	0x0088
                    0089    230 _TMOD	=	0x0089
                    008A    231 _TL0	=	0x008a
                    008B    232 _TL1	=	0x008b
                    008C    233 _TH0	=	0x008c
                    008D    234 _TH1	=	0x008d
                    0090    235 _P1	=	0x0090
                    0098    236 _SCON	=	0x0098
                    0099    237 _SBUF	=	0x0099
                    00A0    238 _P2	=	0x00a0
                    00A8    239 _IE	=	0x00a8
                    00B0    240 _P3	=	0x00b0
                    00B8    241 _IP	=	0x00b8
                    00D0    242 _PSW	=	0x00d0
                    00E0    243 _ACC	=	0x00e0
                    00F0    244 _B	=	0x00f0
                    00C8    245 _T2CON	=	0x00c8
                    00CA    246 _RCAP2L	=	0x00ca
                    00CB    247 _RCAP2H	=	0x00cb
                    00CC    248 _TL2	=	0x00cc
                    00CD    249 _TH2	=	0x00cd
                    008E    250 _AUXR	=	0x008e
                    00A2    251 _AUXR1	=	0x00a2
                    0097    252 _CKRL	=	0x0097
                    008F    253 _CKCKON0	=	0x008f
                    008F    254 _CKCKON1	=	0x008f
                    00FA    255 _CCAP0H	=	0x00fa
                    00FB    256 _CCAP1H	=	0x00fb
                    00FC    257 _CCAP2H	=	0x00fc
                    00FD    258 _CCAP3H	=	0x00fd
                    00FE    259 _CCAP4H	=	0x00fe
                    00EA    260 _CCAP0L	=	0x00ea
                    00EB    261 _CCAP1L	=	0x00eb
                    00EC    262 _CCAP2L	=	0x00ec
                    00ED    263 _CCAP3L	=	0x00ed
                    00EE    264 _CCAP4L	=	0x00ee
                    00DA    265 _CCAPM0	=	0x00da
                    00DB    266 _CCAPM1	=	0x00db
                    00DC    267 _CCAPM2	=	0x00dc
                    00DD    268 _CCAPM3	=	0x00dd
                    00DE    269 _CCAPM4	=	0x00de
                    00D8    270 _CCON	=	0x00d8
                    00F9    271 _CH	=	0x00f9
                    00E9    272 _CL	=	0x00e9
                    00D9    273 _CMOD	=	0x00d9
                    00A8    274 _IEN0	=	0x00a8
                    00B1    275 _IEN1	=	0x00b1
                    00B8    276 _IPL0	=	0x00b8
                    00B7    277 _IPH0	=	0x00b7
                    00B2    278 _IPL1	=	0x00b2
                    00B3    279 _IPH1	=	0x00b3
                    00C0    280 _P4	=	0x00c0
                    00D8    281 _P5	=	0x00d8
                    00A6    282 _WDTRST	=	0x00a6
                    00A7    283 _WDTPRG	=	0x00a7
                    00A9    284 _SADDR	=	0x00a9
                    00B9    285 _SADEN	=	0x00b9
                    00C3    286 _SPCON	=	0x00c3
                    00C4    287 _SPSTA	=	0x00c4
                    00C5    288 _SPDAT	=	0x00c5
                    00C9    289 _T2MOD	=	0x00c9
                    009B    290 _BDRCON	=	0x009b
                    009A    291 _BRL	=	0x009a
                    009C    292 _KBLS	=	0x009c
                    009D    293 _KBE	=	0x009d
                    009E    294 _KBF	=	0x009e
                    00D2    295 _EECON	=	0x00d2
                            296 ;--------------------------------------------------------
                            297 ; special function bits
                            298 ;--------------------------------------------------------
                            299 	.area RSEG    (DATA)
                    0080    300 _P0_0	=	0x0080
                    0081    301 _P0_1	=	0x0081
                    0082    302 _P0_2	=	0x0082
                    0083    303 _P0_3	=	0x0083
                    0084    304 _P0_4	=	0x0084
                    0085    305 _P0_5	=	0x0085
                    0086    306 _P0_6	=	0x0086
                    0087    307 _P0_7	=	0x0087
                    0088    308 _IT0	=	0x0088
                    0089    309 _IE0	=	0x0089
                    008A    310 _IT1	=	0x008a
                    008B    311 _IE1	=	0x008b
                    008C    312 _TR0	=	0x008c
                    008D    313 _TF0	=	0x008d
                    008E    314 _TR1	=	0x008e
                    008F    315 _TF1	=	0x008f
                    0090    316 _P1_0	=	0x0090
                    0091    317 _P1_1	=	0x0091
                    0092    318 _P1_2	=	0x0092
                    0093    319 _P1_3	=	0x0093
                    0094    320 _P1_4	=	0x0094
                    0095    321 _P1_5	=	0x0095
                    0096    322 _P1_6	=	0x0096
                    0097    323 _P1_7	=	0x0097
                    0098    324 _RI	=	0x0098
                    0099    325 _TI	=	0x0099
                    009A    326 _RB8	=	0x009a
                    009B    327 _TB8	=	0x009b
                    009C    328 _REN	=	0x009c
                    009D    329 _SM2	=	0x009d
                    009E    330 _SM1	=	0x009e
                    009F    331 _SM0	=	0x009f
                    00A0    332 _P2_0	=	0x00a0
                    00A1    333 _P2_1	=	0x00a1
                    00A2    334 _P2_2	=	0x00a2
                    00A3    335 _P2_3	=	0x00a3
                    00A4    336 _P2_4	=	0x00a4
                    00A5    337 _P2_5	=	0x00a5
                    00A6    338 _P2_6	=	0x00a6
                    00A7    339 _P2_7	=	0x00a7
                    00A8    340 _EX0	=	0x00a8
                    00A9    341 _ET0	=	0x00a9
                    00AA    342 _EX1	=	0x00aa
                    00AB    343 _ET1	=	0x00ab
                    00AC    344 _ES	=	0x00ac
                    00AF    345 _EA	=	0x00af
                    00B0    346 _P3_0	=	0x00b0
                    00B1    347 _P3_1	=	0x00b1
                    00B2    348 _P3_2	=	0x00b2
                    00B3    349 _P3_3	=	0x00b3
                    00B4    350 _P3_4	=	0x00b4
                    00B5    351 _P3_5	=	0x00b5
                    00B6    352 _P3_6	=	0x00b6
                    00B7    353 _P3_7	=	0x00b7
                    00B0    354 _RXD	=	0x00b0
                    00B1    355 _TXD	=	0x00b1
                    00B2    356 _INT0	=	0x00b2
                    00B3    357 _INT1	=	0x00b3
                    00B4    358 _T0	=	0x00b4
                    00B5    359 _T1	=	0x00b5
                    00B6    360 _WR	=	0x00b6
                    00B7    361 _RD	=	0x00b7
                    00B8    362 _PX0	=	0x00b8
                    00B9    363 _PT0	=	0x00b9
                    00BA    364 _PX1	=	0x00ba
                    00BB    365 _PT1	=	0x00bb
                    00BC    366 _PS	=	0x00bc
                    00D0    367 _P	=	0x00d0
                    00D1    368 _F1	=	0x00d1
                    00D2    369 _OV	=	0x00d2
                    00D3    370 _RS0	=	0x00d3
                    00D4    371 _RS1	=	0x00d4
                    00D5    372 _F0	=	0x00d5
                    00D6    373 _AC	=	0x00d6
                    00D7    374 _CY	=	0x00d7
                    00AD    375 _ET2	=	0x00ad
                    00BD    376 _PT2	=	0x00bd
                    00C8    377 _T2CON_0	=	0x00c8
                    00C9    378 _T2CON_1	=	0x00c9
                    00CA    379 _T2CON_2	=	0x00ca
                    00CB    380 _T2CON_3	=	0x00cb
                    00CC    381 _T2CON_4	=	0x00cc
                    00CD    382 _T2CON_5	=	0x00cd
                    00CE    383 _T2CON_6	=	0x00ce
                    00CF    384 _T2CON_7	=	0x00cf
                    00C8    385 _CP_RL2	=	0x00c8
                    00C9    386 _C_T2	=	0x00c9
                    00CA    387 _TR2	=	0x00ca
                    00CB    388 _EXEN2	=	0x00cb
                    00CC    389 _TCLK	=	0x00cc
                    00CD    390 _RCLK	=	0x00cd
                    00CE    391 _EXF2	=	0x00ce
                    00CF    392 _TF2	=	0x00cf
                    00DF    393 _CF	=	0x00df
                    00DE    394 _CR	=	0x00de
                    00DC    395 _CCF4	=	0x00dc
                    00DB    396 _CCF3	=	0x00db
                    00DA    397 _CCF2	=	0x00da
                    00D9    398 _CCF1	=	0x00d9
                    00D8    399 _CCF0	=	0x00d8
                    00AE    400 _EC	=	0x00ae
                    00BE    401 _PPCL	=	0x00be
                    00BD    402 _PT2L	=	0x00bd
                    00BC    403 _PLS	=	0x00bc
                    00BB    404 _PT1L	=	0x00bb
                    00BA    405 _PX1L	=	0x00ba
                    00B9    406 _PT0L	=	0x00b9
                    00B8    407 _PX0L	=	0x00b8
                    00C0    408 _P4_0	=	0x00c0
                    00C1    409 _P4_1	=	0x00c1
                    00C2    410 _P4_2	=	0x00c2
                    00C3    411 _P4_3	=	0x00c3
                    00C4    412 _P4_4	=	0x00c4
                    00C5    413 _P4_5	=	0x00c5
                    00C6    414 _P4_6	=	0x00c6
                    00C7    415 _P4_7	=	0x00c7
                    00D8    416 _P5_0	=	0x00d8
                    00D9    417 _P5_1	=	0x00d9
                    00DA    418 _P5_2	=	0x00da
                    00DB    419 _P5_3	=	0x00db
                    00DC    420 _P5_4	=	0x00dc
                    00DD    421 _P5_5	=	0x00dd
                    00DE    422 _P5_6	=	0x00de
                    00DF    423 _P5_7	=	0x00df
                            424 ;--------------------------------------------------------
                            425 ; overlayable register banks
                            426 ;--------------------------------------------------------
                            427 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     428 	.ds 8
                            429 ;--------------------------------------------------------
                            430 ; internal ram data
                            431 ;--------------------------------------------------------
                            432 	.area DSEG    (DATA)
                            433 ;--------------------------------------------------------
                            434 ; overlayable items in internal ram 
                            435 ;--------------------------------------------------------
                            436 	.area OSEG    (OVR,DATA)
                            437 ;--------------------------------------------------------
                            438 ; indirectly addressable internal ram data
                            439 ;--------------------------------------------------------
                            440 	.area ISEG    (DATA)
                            441 ;--------------------------------------------------------
                            442 ; bit data
                            443 ;--------------------------------------------------------
                            444 	.area BSEG    (BIT)
                            445 ;--------------------------------------------------------
                            446 ; paged external ram data
                            447 ;--------------------------------------------------------
                            448 	.area PSEG    (PAG,XDATA)
                            449 ;--------------------------------------------------------
                            450 ; external ram data
                            451 ;--------------------------------------------------------
                            452 	.area XSEG    (XDATA)
   0000                     453 _glcdUpdate1_code_byte_1_1:
   0000                     454 	.ds 2
   0002                     455 _refreshCarDir_oldDir_1_1:
   0002                     456 	.ds 2
                            457 ;--------------------------------------------------------
                            458 ; external initialized ram data
                            459 ;--------------------------------------------------------
                            460 	.area XISEG   (XDATA)
                            461 	.area HOME    (CODE)
                            462 	.area GSINIT0 (CODE)
                            463 	.area GSINIT1 (CODE)
                            464 	.area GSINIT2 (CODE)
                            465 	.area GSINIT3 (CODE)
                            466 	.area GSINIT4 (CODE)
                            467 	.area GSINIT5 (CODE)
                            468 	.area GSINIT  (CODE)
                            469 	.area GSFINAL (CODE)
                            470 	.area CSEG    (CODE)
                            471 ;--------------------------------------------------------
                            472 ; global & static initialisations
                            473 ;--------------------------------------------------------
                            474 	.area HOME    (CODE)
                            475 	.area GSINIT  (CODE)
                            476 	.area GSFINAL (CODE)
                            477 	.area GSINIT  (CODE)
                            478 ;--------------------------------------------------------
                            479 ; Home
                            480 ;--------------------------------------------------------
                            481 	.area HOME    (CODE)
                            482 	.area CSEG    (CODE)
                            483 ;--------------------------------------------------------
                            484 ; code
                            485 ;--------------------------------------------------------
                            486 	.area CSEG    (CODE)
                            487 ;------------------------------------------------------------
                            488 ;Allocation info for local variables in function 'build_road_borders'
                            489 ;------------------------------------------------------------
                            490 ;i                         Allocated with name '_build_road_borders_i_1_1'
                            491 ;------------------------------------------------------------
                            492 ;	racing.c:37: void build_road_borders(){
                            493 ;	-----------------------------------------
                            494 ;	 function build_road_borders
                            495 ;	-----------------------------------------
   0000                     496 _build_road_borders:
                    0002    497 	ar2 = 0x02
                    0003    498 	ar3 = 0x03
                    0004    499 	ar4 = 0x04
                    0005    500 	ar5 = 0x05
                    0006    501 	ar6 = 0x06
                    0007    502 	ar7 = 0x07
                    0000    503 	ar0 = 0x00
                    0001    504 	ar1 = 0x01
                            505 ;	racing.c:39: for(i=0;i<16;i++)
                            506 ;	genAssign
   0000 7A 00               507 	mov	r2,#0x00
   0002 7B 00               508 	mov	r3,#0x00
   0004                     509 00101$:
                            510 ;	genCmpLt
                            511 ;	genCmp
   0004 C3                  512 	clr	c
   0005 EA                  513 	mov	a,r2
   0006 94 10               514 	subb	a,#0x10
   0008 EB                  515 	mov	a,r3
   0009 64 80               516 	xrl	a,#0x80
   000B 94 80               517 	subb	a,#0x80
                            518 ;	genIfxJump
                            519 ;	Peephole 108.a	removed ljmp by inverse jump logic
   000D 50 27               520 	jnc	00104$
                            521 ;	Peephole 300	removed redundant label 00117$
                            522 ;	racing.c:40: arena[i][0] = code_byte_ROAD;				//For the 1st column
                            523 ;	genLeftShift
                            524 ;	genLeftShiftLiteral
                            525 ;	genlshTwo
   000F 8A 04               526 	mov	ar4,r2
   0011 EB                  527 	mov	a,r3
   0012 C4                  528 	swap	a
   0013 54 F0               529 	anl	a,#0xf0
   0015 CC                  530 	xch	a,r4
   0016 C4                  531 	swap	a
   0017 CC                  532 	xch	a,r4
   0018 6C                  533 	xrl	a,r4
   0019 CC                  534 	xch	a,r4
   001A 54 F0               535 	anl	a,#0xf0
   001C CC                  536 	xch	a,r4
   001D 6C                  537 	xrl	a,r4
   001E FD                  538 	mov	r5,a
                            539 ;	genPlus
                            540 ;	Peephole 236.g	used r4 instead of ar4
   001F EC                  541 	mov	a,r4
   0020 24r00               542 	add	a,#_arena
   0022 F5 82               543 	mov	dpl,a
                            544 ;	Peephole 236.g	used r5 instead of ar5
   0024 ED                  545 	mov	a,r5
   0025 34s00               546 	addc	a,#(_arena >> 8)
   0027 F5 83               547 	mov	dph,a
                            548 ;	genPointerSet
                            549 ;     genFarPointerSet
   0029 74 67               550 	mov	a,#0x67
   002B F0                  551 	movx	@dptr,a
   002C A3                  552 	inc	dptr
                            553 ;	Peephole 181	changed mov to clr
   002D E4                  554 	clr	a
   002E F0                  555 	movx	@dptr,a
                            556 ;	racing.c:39: for(i=0;i<16;i++)
                            557 ;	genPlus
                            558 ;     genPlusIncr
                            559 ;	tail increment optimized (range 6)
   002F 0A                  560 	inc	r2
   0030 BA 00 D1            561 	cjne	r2,#0x00,00101$
   0033 0B                  562 	inc	r3
                            563 ;	Peephole 112.b	changed ljmp to sjmp
   0034 80 CE               564 	sjmp	00101$
   0036                     565 00104$:
                            566 ;	racing.c:41: for(i=0;i<16;i++)
                            567 ;	genAssign
   0036 7A 00               568 	mov	r2,#0x00
   0038 7B 00               569 	mov	r3,#0x00
   003A                     570 00105$:
                            571 ;	genCmpLt
                            572 ;	genCmp
   003A C3                  573 	clr	c
   003B EA                  574 	mov	a,r2
   003C 94 10               575 	subb	a,#0x10
   003E EB                  576 	mov	a,r3
   003F 64 80               577 	xrl	a,#0x80
   0041 94 80               578 	subb	a,#0x80
                            579 ;	genIfxJump
                            580 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0043 50 2E               581 	jnc	00109$
                            582 ;	Peephole 300	removed redundant label 00118$
                            583 ;	racing.c:42: arena[i][7] = code_byte_ROAD;				//For the 8th column
                            584 ;	genLeftShift
                            585 ;	genLeftShiftLiteral
                            586 ;	genlshTwo
   0045 8A 04               587 	mov	ar4,r2
   0047 EB                  588 	mov	a,r3
   0048 C4                  589 	swap	a
   0049 54 F0               590 	anl	a,#0xf0
   004B CC                  591 	xch	a,r4
   004C C4                  592 	swap	a
   004D CC                  593 	xch	a,r4
   004E 6C                  594 	xrl	a,r4
   004F CC                  595 	xch	a,r4
   0050 54 F0               596 	anl	a,#0xf0
   0052 CC                  597 	xch	a,r4
   0053 6C                  598 	xrl	a,r4
   0054 FD                  599 	mov	r5,a
                            600 ;	genPlus
                            601 ;	Peephole 236.g	used r4 instead of ar4
   0055 EC                  602 	mov	a,r4
   0056 24r00               603 	add	a,#_arena
   0058 FC                  604 	mov	r4,a
                            605 ;	Peephole 236.g	used r5 instead of ar5
   0059 ED                  606 	mov	a,r5
   005A 34s00               607 	addc	a,#(_arena >> 8)
   005C FD                  608 	mov	r5,a
                            609 ;	genPlus
                            610 ;     genPlusIncr
   005D 74 0E               611 	mov	a,#0x0E
                            612 ;	Peephole 236.a	used r4 instead of ar4
   005F 2C                  613 	add	a,r4
   0060 F5 82               614 	mov	dpl,a
                            615 ;	Peephole 181	changed mov to clr
   0062 E4                  616 	clr	a
                            617 ;	Peephole 236.b	used r5 instead of ar5
   0063 3D                  618 	addc	a,r5
   0064 F5 83               619 	mov	dph,a
                            620 ;	genPointerSet
                            621 ;     genFarPointerSet
   0066 74 67               622 	mov	a,#0x67
   0068 F0                  623 	movx	@dptr,a
   0069 A3                  624 	inc	dptr
                            625 ;	Peephole 181	changed mov to clr
   006A E4                  626 	clr	a
   006B F0                  627 	movx	@dptr,a
                            628 ;	racing.c:41: for(i=0;i<16;i++)
                            629 ;	genPlus
                            630 ;     genPlusIncr
                            631 ;	tail increment optimized (range 7)
   006C 0A                  632 	inc	r2
   006D BA 00 CA            633 	cjne	r2,#0x00,00105$
   0070 0B                  634 	inc	r3
                            635 ;	Peephole 112.b	changed ljmp to sjmp
   0071 80 C7               636 	sjmp	00105$
   0073                     637 00109$:
   0073 22                  638 	ret
                            639 ;------------------------------------------------------------
                            640 ;Allocation info for local variables in function 'build_road_divider'
                            641 ;------------------------------------------------------------
                            642 ;i                         Allocated with name '_build_road_divider_i_1_1'
                            643 ;------------------------------------------------------------
                            644 ;	racing.c:47: void build_road_divider(){
                            645 ;	-----------------------------------------
                            646 ;	 function build_road_divider
                            647 ;	-----------------------------------------
   0074                     648 _build_road_divider:
                            649 ;	racing.c:49: for(i=0;i<16;i++)
                            650 ;	genAssign
   0074 7A 00               651 	mov	r2,#0x00
   0076 7B 00               652 	mov	r3,#0x00
   0078                     653 00101$:
                            654 ;	genCmpLt
                            655 ;	genCmp
   0078 C3                  656 	clr	c
   0079 EA                  657 	mov	a,r2
   007A 94 10               658 	subb	a,#0x10
   007C EB                  659 	mov	a,r3
   007D 64 80               660 	xrl	a,#0x80
   007F 94 80               661 	subb	a,#0x80
                            662 ;	genIfxJump
                            663 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0081 50 2E               664 	jnc	00105$
                            665 ;	Peephole 300	removed redundant label 00110$
                            666 ;	racing.c:50: arena[i][3] = code_byte_ROAD_DIVIDER;
                            667 ;	genLeftShift
                            668 ;	genLeftShiftLiteral
                            669 ;	genlshTwo
   0083 8A 04               670 	mov	ar4,r2
   0085 EB                  671 	mov	a,r3
   0086 C4                  672 	swap	a
   0087 54 F0               673 	anl	a,#0xf0
   0089 CC                  674 	xch	a,r4
   008A C4                  675 	swap	a
   008B CC                  676 	xch	a,r4
   008C 6C                  677 	xrl	a,r4
   008D CC                  678 	xch	a,r4
   008E 54 F0               679 	anl	a,#0xf0
   0090 CC                  680 	xch	a,r4
   0091 6C                  681 	xrl	a,r4
   0092 FD                  682 	mov	r5,a
                            683 ;	genPlus
                            684 ;	Peephole 236.g	used r4 instead of ar4
   0093 EC                  685 	mov	a,r4
   0094 24r00               686 	add	a,#_arena
   0096 FC                  687 	mov	r4,a
                            688 ;	Peephole 236.g	used r5 instead of ar5
   0097 ED                  689 	mov	a,r5
   0098 34s00               690 	addc	a,#(_arena >> 8)
   009A FD                  691 	mov	r5,a
                            692 ;	genPlus
                            693 ;     genPlusIncr
   009B 74 06               694 	mov	a,#0x06
                            695 ;	Peephole 236.a	used r4 instead of ar4
   009D 2C                  696 	add	a,r4
   009E F5 82               697 	mov	dpl,a
                            698 ;	Peephole 181	changed mov to clr
   00A0 E4                  699 	clr	a
                            700 ;	Peephole 236.b	used r5 instead of ar5
   00A1 3D                  701 	addc	a,r5
   00A2 F5 83               702 	mov	dph,a
                            703 ;	genPointerSet
                            704 ;     genFarPointerSet
   00A4 74 68               705 	mov	a,#0x68
   00A6 F0                  706 	movx	@dptr,a
   00A7 A3                  707 	inc	dptr
                            708 ;	Peephole 181	changed mov to clr
   00A8 E4                  709 	clr	a
   00A9 F0                  710 	movx	@dptr,a
                            711 ;	racing.c:49: for(i=0;i<16;i++)
                            712 ;	genPlus
                            713 ;     genPlusIncr
                            714 ;	tail increment optimized (range 7)
   00AA 0A                  715 	inc	r2
   00AB BA 00 CA            716 	cjne	r2,#0x00,00101$
   00AE 0B                  717 	inc	r3
                            718 ;	Peephole 112.b	changed ljmp to sjmp
   00AF 80 C7               719 	sjmp	00101$
   00B1                     720 00105$:
   00B1 22                  721 	ret
                            722 ;------------------------------------------------------------
                            723 ;Allocation info for local variables in function 'build_road_divider_1'
                            724 ;------------------------------------------------------------
                            725 ;i                         Allocated with name '_build_road_divider_1_i_1_1'
                            726 ;------------------------------------------------------------
                            727 ;	racing.c:58: void build_road_divider_1(){
                            728 ;	-----------------------------------------
                            729 ;	 function build_road_divider_1
                            730 ;	-----------------------------------------
   00B2                     731 _build_road_divider_1:
                            732 ;	racing.c:60: for(i=0;i<16;i++)
                            733 ;	genAssign
   00B2 7A 00               734 	mov	r2,#0x00
   00B4 7B 00               735 	mov	r3,#0x00
   00B6                     736 00101$:
                            737 ;	genCmpLt
                            738 ;	genCmp
   00B6 C3                  739 	clr	c
   00B7 EA                  740 	mov	a,r2
   00B8 94 10               741 	subb	a,#0x10
   00BA EB                  742 	mov	a,r3
   00BB 64 80               743 	xrl	a,#0x80
   00BD 94 80               744 	subb	a,#0x80
                            745 ;	genIfxJump
                            746 ;	Peephole 108.a	removed ljmp by inverse jump logic
   00BF 50 2E               747 	jnc	00105$
                            748 ;	Peephole 300	removed redundant label 00110$
                            749 ;	racing.c:61: arena[i][3] = code_byte_ROAD_DIVIDER_1;
                            750 ;	genLeftShift
                            751 ;	genLeftShiftLiteral
                            752 ;	genlshTwo
   00C1 8A 04               753 	mov	ar4,r2
   00C3 EB                  754 	mov	a,r3
   00C4 C4                  755 	swap	a
   00C5 54 F0               756 	anl	a,#0xf0
   00C7 CC                  757 	xch	a,r4
   00C8 C4                  758 	swap	a
   00C9 CC                  759 	xch	a,r4
   00CA 6C                  760 	xrl	a,r4
   00CB CC                  761 	xch	a,r4
   00CC 54 F0               762 	anl	a,#0xf0
   00CE CC                  763 	xch	a,r4
   00CF 6C                  764 	xrl	a,r4
   00D0 FD                  765 	mov	r5,a
                            766 ;	genPlus
                            767 ;	Peephole 236.g	used r4 instead of ar4
   00D1 EC                  768 	mov	a,r4
   00D2 24r00               769 	add	a,#_arena
   00D4 FC                  770 	mov	r4,a
                            771 ;	Peephole 236.g	used r5 instead of ar5
   00D5 ED                  772 	mov	a,r5
   00D6 34s00               773 	addc	a,#(_arena >> 8)
   00D8 FD                  774 	mov	r5,a
                            775 ;	genPlus
                            776 ;     genPlusIncr
   00D9 74 06               777 	mov	a,#0x06
                            778 ;	Peephole 236.a	used r4 instead of ar4
   00DB 2C                  779 	add	a,r4
   00DC F5 82               780 	mov	dpl,a
                            781 ;	Peephole 181	changed mov to clr
   00DE E4                  782 	clr	a
                            783 ;	Peephole 236.b	used r5 instead of ar5
   00DF 3D                  784 	addc	a,r5
   00E0 F5 83               785 	mov	dph,a
                            786 ;	genPointerSet
                            787 ;     genFarPointerSet
   00E2 74 69               788 	mov	a,#0x69
   00E4 F0                  789 	movx	@dptr,a
   00E5 A3                  790 	inc	dptr
                            791 ;	Peephole 181	changed mov to clr
   00E6 E4                  792 	clr	a
   00E7 F0                  793 	movx	@dptr,a
                            794 ;	racing.c:60: for(i=0;i<16;i++)
                            795 ;	genPlus
                            796 ;     genPlusIncr
                            797 ;	tail increment optimized (range 7)
   00E8 0A                  798 	inc	r2
   00E9 BA 00 CA            799 	cjne	r2,#0x00,00101$
   00EC 0B                  800 	inc	r3
                            801 ;	Peephole 112.b	changed ljmp to sjmp
   00ED 80 C7               802 	sjmp	00101$
   00EF                     803 00105$:
   00EF 22                  804 	ret
                            805 ;------------------------------------------------------------
                            806 ;Allocation info for local variables in function 'generate_random_number'
                            807 ;------------------------------------------------------------
                            808 ;random_number             Allocated with name '_generate_random_number_random_number_1_1'
                            809 ;------------------------------------------------------------
                            810 ;	racing.c:67: unsigned char generate_random_number(){
                            811 ;	-----------------------------------------
                            812 ;	 function generate_random_number
                            813 ;	-----------------------------------------
   00F0                     814 _generate_random_number:
                            815 ;	racing.c:69: while(1)
   00F0                     816 00106$:
                            817 ;	racing.c:71: random_number = (rand()%6)+1;            //Mod based on the number of columns. Add 1 to avoid 0
                            818 ;	genCall
   00F0 12s00r00            819 	lcall	_rand
   00F3 AA 82               820 	mov	r2,dpl
   00F5 AB 83               821 	mov	r3,dph
                            822 ;	genAssign
   00F7 90s00r00            823 	mov	dptr,#__moduint_PARM_2
   00FA 74 06               824 	mov	a,#0x06
   00FC F0                  825 	movx	@dptr,a
   00FD E4                  826 	clr	a
   00FE A3                  827 	inc	dptr
   00FF F0                  828 	movx	@dptr,a
                            829 ;	genCall
   0100 8A 82               830 	mov	dpl,r2
   0102 8B 83               831 	mov	dph,r3
   0104 12s00r00            832 	lcall	__moduint
   0107 AA 82               833 	mov	r2,dpl
   0109 AB 83               834 	mov	r3,dph
                            835 ;	genCast
                            836 ;	genPlus
                            837 ;     genPlusIncr
   010B 0A                  838 	inc	r2
                            839 ;	racing.c:72: if(random_number!=3&&random_number!=0&&random_number!=7)						//Blocks are not wanted on the road divider
                            840 ;	genCmpEq
                            841 ;	gencjneshort
   010C BA 03 02            842 	cjne	r2,#0x03,00114$
                            843 ;	Peephole 112.b	changed ljmp to sjmp
   010F 80 DF               844 	sjmp	00106$
   0111                     845 00114$:
                            846 ;	genCmpEq
                            847 ;	gencjneshort
   0111 BA 00 02            848 	cjne	r2,#0x00,00115$
                            849 ;	Peephole 112.b	changed ljmp to sjmp
   0114 80 DA               850 	sjmp	00106$
   0116                     851 00115$:
                            852 ;	genCmpEq
                            853 ;	gencjneshort
   0116 BA 07 02            854 	cjne	r2,#0x07,00116$
                            855 ;	Peephole 112.b	changed ljmp to sjmp
   0119 80 D5               856 	sjmp	00106$
   011B                     857 00116$:
                            858 ;	racing.c:73: return random_number;
                            859 ;	genRet
   011B 8A 82               860 	mov	dpl,r2
                            861 ;	Peephole 300	removed redundant label 00108$
   011D 22                  862 	ret
                            863 ;------------------------------------------------------------
                            864 ;Allocation info for local variables in function 'glcdUpdate1'
                            865 ;------------------------------------------------------------
                            866 ;x                         Allocated with name '_glcdUpdate1_x_1_1'
                            867 ;y                         Allocated with name '_glcdUpdate1_y_1_1'
                            868 ;code_byte                 Allocated with name '_glcdUpdate1_code_byte_1_1'
                            869 ;i                         Allocated with name '_glcdUpdate1_i_1_1'
                            870 ;------------------------------------------------------------
                            871 ;	racing.c:83: void glcdUpdate1() {
                            872 ;	-----------------------------------------
                            873 ;	 function glcdUpdate1
                            874 ;	-----------------------------------------
   011E                     875 _glcdUpdate1:
                            876 ;	racing.c:85: for(y = 0; y < 8; y++) {
                            877 ;	genAssign
   011E 7A 00               878 	mov	r2,#0x00
   0120 7B 00               879 	mov	r3,#0x00
   0122                     880 00207$:
                            881 ;	genCmpLt
                            882 ;	genCmp
   0122 C3                  883 	clr	c
   0123 EA                  884 	mov	a,r2
   0124 94 08               885 	subb	a,#0x08
   0126 EB                  886 	mov	a,r3
   0127 94 00               887 	subb	a,#0x00
                            888 ;	genIfxJump
   0129 40 01               889 	jc	00283$
                            890 ;	Peephole 251.a	replaced ljmp to ret with ret
   012B 22                  891 	ret
   012C                     892 00283$:
                            893 ;	racing.c:87: lcdcmd1(0x40);
                            894 ;	genCall
   012C 75 82 40            895 	mov	dpl,#0x40
   012F C0 02               896 	push	ar2
   0131 C0 03               897 	push	ar3
   0133 12s00r00            898 	lcall	_lcdcmd1
   0136 D0 03               899 	pop	ar3
   0138 D0 02               900 	pop	ar2
                            901 ;	racing.c:88: lcdcmd2(0x40);
                            902 ;	genCall
   013A 75 82 40            903 	mov	dpl,#0x40
   013D C0 02               904 	push	ar2
   013F C0 03               905 	push	ar3
   0141 12s00r00            906 	lcall	_lcdcmd2
   0144 D0 03               907 	pop	ar3
   0146 D0 02               908 	pop	ar2
                            909 ;	racing.c:89: lcdcmd1(y|0xB8);
                            910 ;	genOr
   0148 74 B8               911 	mov	a,#0xB8
   014A 4A                  912 	orl	a,r2
   014B FC                  913 	mov	r4,a
   014C 8B 05               914 	mov	ar5,r3
                            915 ;	genCast
                            916 ;	genCall
   014E 8C 82               917 	mov	dpl,r4
   0150 C0 02               918 	push	ar2
   0152 C0 03               919 	push	ar3
   0154 C0 04               920 	push	ar4
   0156 12s00r00            921 	lcall	_lcdcmd1
   0159 D0 04               922 	pop	ar4
   015B D0 03               923 	pop	ar3
   015D D0 02               924 	pop	ar2
                            925 ;	racing.c:90: lcdcmd2(y|0xB8);
                            926 ;	genCall
   015F 8C 82               927 	mov	dpl,r4
   0161 C0 02               928 	push	ar2
   0163 C0 03               929 	push	ar3
   0165 12s00r00            930 	lcall	_lcdcmd2
   0168 D0 03               931 	pop	ar3
   016A D0 02               932 	pop	ar2
                            933 ;	racing.c:92: for(x=0; x<16; x++)
                            934 ;	genLeftShift
                            935 ;	genLeftShiftLiteral
                            936 ;	genlshTwo
   016C 8A 04               937 	mov	ar4,r2
   016E EB                  938 	mov	a,r3
   016F CC                  939 	xch	a,r4
   0170 25 E0               940 	add	a,acc
   0172 CC                  941 	xch	a,r4
   0173 33                  942 	rlc	a
   0174 FD                  943 	mov	r5,a
                            944 ;	genAssign
   0175 7E 00               945 	mov	r6,#0x00
   0177 7F 00               946 	mov	r7,#0x00
   0179                     947 00203$:
                            948 ;	genCmpLt
                            949 ;	genCmp
   0179 C3                  950 	clr	c
   017A EE                  951 	mov	a,r6
   017B 94 10               952 	subb	a,#0x10
   017D EF                  953 	mov	a,r7
   017E 94 00               954 	subb	a,#0x00
                            955 ;	genIfxJump
   0180 40 03               956 	jc	00284$
   0182 02s07r63            957 	ljmp	00209$
   0185                     958 00284$:
                            959 ;	racing.c:94: code_byte = arena[x][y];
                            960 ;	genLeftShift
                            961 ;	genLeftShiftLiteral
                            962 ;	genlshTwo
   0185 8E 00               963 	mov	ar0,r6
   0187 EF                  964 	mov	a,r7
   0188 C4                  965 	swap	a
   0189 54 F0               966 	anl	a,#0xf0
   018B C8                  967 	xch	a,r0
   018C C4                  968 	swap	a
   018D C8                  969 	xch	a,r0
   018E 68                  970 	xrl	a,r0
   018F C8                  971 	xch	a,r0
   0190 54 F0               972 	anl	a,#0xf0
   0192 C8                  973 	xch	a,r0
   0193 68                  974 	xrl	a,r0
   0194 F9                  975 	mov	r1,a
                            976 ;	genPlus
                            977 ;	Peephole 236.g	used r0 instead of ar0
   0195 E8                  978 	mov	a,r0
   0196 24r00               979 	add	a,#_arena
   0198 F8                  980 	mov	r0,a
                            981 ;	Peephole 236.g	used r1 instead of ar1
   0199 E9                  982 	mov	a,r1
   019A 34s00               983 	addc	a,#(_arena >> 8)
   019C F9                  984 	mov	r1,a
                            985 ;	genPlus
                            986 ;	Peephole 236.g	used r4 instead of ar4
   019D EC                  987 	mov	a,r4
                            988 ;	Peephole 236.a	used r0 instead of ar0
   019E 28                  989 	add	a,r0
   019F F5 82               990 	mov	dpl,a
                            991 ;	Peephole 236.g	used r5 instead of ar5
   01A1 ED                  992 	mov	a,r5
                            993 ;	Peephole 236.b	used r1 instead of ar1
   01A2 39                  994 	addc	a,r1
   01A3 F5 83               995 	mov	dph,a
                            996 ;	genPointerGet
                            997 ;	genFarPointerGet
   01A5 E0                  998 	movx	a,@dptr
   01A6 F8                  999 	mov	r0,a
   01A7 A3                 1000 	inc	dptr
   01A8 E0                 1001 	movx	a,@dptr
   01A9 F9                 1002 	mov	r1,a
                           1003 ;	genAssign
   01AA 90s00r00           1004 	mov	dptr,#_glcdUpdate1_code_byte_1_1
   01AD E8                 1005 	mov	a,r0
   01AE F0                 1006 	movx	@dptr,a
   01AF A3                 1007 	inc	dptr
   01B0 E9                 1008 	mov	a,r1
   01B1 F0                 1009 	movx	@dptr,a
                           1010 ;	racing.c:96: if(code_byte==code_byte_BLOCK) {							//If the current elcement is the first obstacle block 
                           1011 ;	genCmpEq
                           1012 ;	gencjneshort
   01B2 B8 DE 05           1013 	cjne	r0,#0xDE,00285$
   01B5 B9 00 02           1014 	cjne	r1,#0x00,00285$
   01B8 80 03              1015 	sjmp	00286$
   01BA                    1016 00285$:
   01BA 02s02r65           1017 	ljmp	00105$
   01BD                    1018 00286$:
                           1019 ;	racing.c:97: if(x<8)
                           1020 ;	genCmpLt
                           1021 ;	genCmp
   01BD C3                 1022 	clr	c
   01BE EE                 1023 	mov	a,r6
   01BF 94 08              1024 	subb	a,#0x08
   01C1 EF                 1025 	mov	a,r7
   01C2 94 00              1026 	subb	a,#0x00
                           1027 ;	genIfxJump
                           1028 ;	Peephole 108.a	removed ljmp by inverse jump logic
   01C4 50 51              1029 	jnc	00220$
                           1030 ;	Peephole 300	removed redundant label 00287$
                           1031 ;	racing.c:98: for(i=0; i<8; i++)
                           1032 ;	genAssign
   01C6 78 00              1033 	mov	r0,#0x00
   01C8 79 00              1034 	mov	r1,#0x00
   01CA                    1035 00141$:
                           1036 ;	genCmpLt
                           1037 ;	genCmp
   01CA C3                 1038 	clr	c
   01CB E8                 1039 	mov	a,r0
   01CC 94 08              1040 	subb	a,#0x08
   01CE E9                 1041 	mov	a,r1
   01CF 94 00              1042 	subb	a,#0x00
                           1043 ;	genIfxJump
   01D1 40 03              1044 	jc	00288$
   01D3 02s02r65           1045 	ljmp	00105$
   01D6                    1046 00288$:
                           1047 ;	racing.c:99: lcddata_b1(RACING_BITMAP[OFFSET_BLOCK+i]);		//Print the bitmap of the first obstacle block on the GLCD
                           1048 ;	genIpush
   01D6 C0 04              1049 	push	ar4
   01D8 C0 05              1050 	push	ar5
                           1051 ;	genCast
   01DA 88 04              1052 	mov	ar4,r0
                           1053 ;	genLeftShift
                           1054 ;	genLeftShiftLiteral
                           1055 ;	genlshOne
   01DC EC                 1056 	mov	a,r4
                           1057 ;	Peephole 254	optimized left shift
   01DD 2C                 1058 	add	a,r4
                           1059 ;	genPlus
                           1060 ;	Peephole 177.b	removed redundant mov
                           1061 ;	Peephole 181	changed mov to clr
                           1062 ;	genPointerGet
                           1063 ;	genCodePointerGet
                           1064 ;	Peephole 186.c	optimized movc sequence
                           1065 ;	Peephole 177.c	removed redundant move
   01DE FC                 1066 	mov	r4,a
   01DF 90s00r00           1067 	mov	dptr,#_RACING_BITMAP
   01E2 93                 1068 	movc	a,@a+dptr
   01E3 CC                 1069 	xch	a,r4
   01E4 A3                 1070 	inc	dptr
   01E5 93                 1071 	movc	a,@a+dptr
   01E6 FD                 1072 	mov	r5,a
                           1073 ;	genCast
                           1074 ;	genCall
   01E7 8C 82              1075 	mov	dpl,r4
   01E9 C0 02              1076 	push	ar2
   01EB C0 03              1077 	push	ar3
   01ED C0 04              1078 	push	ar4
   01EF C0 05              1079 	push	ar5
   01F1 C0 06              1080 	push	ar6
   01F3 C0 07              1081 	push	ar7
   01F5 C0 00              1082 	push	ar0
   01F7 C0 01              1083 	push	ar1
   01F9 12s00r00           1084 	lcall	_lcddata_b1
   01FC D0 01              1085 	pop	ar1
   01FE D0 00              1086 	pop	ar0
   0200 D0 07              1087 	pop	ar7
   0202 D0 06              1088 	pop	ar6
   0204 D0 05              1089 	pop	ar5
   0206 D0 04              1090 	pop	ar4
   0208 D0 03              1091 	pop	ar3
   020A D0 02              1092 	pop	ar2
                           1093 ;	racing.c:98: for(i=0; i<8; i++)
                           1094 ;	genPlus
                           1095 ;     genPlusIncr
   020C 08                 1096 	inc	r0
   020D B8 00 01           1097 	cjne	r0,#0x00,00289$
   0210 09                 1098 	inc	r1
   0211                    1099 00289$:
                           1100 ;	genIpop
   0211 D0 05              1101 	pop	ar5
   0213 D0 04              1102 	pop	ar4
                           1103 ;	racing.c:102: for(i=0; i<8; i++)								
                           1104 ;	Peephole 112.b	changed ljmp to sjmp
   0215 80 B3              1105 	sjmp	00141$
   0217                    1106 00220$:
                           1107 ;	genAssign
   0217 78 00              1108 	mov	r0,#0x00
   0219 79 00              1109 	mov	r1,#0x00
   021B                    1110 00145$:
                           1111 ;	genCmpLt
                           1112 ;	genCmp
   021B C3                 1113 	clr	c
   021C E8                 1114 	mov	a,r0
   021D 94 08              1115 	subb	a,#0x08
   021F E9                 1116 	mov	a,r1
   0220 94 00              1117 	subb	a,#0x00
                           1118 ;	genIfxJump
                           1119 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0222 50 41              1120 	jnc	00105$
                           1121 ;	Peephole 300	removed redundant label 00290$
                           1122 ;	racing.c:104: lcddata_b2(RACING_BITMAP[OFFSET_BLOCK+i]);
                           1123 ;	genIpush
   0224 C0 04              1124 	push	ar4
   0226 C0 05              1125 	push	ar5
                           1126 ;	genCast
   0228 88 04              1127 	mov	ar4,r0
                           1128 ;	genLeftShift
                           1129 ;	genLeftShiftLiteral
                           1130 ;	genlshOne
   022A EC                 1131 	mov	a,r4
                           1132 ;	Peephole 254	optimized left shift
   022B 2C                 1133 	add	a,r4
                           1134 ;	genPlus
                           1135 ;	Peephole 177.b	removed redundant mov
                           1136 ;	Peephole 181	changed mov to clr
                           1137 ;	genPointerGet
                           1138 ;	genCodePointerGet
                           1139 ;	Peephole 186.c	optimized movc sequence
                           1140 ;	Peephole 177.c	removed redundant move
   022C FC                 1141 	mov	r4,a
   022D 90s00r00           1142 	mov	dptr,#_RACING_BITMAP
   0230 93                 1143 	movc	a,@a+dptr
   0231 CC                 1144 	xch	a,r4
   0232 A3                 1145 	inc	dptr
   0233 93                 1146 	movc	a,@a+dptr
   0234 FD                 1147 	mov	r5,a
                           1148 ;	genCast
                           1149 ;	genCall
   0235 8C 82              1150 	mov	dpl,r4
   0237 C0 02              1151 	push	ar2
   0239 C0 03              1152 	push	ar3
   023B C0 04              1153 	push	ar4
   023D C0 05              1154 	push	ar5
   023F C0 06              1155 	push	ar6
   0241 C0 07              1156 	push	ar7
   0243 C0 00              1157 	push	ar0
   0245 C0 01              1158 	push	ar1
   0247 12s00r00           1159 	lcall	_lcddata_b2
   024A D0 01              1160 	pop	ar1
   024C D0 00              1161 	pop	ar0
   024E D0 07              1162 	pop	ar7
   0250 D0 06              1163 	pop	ar6
   0252 D0 05              1164 	pop	ar5
   0254 D0 04              1165 	pop	ar4
   0256 D0 03              1166 	pop	ar3
   0258 D0 02              1167 	pop	ar2
                           1168 ;	racing.c:102: for(i=0; i<8; i++)								
                           1169 ;	genPlus
                           1170 ;     genPlusIncr
   025A 08                 1171 	inc	r0
   025B B8 00 01           1172 	cjne	r0,#0x00,00291$
   025E 09                 1173 	inc	r1
   025F                    1174 00291$:
                           1175 ;	genIpop
   025F D0 05              1176 	pop	ar5
   0261 D0 04              1177 	pop	ar4
                           1178 ;	Peephole 112.b	changed ljmp to sjmp
   0263 80 B6              1179 	sjmp	00145$
   0265                    1180 00105$:
                           1181 ;	racing.c:109: if(code_byte==code_byte_BLOCK_2){								//If the current elcement is the second obstacle block 
                           1182 ;	genAssign
   0265 90s00r00           1183 	mov	dptr,#_glcdUpdate1_code_byte_1_1
   0268 E0                 1184 	movx	a,@dptr
   0269 F8                 1185 	mov	r0,a
   026A A3                 1186 	inc	dptr
   026B E0                 1187 	movx	a,@dptr
   026C F9                 1188 	mov	r1,a
                           1189 ;	genCmpEq
                           1190 ;	gencjneshort
   026D B8 DC 05           1191 	cjne	r0,#0xDC,00292$
   0270 B9 00 02           1192 	cjne	r1,#0x00,00292$
   0273 80 03              1193 	sjmp	00293$
   0275                    1194 00292$:
   0275 02s03r20           1195 	ljmp	00110$
   0278                    1196 00293$:
                           1197 ;	racing.c:110: if(x<8)
                           1198 ;	genCmpLt
                           1199 ;	genCmp
   0278 C3                 1200 	clr	c
   0279 EE                 1201 	mov	a,r6
   027A 94 08              1202 	subb	a,#0x08
   027C EF                 1203 	mov	a,r7
   027D 94 00              1204 	subb	a,#0x00
                           1205 ;	genIfxJump
                           1206 ;	Peephole 108.a	removed ljmp by inverse jump logic
   027F 50 51              1207 	jnc	00226$
                           1208 ;	Peephole 300	removed redundant label 00294$
                           1209 ;	racing.c:111: for(i=0; i<8; i++)
                           1210 ;	genAssign
   0281 78 00              1211 	mov	r0,#0x00
   0283 79 00              1212 	mov	r1,#0x00
   0285                    1213 00149$:
                           1214 ;	genCmpLt
                           1215 ;	genCmp
   0285 C3                 1216 	clr	c
   0286 E8                 1217 	mov	a,r0
   0287 94 08              1218 	subb	a,#0x08
   0289 E9                 1219 	mov	a,r1
   028A 94 00              1220 	subb	a,#0x00
                           1221 ;	genIfxJump
   028C 40 03              1222 	jc	00295$
   028E 02s03r20           1223 	ljmp	00110$
   0291                    1224 00295$:
                           1225 ;	racing.c:112: lcddata_b1(RACING_BITMAP[OFFSET_BLOCK+i]);			//Print the bitmap of the second obstacle block on the GLCD
                           1226 ;	genIpush
   0291 C0 04              1227 	push	ar4
   0293 C0 05              1228 	push	ar5
                           1229 ;	genCast
   0295 88 04              1230 	mov	ar4,r0
                           1231 ;	genLeftShift
                           1232 ;	genLeftShiftLiteral
                           1233 ;	genlshOne
   0297 EC                 1234 	mov	a,r4
                           1235 ;	Peephole 254	optimized left shift
   0298 2C                 1236 	add	a,r4
                           1237 ;	genPlus
                           1238 ;	Peephole 177.b	removed redundant mov
                           1239 ;	Peephole 181	changed mov to clr
                           1240 ;	genPointerGet
                           1241 ;	genCodePointerGet
                           1242 ;	Peephole 186.c	optimized movc sequence
                           1243 ;	Peephole 177.c	removed redundant move
   0299 FC                 1244 	mov	r4,a
   029A 90s00r00           1245 	mov	dptr,#_RACING_BITMAP
   029D 93                 1246 	movc	a,@a+dptr
   029E CC                 1247 	xch	a,r4
   029F A3                 1248 	inc	dptr
   02A0 93                 1249 	movc	a,@a+dptr
   02A1 FD                 1250 	mov	r5,a
                           1251 ;	genCast
                           1252 ;	genCall
   02A2 8C 82              1253 	mov	dpl,r4
   02A4 C0 02              1254 	push	ar2
   02A6 C0 03              1255 	push	ar3
   02A8 C0 04              1256 	push	ar4
   02AA C0 05              1257 	push	ar5
   02AC C0 06              1258 	push	ar6
   02AE C0 07              1259 	push	ar7
   02B0 C0 00              1260 	push	ar0
   02B2 C0 01              1261 	push	ar1
   02B4 12s00r00           1262 	lcall	_lcddata_b1
   02B7 D0 01              1263 	pop	ar1
   02B9 D0 00              1264 	pop	ar0
   02BB D0 07              1265 	pop	ar7
   02BD D0 06              1266 	pop	ar6
   02BF D0 05              1267 	pop	ar5
   02C1 D0 04              1268 	pop	ar4
   02C3 D0 03              1269 	pop	ar3
   02C5 D0 02              1270 	pop	ar2
                           1271 ;	racing.c:111: for(i=0; i<8; i++)
                           1272 ;	genPlus
                           1273 ;     genPlusIncr
   02C7 08                 1274 	inc	r0
   02C8 B8 00 01           1275 	cjne	r0,#0x00,00296$
   02CB 09                 1276 	inc	r1
   02CC                    1277 00296$:
                           1278 ;	genIpop
   02CC D0 05              1279 	pop	ar5
   02CE D0 04              1280 	pop	ar4
                           1281 ;	racing.c:115: for(i=0; i<8; i++)									
                           1282 ;	Peephole 112.b	changed ljmp to sjmp
   02D0 80 B3              1283 	sjmp	00149$
   02D2                    1284 00226$:
                           1285 ;	genAssign
   02D2 78 00              1286 	mov	r0,#0x00
   02D4 79 00              1287 	mov	r1,#0x00
   02D6                    1288 00153$:
                           1289 ;	genCmpLt
                           1290 ;	genCmp
   02D6 C3                 1291 	clr	c
   02D7 E8                 1292 	mov	a,r0
   02D8 94 08              1293 	subb	a,#0x08
   02DA E9                 1294 	mov	a,r1
   02DB 94 00              1295 	subb	a,#0x00
                           1296 ;	genIfxJump
                           1297 ;	Peephole 108.a	removed ljmp by inverse jump logic
   02DD 50 41              1298 	jnc	00110$
                           1299 ;	Peephole 300	removed redundant label 00297$
                           1300 ;	racing.c:117: lcddata_b2(RACING_BITMAP[OFFSET_BLOCK+i]);
                           1301 ;	genIpush
   02DF C0 04              1302 	push	ar4
   02E1 C0 05              1303 	push	ar5
                           1304 ;	genCast
   02E3 88 04              1305 	mov	ar4,r0
                           1306 ;	genLeftShift
                           1307 ;	genLeftShiftLiteral
                           1308 ;	genlshOne
   02E5 EC                 1309 	mov	a,r4
                           1310 ;	Peephole 254	optimized left shift
   02E6 2C                 1311 	add	a,r4
                           1312 ;	genPlus
                           1313 ;	Peephole 177.b	removed redundant mov
                           1314 ;	Peephole 181	changed mov to clr
                           1315 ;	genPointerGet
                           1316 ;	genCodePointerGet
                           1317 ;	Peephole 186.c	optimized movc sequence
                           1318 ;	Peephole 177.c	removed redundant move
   02E7 FC                 1319 	mov	r4,a
   02E8 90s00r00           1320 	mov	dptr,#_RACING_BITMAP
   02EB 93                 1321 	movc	a,@a+dptr
   02EC CC                 1322 	xch	a,r4
   02ED A3                 1323 	inc	dptr
   02EE 93                 1324 	movc	a,@a+dptr
   02EF FD                 1325 	mov	r5,a
                           1326 ;	genCast
                           1327 ;	genCall
   02F0 8C 82              1328 	mov	dpl,r4
   02F2 C0 02              1329 	push	ar2
   02F4 C0 03              1330 	push	ar3
   02F6 C0 04              1331 	push	ar4
   02F8 C0 05              1332 	push	ar5
   02FA C0 06              1333 	push	ar6
   02FC C0 07              1334 	push	ar7
   02FE C0 00              1335 	push	ar0
   0300 C0 01              1336 	push	ar1
   0302 12s00r00           1337 	lcall	_lcddata_b2
   0305 D0 01              1338 	pop	ar1
   0307 D0 00              1339 	pop	ar0
   0309 D0 07              1340 	pop	ar7
   030B D0 06              1341 	pop	ar6
   030D D0 05              1342 	pop	ar5
   030F D0 04              1343 	pop	ar4
   0311 D0 03              1344 	pop	ar3
   0313 D0 02              1345 	pop	ar2
                           1346 ;	racing.c:115: for(i=0; i<8; i++)									
                           1347 ;	genPlus
                           1348 ;     genPlusIncr
   0315 08                 1349 	inc	r0
   0316 B8 00 01           1350 	cjne	r0,#0x00,00298$
   0319 09                 1351 	inc	r1
   031A                    1352 00298$:
                           1353 ;	genIpop
   031A D0 05              1354 	pop	ar5
   031C D0 04              1355 	pop	ar4
                           1356 ;	Peephole 112.b	changed ljmp to sjmp
   031E 80 B6              1357 	sjmp	00153$
   0320                    1358 00110$:
                           1359 ;	racing.c:123: if(code_byte==code_byte_BLOCK_3){									//If the current elcement is the third obstacle block
                           1360 ;	genAssign
   0320 90s00r00           1361 	mov	dptr,#_glcdUpdate1_code_byte_1_1
   0323 E0                 1362 	movx	a,@dptr
   0324 F8                 1363 	mov	r0,a
   0325 A3                 1364 	inc	dptr
   0326 E0                 1365 	movx	a,@dptr
   0327 F9                 1366 	mov	r1,a
                           1367 ;	genCmpEq
                           1368 ;	gencjneshort
   0328 B8 DD 05           1369 	cjne	r0,#0xDD,00299$
   032B B9 00 02           1370 	cjne	r1,#0x00,00299$
   032E 80 03              1371 	sjmp	00300$
   0330                    1372 00299$:
   0330 02s03rDB           1373 	ljmp	00115$
   0333                    1374 00300$:
                           1375 ;	racing.c:124: if(x<8)
                           1376 ;	genCmpLt
                           1377 ;	genCmp
   0333 C3                 1378 	clr	c
   0334 EE                 1379 	mov	a,r6
   0335 94 08              1380 	subb	a,#0x08
   0337 EF                 1381 	mov	a,r7
   0338 94 00              1382 	subb	a,#0x00
                           1383 ;	genIfxJump
                           1384 ;	Peephole 108.a	removed ljmp by inverse jump logic
   033A 50 51              1385 	jnc	00232$
                           1386 ;	Peephole 300	removed redundant label 00301$
                           1387 ;	racing.c:125: for(i=0; i<8; i++)
                           1388 ;	genAssign
   033C 78 00              1389 	mov	r0,#0x00
   033E 79 00              1390 	mov	r1,#0x00
   0340                    1391 00157$:
                           1392 ;	genCmpLt
                           1393 ;	genCmp
   0340 C3                 1394 	clr	c
   0341 E8                 1395 	mov	a,r0
   0342 94 08              1396 	subb	a,#0x08
   0344 E9                 1397 	mov	a,r1
   0345 94 00              1398 	subb	a,#0x00
                           1399 ;	genIfxJump
   0347 40 03              1400 	jc	00302$
   0349 02s03rDB           1401 	ljmp	00115$
   034C                    1402 00302$:
                           1403 ;	racing.c:126: lcddata_b1(RACING_BITMAP[OFFSET_BLOCK+i]);				//Print the bitmap of the third obstacle block on the GLCD
                           1404 ;	genIpush
   034C C0 04              1405 	push	ar4
   034E C0 05              1406 	push	ar5
                           1407 ;	genCast
   0350 88 04              1408 	mov	ar4,r0
                           1409 ;	genLeftShift
                           1410 ;	genLeftShiftLiteral
                           1411 ;	genlshOne
   0352 EC                 1412 	mov	a,r4
                           1413 ;	Peephole 254	optimized left shift
   0353 2C                 1414 	add	a,r4
                           1415 ;	genPlus
                           1416 ;	Peephole 177.b	removed redundant mov
                           1417 ;	Peephole 181	changed mov to clr
                           1418 ;	genPointerGet
                           1419 ;	genCodePointerGet
                           1420 ;	Peephole 186.c	optimized movc sequence
                           1421 ;	Peephole 177.c	removed redundant move
   0354 FC                 1422 	mov	r4,a
   0355 90s00r00           1423 	mov	dptr,#_RACING_BITMAP
   0358 93                 1424 	movc	a,@a+dptr
   0359 CC                 1425 	xch	a,r4
   035A A3                 1426 	inc	dptr
   035B 93                 1427 	movc	a,@a+dptr
   035C FD                 1428 	mov	r5,a
                           1429 ;	genCast
                           1430 ;	genCall
   035D 8C 82              1431 	mov	dpl,r4
   035F C0 02              1432 	push	ar2
   0361 C0 03              1433 	push	ar3
   0363 C0 04              1434 	push	ar4
   0365 C0 05              1435 	push	ar5
   0367 C0 06              1436 	push	ar6
   0369 C0 07              1437 	push	ar7
   036B C0 00              1438 	push	ar0
   036D C0 01              1439 	push	ar1
   036F 12s00r00           1440 	lcall	_lcddata_b1
   0372 D0 01              1441 	pop	ar1
   0374 D0 00              1442 	pop	ar0
   0376 D0 07              1443 	pop	ar7
   0378 D0 06              1444 	pop	ar6
   037A D0 05              1445 	pop	ar5
   037C D0 04              1446 	pop	ar4
   037E D0 03              1447 	pop	ar3
   0380 D0 02              1448 	pop	ar2
                           1449 ;	racing.c:125: for(i=0; i<8; i++)
                           1450 ;	genPlus
                           1451 ;     genPlusIncr
   0382 08                 1452 	inc	r0
   0383 B8 00 01           1453 	cjne	r0,#0x00,00303$
   0386 09                 1454 	inc	r1
   0387                    1455 00303$:
                           1456 ;	genIpop
   0387 D0 05              1457 	pop	ar5
   0389 D0 04              1458 	pop	ar4
                           1459 ;	racing.c:129: for(i=0; i<8; i++)
                           1460 ;	Peephole 112.b	changed ljmp to sjmp
   038B 80 B3              1461 	sjmp	00157$
   038D                    1462 00232$:
                           1463 ;	genAssign
   038D 78 00              1464 	mov	r0,#0x00
   038F 79 00              1465 	mov	r1,#0x00
   0391                    1466 00161$:
                           1467 ;	genCmpLt
                           1468 ;	genCmp
   0391 C3                 1469 	clr	c
   0392 E8                 1470 	mov	a,r0
   0393 94 08              1471 	subb	a,#0x08
   0395 E9                 1472 	mov	a,r1
   0396 94 00              1473 	subb	a,#0x00
                           1474 ;	genIfxJump
                           1475 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0398 50 41              1476 	jnc	00115$
                           1477 ;	Peephole 300	removed redundant label 00304$
                           1478 ;	racing.c:131: lcddata_b2(RACING_BITMAP[OFFSET_BLOCK+i]);
                           1479 ;	genIpush
   039A C0 04              1480 	push	ar4
   039C C0 05              1481 	push	ar5
                           1482 ;	genCast
   039E 88 04              1483 	mov	ar4,r0
                           1484 ;	genLeftShift
                           1485 ;	genLeftShiftLiteral
                           1486 ;	genlshOne
   03A0 EC                 1487 	mov	a,r4
                           1488 ;	Peephole 254	optimized left shift
   03A1 2C                 1489 	add	a,r4
                           1490 ;	genPlus
                           1491 ;	Peephole 177.b	removed redundant mov
                           1492 ;	Peephole 181	changed mov to clr
                           1493 ;	genPointerGet
                           1494 ;	genCodePointerGet
                           1495 ;	Peephole 186.c	optimized movc sequence
                           1496 ;	Peephole 177.c	removed redundant move
   03A2 FC                 1497 	mov	r4,a
   03A3 90s00r00           1498 	mov	dptr,#_RACING_BITMAP
   03A6 93                 1499 	movc	a,@a+dptr
   03A7 CC                 1500 	xch	a,r4
   03A8 A3                 1501 	inc	dptr
   03A9 93                 1502 	movc	a,@a+dptr
   03AA FD                 1503 	mov	r5,a
                           1504 ;	genCast
                           1505 ;	genCall
   03AB 8C 82              1506 	mov	dpl,r4
   03AD C0 02              1507 	push	ar2
   03AF C0 03              1508 	push	ar3
   03B1 C0 04              1509 	push	ar4
   03B3 C0 05              1510 	push	ar5
   03B5 C0 06              1511 	push	ar6
   03B7 C0 07              1512 	push	ar7
   03B9 C0 00              1513 	push	ar0
   03BB C0 01              1514 	push	ar1
   03BD 12s00r00           1515 	lcall	_lcddata_b2
   03C0 D0 01              1516 	pop	ar1
   03C2 D0 00              1517 	pop	ar0
   03C4 D0 07              1518 	pop	ar7
   03C6 D0 06              1519 	pop	ar6
   03C8 D0 05              1520 	pop	ar5
   03CA D0 04              1521 	pop	ar4
   03CC D0 03              1522 	pop	ar3
   03CE D0 02              1523 	pop	ar2
                           1524 ;	racing.c:129: for(i=0; i<8; i++)
                           1525 ;	genPlus
                           1526 ;     genPlusIncr
   03D0 08                 1527 	inc	r0
   03D1 B8 00 01           1528 	cjne	r0,#0x00,00305$
   03D4 09                 1529 	inc	r1
   03D5                    1530 00305$:
                           1531 ;	genIpop
   03D5 D0 05              1532 	pop	ar5
   03D7 D0 04              1533 	pop	ar4
                           1534 ;	Peephole 112.b	changed ljmp to sjmp
   03D9 80 B6              1535 	sjmp	00161$
   03DB                    1536 00115$:
                           1537 ;	racing.c:137: if(code_byte==code_byte_EMPTY) {								//If the current element is an Empty location
                           1538 ;	genAssign
   03DB 90s00r00           1539 	mov	dptr,#_glcdUpdate1_code_byte_1_1
   03DE E0                 1540 	movx	a,@dptr
   03DF F8                 1541 	mov	r0,a
   03E0 A3                 1542 	inc	dptr
   03E1 E0                 1543 	movx	a,@dptr
                           1544 ;	genIfx
   03E2 F9                 1545 	mov	r1,a
                           1546 ;	Peephole 135	removed redundant mov
   03E3 48                 1547 	orl	a,r0
                           1548 ;	genIfxJump
                           1549 ;	Peephole 108.b	removed ljmp by inverse jump logic
   03E4 70 71              1550 	jnz	00120$
                           1551 ;	Peephole 300	removed redundant label 00306$
                           1552 ;	racing.c:138: if(x<8)
                           1553 ;	genCmpLt
                           1554 ;	genCmp
   03E6 C3                 1555 	clr	c
   03E7 EE                 1556 	mov	a,r6
   03E8 94 08              1557 	subb	a,#0x08
   03EA EF                 1558 	mov	a,r7
   03EB 94 00              1559 	subb	a,#0x00
                           1560 ;	genIfxJump
                           1561 ;	Peephole 108.a	removed ljmp by inverse jump logic
   03ED 50 35              1562 	jnc	00237$
                           1563 ;	Peephole 300	removed redundant label 00307$
                           1564 ;	racing.c:139: for(i=0; i<8; i++)
                           1565 ;	genAssign
   03EF 78 08              1566 	mov	r0,#0x08
   03F1 79 00              1567 	mov	r1,#0x00
   03F3                    1568 00167$:
                           1569 ;	racing.c:140: lcddata_b1(0x00);										//Print 0x00 to the graphics lcd at that location
                           1570 ;	genCall
   03F3 75 82 00           1571 	mov	dpl,#0x00
   03F6 C0 02              1572 	push	ar2
   03F8 C0 03              1573 	push	ar3
   03FA C0 04              1574 	push	ar4
   03FC C0 05              1575 	push	ar5
   03FE C0 06              1576 	push	ar6
   0400 C0 07              1577 	push	ar7
   0402 C0 00              1578 	push	ar0
   0404 C0 01              1579 	push	ar1
   0406 12s00r00           1580 	lcall	_lcddata_b1
   0409 D0 01              1581 	pop	ar1
   040B D0 00              1582 	pop	ar0
   040D D0 07              1583 	pop	ar7
   040F D0 06              1584 	pop	ar6
   0411 D0 05              1585 	pop	ar5
   0413 D0 04              1586 	pop	ar4
   0415 D0 03              1587 	pop	ar3
   0417 D0 02              1588 	pop	ar2
                           1589 ;	genMinus
                           1590 ;	genMinusDec
   0419 18                 1591 	dec	r0
   041A B8 FF 01           1592 	cjne	r0,#0xff,00308$
   041D 19                 1593 	dec	r1
   041E                    1594 00308$:
                           1595 ;	racing.c:139: for(i=0; i<8; i++)
                           1596 ;	genIfx
   041E E8                 1597 	mov	a,r0
   041F 49                 1598 	orl	a,r1
                           1599 ;	genIfxJump
                           1600 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0420 70 D1              1601 	jnz	00167$
                           1602 ;	Peephole 300	removed redundant label 00309$
                           1603 ;	racing.c:142: for(i=0; i<8; i++)
                           1604 ;	Peephole 112.b	changed ljmp to sjmp
   0422 80 33              1605 	sjmp	00120$
   0424                    1606 00237$:
                           1607 ;	genAssign
   0424 78 08              1608 	mov	r0,#0x08
   0426 79 00              1609 	mov	r1,#0x00
   0428                    1610 00170$:
                           1611 ;	racing.c:143: lcddata_b2(0x00);
                           1612 ;	genCall
   0428 75 82 00           1613 	mov	dpl,#0x00
   042B C0 02              1614 	push	ar2
   042D C0 03              1615 	push	ar3
   042F C0 04              1616 	push	ar4
   0431 C0 05              1617 	push	ar5
   0433 C0 06              1618 	push	ar6
   0435 C0 07              1619 	push	ar7
   0437 C0 00              1620 	push	ar0
   0439 C0 01              1621 	push	ar1
   043B 12s00r00           1622 	lcall	_lcddata_b2
   043E D0 01              1623 	pop	ar1
   0440 D0 00              1624 	pop	ar0
   0442 D0 07              1625 	pop	ar7
   0444 D0 06              1626 	pop	ar6
   0446 D0 05              1627 	pop	ar5
   0448 D0 04              1628 	pop	ar4
   044A D0 03              1629 	pop	ar3
   044C D0 02              1630 	pop	ar2
                           1631 ;	genMinus
                           1632 ;	genMinusDec
   044E 18                 1633 	dec	r0
   044F B8 FF 01           1634 	cjne	r0,#0xff,00310$
   0452 19                 1635 	dec	r1
   0453                    1636 00310$:
                           1637 ;	racing.c:142: for(i=0; i<8; i++)
                           1638 ;	genIfx
   0453 E8                 1639 	mov	a,r0
   0454 49                 1640 	orl	a,r1
                           1641 ;	genIfxJump
                           1642 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0455 70 D1              1643 	jnz	00170$
                           1644 ;	Peephole 300	removed redundant label 00311$
   0457                    1645 00120$:
                           1646 ;	racing.c:146: if(code_byte==code_byte_CAR) {									//If the current block is the players car
                           1647 ;	genAssign
   0457 90s00r00           1648 	mov	dptr,#_glcdUpdate1_code_byte_1_1
   045A E0                 1649 	movx	a,@dptr
   045B F8                 1650 	mov	r0,a
   045C A3                 1651 	inc	dptr
   045D E0                 1652 	movx	a,@dptr
   045E F9                 1653 	mov	r1,a
                           1654 ;	genCmpEq
                           1655 ;	gencjneshort
   045F B8 4C 05           1656 	cjne	r0,#0x4C,00312$
   0462 B9 00 02           1657 	cjne	r1,#0x00,00312$
   0465 80 03              1658 	sjmp	00313$
   0467                    1659 00312$:
   0467 02s05r18           1660 	ljmp	00125$
   046A                    1661 00313$:
                           1662 ;	racing.c:147: if(x<8)
                           1663 ;	genCmpLt
                           1664 ;	genCmp
   046A C3                 1665 	clr	c
   046B EE                 1666 	mov	a,r6
   046C 94 08              1667 	subb	a,#0x08
   046E EF                 1668 	mov	a,r7
   046F 94 00              1669 	subb	a,#0x00
                           1670 ;	genIfxJump
                           1671 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0471 50 54              1672 	jnc	00244$
                           1673 ;	Peephole 300	removed redundant label 00314$
                           1674 ;	racing.c:148: for(i=0; i<8; i++)
                           1675 ;	genAssign
   0473 78 00              1676 	mov	r0,#0x00
   0475 79 00              1677 	mov	r1,#0x00
   0477                    1678 00171$:
                           1679 ;	genCmpLt
                           1680 ;	genCmp
   0477 C3                 1681 	clr	c
   0478 E8                 1682 	mov	a,r0
   0479 94 08              1683 	subb	a,#0x08
   047B E9                 1684 	mov	a,r1
   047C 94 00              1685 	subb	a,#0x00
                           1686 ;	genIfxJump
   047E 40 03              1687 	jc	00315$
   0480 02s05r18           1688 	ljmp	00125$
   0483                    1689 00315$:
                           1690 ;	racing.c:149: lcddata_b1(RACING_BITMAP[OFFSET_CAR+i]);				//Print the bitmap for the car
                           1691 ;	genIpush
   0483 C0 04              1692 	push	ar4
   0485 C0 05              1693 	push	ar5
                           1694 ;	genCast
   0487 88 04              1695 	mov	ar4,r0
                           1696 ;	genPlus
                           1697 ;     genPlusIncr
   0489 74 08              1698 	mov	a,#0x08
                           1699 ;	Peephole 236.a	used r4 instead of ar4
   048B 2C                 1700 	add	a,r4
                           1701 ;	genLeftShift
                           1702 ;	genLeftShiftLiteral
                           1703 ;	genlshOne
                           1704 ;	Peephole 105	removed redundant mov
                           1705 ;	genPlus
                           1706 ;	Peephole 204	removed redundant mov
   048C 25 E0              1707 	add	a,acc
                           1708 ;	Peephole 177.b	removed redundant mov
                           1709 ;	Peephole 181	changed mov to clr
                           1710 ;	genPointerGet
                           1711 ;	genCodePointerGet
                           1712 ;	Peephole 186.c	optimized movc sequence
                           1713 ;	Peephole 177.c	removed redundant move
   048E FC                 1714 	mov	r4,a
   048F 90s00r00           1715 	mov	dptr,#_RACING_BITMAP
   0492 93                 1716 	movc	a,@a+dptr
   0493 CC                 1717 	xch	a,r4
   0494 A3                 1718 	inc	dptr
   0495 93                 1719 	movc	a,@a+dptr
   0496 FD                 1720 	mov	r5,a
                           1721 ;	genCast
                           1722 ;	genCall
   0497 8C 82              1723 	mov	dpl,r4
   0499 C0 02              1724 	push	ar2
   049B C0 03              1725 	push	ar3
   049D C0 04              1726 	push	ar4
   049F C0 05              1727 	push	ar5
   04A1 C0 06              1728 	push	ar6
   04A3 C0 07              1729 	push	ar7
   04A5 C0 00              1730 	push	ar0
   04A7 C0 01              1731 	push	ar1
   04A9 12s00r00           1732 	lcall	_lcddata_b1
   04AC D0 01              1733 	pop	ar1
   04AE D0 00              1734 	pop	ar0
   04B0 D0 07              1735 	pop	ar7
   04B2 D0 06              1736 	pop	ar6
   04B4 D0 05              1737 	pop	ar5
   04B6 D0 04              1738 	pop	ar4
   04B8 D0 03              1739 	pop	ar3
   04BA D0 02              1740 	pop	ar2
                           1741 ;	racing.c:148: for(i=0; i<8; i++)
                           1742 ;	genPlus
                           1743 ;     genPlusIncr
   04BC 08                 1744 	inc	r0
   04BD B8 00 01           1745 	cjne	r0,#0x00,00316$
   04C0 09                 1746 	inc	r1
   04C1                    1747 00316$:
                           1748 ;	genIpop
   04C1 D0 05              1749 	pop	ar5
   04C3 D0 04              1750 	pop	ar4
                           1751 ;	racing.c:151: for(i=0; i<8; i++)
                           1752 ;	Peephole 112.b	changed ljmp to sjmp
   04C5 80 B0              1753 	sjmp	00171$
   04C7                    1754 00244$:
                           1755 ;	genAssign
   04C7 78 00              1756 	mov	r0,#0x00
   04C9 79 00              1757 	mov	r1,#0x00
   04CB                    1758 00175$:
                           1759 ;	genCmpLt
                           1760 ;	genCmp
   04CB C3                 1761 	clr	c
   04CC E8                 1762 	mov	a,r0
   04CD 94 08              1763 	subb	a,#0x08
   04CF E9                 1764 	mov	a,r1
   04D0 94 00              1765 	subb	a,#0x00
                           1766 ;	genIfxJump
                           1767 ;	Peephole 108.a	removed ljmp by inverse jump logic
   04D2 50 44              1768 	jnc	00125$
                           1769 ;	Peephole 300	removed redundant label 00317$
                           1770 ;	racing.c:152: lcddata_b2(RACING_BITMAP[OFFSET_CAR+i]);
                           1771 ;	genIpush
   04D4 C0 04              1772 	push	ar4
   04D6 C0 05              1773 	push	ar5
                           1774 ;	genCast
   04D8 88 04              1775 	mov	ar4,r0
                           1776 ;	genPlus
                           1777 ;     genPlusIncr
   04DA 74 08              1778 	mov	a,#0x08
                           1779 ;	Peephole 236.a	used r4 instead of ar4
   04DC 2C                 1780 	add	a,r4
                           1781 ;	genLeftShift
                           1782 ;	genLeftShiftLiteral
                           1783 ;	genlshOne
                           1784 ;	Peephole 105	removed redundant mov
                           1785 ;	genPlus
                           1786 ;	Peephole 204	removed redundant mov
   04DD 25 E0              1787 	add	a,acc
                           1788 ;	Peephole 177.b	removed redundant mov
                           1789 ;	Peephole 181	changed mov to clr
                           1790 ;	genPointerGet
                           1791 ;	genCodePointerGet
                           1792 ;	Peephole 186.c	optimized movc sequence
                           1793 ;	Peephole 177.c	removed redundant move
   04DF FC                 1794 	mov	r4,a
   04E0 90s00r00           1795 	mov	dptr,#_RACING_BITMAP
   04E3 93                 1796 	movc	a,@a+dptr
   04E4 CC                 1797 	xch	a,r4
   04E5 A3                 1798 	inc	dptr
   04E6 93                 1799 	movc	a,@a+dptr
   04E7 FD                 1800 	mov	r5,a
                           1801 ;	genCast
                           1802 ;	genCall
   04E8 8C 82              1803 	mov	dpl,r4
   04EA C0 02              1804 	push	ar2
   04EC C0 03              1805 	push	ar3
   04EE C0 04              1806 	push	ar4
   04F0 C0 05              1807 	push	ar5
   04F2 C0 06              1808 	push	ar6
   04F4 C0 07              1809 	push	ar7
   04F6 C0 00              1810 	push	ar0
   04F8 C0 01              1811 	push	ar1
   04FA 12s00r00           1812 	lcall	_lcddata_b2
   04FD D0 01              1813 	pop	ar1
   04FF D0 00              1814 	pop	ar0
   0501 D0 07              1815 	pop	ar7
   0503 D0 06              1816 	pop	ar6
   0505 D0 05              1817 	pop	ar5
   0507 D0 04              1818 	pop	ar4
   0509 D0 03              1819 	pop	ar3
   050B D0 02              1820 	pop	ar2
                           1821 ;	racing.c:151: for(i=0; i<8; i++)
                           1822 ;	genPlus
                           1823 ;     genPlusIncr
   050D 08                 1824 	inc	r0
   050E B8 00 01           1825 	cjne	r0,#0x00,00318$
   0511 09                 1826 	inc	r1
   0512                    1827 00318$:
                           1828 ;	genIpop
   0512 D0 05              1829 	pop	ar5
   0514 D0 04              1830 	pop	ar4
                           1831 ;	Peephole 112.b	changed ljmp to sjmp
   0516 80 B3              1832 	sjmp	00175$
   0518                    1833 00125$:
                           1834 ;	racing.c:155: if(code_byte==code_byte_ROAD) {								//If the bitmap is the road borders
                           1835 ;	genAssign
   0518 90s00r00           1836 	mov	dptr,#_glcdUpdate1_code_byte_1_1
   051B E0                 1837 	movx	a,@dptr
   051C F8                 1838 	mov	r0,a
   051D A3                 1839 	inc	dptr
   051E E0                 1840 	movx	a,@dptr
   051F F9                 1841 	mov	r1,a
                           1842 ;	genCmpEq
                           1843 ;	gencjneshort
   0520 B8 67 05           1844 	cjne	r0,#0x67,00319$
   0523 B9 00 02           1845 	cjne	r1,#0x00,00319$
   0526 80 03              1846 	sjmp	00320$
   0528                    1847 00319$:
   0528 02s05rD9           1848 	ljmp	00130$
   052B                    1849 00320$:
                           1850 ;	racing.c:156: if(x<8)
                           1851 ;	genCmpLt
                           1852 ;	genCmp
   052B C3                 1853 	clr	c
   052C EE                 1854 	mov	a,r6
   052D 94 08              1855 	subb	a,#0x08
   052F EF                 1856 	mov	a,r7
   0530 94 00              1857 	subb	a,#0x00
                           1858 ;	genIfxJump
                           1859 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0532 50 54              1860 	jnc	00250$
                           1861 ;	Peephole 300	removed redundant label 00321$
                           1862 ;	racing.c:157: for(i=0; i<8; i++)
                           1863 ;	genAssign
   0534 78 00              1864 	mov	r0,#0x00
   0536 79 00              1865 	mov	r1,#0x00
   0538                    1866 00179$:
                           1867 ;	genCmpLt
                           1868 ;	genCmp
   0538 C3                 1869 	clr	c
   0539 E8                 1870 	mov	a,r0
   053A 94 08              1871 	subb	a,#0x08
   053C E9                 1872 	mov	a,r1
   053D 94 00              1873 	subb	a,#0x00
                           1874 ;	genIfxJump
   053F 40 03              1875 	jc	00322$
   0541 02s05rD9           1876 	ljmp	00130$
   0544                    1877 00322$:
                           1878 ;	racing.c:158: lcddata_b1(RACING_BITMAP[OFFSET_ROAD_BORDERS+i]);		//print the bitmap for the roads
                           1879 ;	genIpush
   0544 C0 04              1880 	push	ar4
   0546 C0 05              1881 	push	ar5
                           1882 ;	genCast
   0548 88 04              1883 	mov	ar4,r0
                           1884 ;	genPlus
                           1885 ;     genPlusIncr
   054A 74 20              1886 	mov	a,#0x20
                           1887 ;	Peephole 236.a	used r4 instead of ar4
   054C 2C                 1888 	add	a,r4
                           1889 ;	genLeftShift
                           1890 ;	genLeftShiftLiteral
                           1891 ;	genlshOne
                           1892 ;	Peephole 105	removed redundant mov
                           1893 ;	genPlus
                           1894 ;	Peephole 204	removed redundant mov
   054D 25 E0              1895 	add	a,acc
                           1896 ;	Peephole 177.b	removed redundant mov
                           1897 ;	Peephole 181	changed mov to clr
                           1898 ;	genPointerGet
                           1899 ;	genCodePointerGet
                           1900 ;	Peephole 186.c	optimized movc sequence
                           1901 ;	Peephole 177.c	removed redundant move
   054F FC                 1902 	mov	r4,a
   0550 90s00r00           1903 	mov	dptr,#_RACING_BITMAP
   0553 93                 1904 	movc	a,@a+dptr
   0554 CC                 1905 	xch	a,r4
   0555 A3                 1906 	inc	dptr
   0556 93                 1907 	movc	a,@a+dptr
   0557 FD                 1908 	mov	r5,a
                           1909 ;	genCast
                           1910 ;	genCall
   0558 8C 82              1911 	mov	dpl,r4
   055A C0 02              1912 	push	ar2
   055C C0 03              1913 	push	ar3
   055E C0 04              1914 	push	ar4
   0560 C0 05              1915 	push	ar5
   0562 C0 06              1916 	push	ar6
   0564 C0 07              1917 	push	ar7
   0566 C0 00              1918 	push	ar0
   0568 C0 01              1919 	push	ar1
   056A 12s00r00           1920 	lcall	_lcddata_b1
   056D D0 01              1921 	pop	ar1
   056F D0 00              1922 	pop	ar0
   0571 D0 07              1923 	pop	ar7
   0573 D0 06              1924 	pop	ar6
   0575 D0 05              1925 	pop	ar5
   0577 D0 04              1926 	pop	ar4
   0579 D0 03              1927 	pop	ar3
   057B D0 02              1928 	pop	ar2
                           1929 ;	racing.c:157: for(i=0; i<8; i++)
                           1930 ;	genPlus
                           1931 ;     genPlusIncr
   057D 08                 1932 	inc	r0
   057E B8 00 01           1933 	cjne	r0,#0x00,00323$
   0581 09                 1934 	inc	r1
   0582                    1935 00323$:
                           1936 ;	genIpop
   0582 D0 05              1937 	pop	ar5
   0584 D0 04              1938 	pop	ar4
                           1939 ;	racing.c:160: for(i=0; i<8; i++)
                           1940 ;	Peephole 112.b	changed ljmp to sjmp
   0586 80 B0              1941 	sjmp	00179$
   0588                    1942 00250$:
                           1943 ;	genAssign
   0588 78 00              1944 	mov	r0,#0x00
   058A 79 00              1945 	mov	r1,#0x00
   058C                    1946 00183$:
                           1947 ;	genCmpLt
                           1948 ;	genCmp
   058C C3                 1949 	clr	c
   058D E8                 1950 	mov	a,r0
   058E 94 08              1951 	subb	a,#0x08
   0590 E9                 1952 	mov	a,r1
   0591 94 00              1953 	subb	a,#0x00
                           1954 ;	genIfxJump
                           1955 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0593 50 44              1956 	jnc	00130$
                           1957 ;	Peephole 300	removed redundant label 00324$
                           1958 ;	racing.c:161: lcddata_b2(RACING_BITMAP[OFFSET_ROAD_BORDERS+i]);
                           1959 ;	genIpush
   0595 C0 04              1960 	push	ar4
   0597 C0 05              1961 	push	ar5
                           1962 ;	genCast
   0599 88 04              1963 	mov	ar4,r0
                           1964 ;	genPlus
                           1965 ;     genPlusIncr
   059B 74 20              1966 	mov	a,#0x20
                           1967 ;	Peephole 236.a	used r4 instead of ar4
   059D 2C                 1968 	add	a,r4
                           1969 ;	genLeftShift
                           1970 ;	genLeftShiftLiteral
                           1971 ;	genlshOne
                           1972 ;	Peephole 105	removed redundant mov
                           1973 ;	genPlus
                           1974 ;	Peephole 204	removed redundant mov
   059E 25 E0              1975 	add	a,acc
                           1976 ;	Peephole 177.b	removed redundant mov
                           1977 ;	Peephole 181	changed mov to clr
                           1978 ;	genPointerGet
                           1979 ;	genCodePointerGet
                           1980 ;	Peephole 186.c	optimized movc sequence
                           1981 ;	Peephole 177.c	removed redundant move
   05A0 FC                 1982 	mov	r4,a
   05A1 90s00r00           1983 	mov	dptr,#_RACING_BITMAP
   05A4 93                 1984 	movc	a,@a+dptr
   05A5 CC                 1985 	xch	a,r4
   05A6 A3                 1986 	inc	dptr
   05A7 93                 1987 	movc	a,@a+dptr
   05A8 FD                 1988 	mov	r5,a
                           1989 ;	genCast
                           1990 ;	genCall
   05A9 8C 82              1991 	mov	dpl,r4
   05AB C0 02              1992 	push	ar2
   05AD C0 03              1993 	push	ar3
   05AF C0 04              1994 	push	ar4
   05B1 C0 05              1995 	push	ar5
   05B3 C0 06              1996 	push	ar6
   05B5 C0 07              1997 	push	ar7
   05B7 C0 00              1998 	push	ar0
   05B9 C0 01              1999 	push	ar1
   05BB 12s00r00           2000 	lcall	_lcddata_b2
   05BE D0 01              2001 	pop	ar1
   05C0 D0 00              2002 	pop	ar0
   05C2 D0 07              2003 	pop	ar7
   05C4 D0 06              2004 	pop	ar6
   05C6 D0 05              2005 	pop	ar5
   05C8 D0 04              2006 	pop	ar4
   05CA D0 03              2007 	pop	ar3
   05CC D0 02              2008 	pop	ar2
                           2009 ;	racing.c:160: for(i=0; i<8; i++)
                           2010 ;	genPlus
                           2011 ;     genPlusIncr
   05CE 08                 2012 	inc	r0
   05CF B8 00 01           2013 	cjne	r0,#0x00,00325$
   05D2 09                 2014 	inc	r1
   05D3                    2015 00325$:
                           2016 ;	genIpop
   05D3 D0 05              2017 	pop	ar5
   05D5 D0 04              2018 	pop	ar4
                           2019 ;	Peephole 112.b	changed ljmp to sjmp
   05D7 80 B3              2020 	sjmp	00183$
   05D9                    2021 00130$:
                           2022 ;	racing.c:164: if(code_byte==code_byte_ROAD_DIVIDER) {						//If the current element is a road divider
                           2023 ;	genAssign
   05D9 90s00r00           2024 	mov	dptr,#_glcdUpdate1_code_byte_1_1
   05DC E0                 2025 	movx	a,@dptr
   05DD F8                 2026 	mov	r0,a
   05DE A3                 2027 	inc	dptr
   05DF E0                 2028 	movx	a,@dptr
   05E0 F9                 2029 	mov	r1,a
                           2030 ;	genCmpEq
                           2031 ;	gencjneshort
   05E1 B8 68 05           2032 	cjne	r0,#0x68,00326$
   05E4 B9 00 02           2033 	cjne	r1,#0x00,00326$
   05E7 80 03              2034 	sjmp	00327$
   05E9                    2035 00326$:
   05E9 02s06r9A           2036 	ljmp	00135$
   05EC                    2037 00327$:
                           2038 ;	racing.c:165: if(x<8)
                           2039 ;	genCmpLt
                           2040 ;	genCmp
   05EC C3                 2041 	clr	c
   05ED EE                 2042 	mov	a,r6
   05EE 94 08              2043 	subb	a,#0x08
   05F0 EF                 2044 	mov	a,r7
   05F1 94 00              2045 	subb	a,#0x00
                           2046 ;	genIfxJump
                           2047 ;	Peephole 108.a	removed ljmp by inverse jump logic
   05F3 50 54              2048 	jnc	00256$
                           2049 ;	Peephole 300	removed redundant label 00328$
                           2050 ;	racing.c:166: for(i=0; i<8; i++)
                           2051 ;	genAssign
   05F5 78 00              2052 	mov	r0,#0x00
   05F7 79 00              2053 	mov	r1,#0x00
   05F9                    2054 00187$:
                           2055 ;	genCmpLt
                           2056 ;	genCmp
   05F9 C3                 2057 	clr	c
   05FA E8                 2058 	mov	a,r0
   05FB 94 08              2059 	subb	a,#0x08
   05FD E9                 2060 	mov	a,r1
   05FE 94 00              2061 	subb	a,#0x00
                           2062 ;	genIfxJump
   0600 40 03              2063 	jc	00329$
   0602 02s06r9A           2064 	ljmp	00135$
   0605                    2065 00329$:
                           2066 ;	racing.c:167: lcddata_b1(RACING_BITMAP[OFFSET_ROAD_DIVIDER+i]);		//Print the first road divider
                           2067 ;	genIpush
   0605 C0 04              2068 	push	ar4
   0607 C0 05              2069 	push	ar5
                           2070 ;	genCast
   0609 88 04              2071 	mov	ar4,r0
                           2072 ;	genPlus
                           2073 ;     genPlusIncr
   060B 74 10              2074 	mov	a,#0x10
                           2075 ;	Peephole 236.a	used r4 instead of ar4
   060D 2C                 2076 	add	a,r4
                           2077 ;	genLeftShift
                           2078 ;	genLeftShiftLiteral
                           2079 ;	genlshOne
                           2080 ;	Peephole 105	removed redundant mov
                           2081 ;	genPlus
                           2082 ;	Peephole 204	removed redundant mov
   060E 25 E0              2083 	add	a,acc
                           2084 ;	Peephole 177.b	removed redundant mov
                           2085 ;	Peephole 181	changed mov to clr
                           2086 ;	genPointerGet
                           2087 ;	genCodePointerGet
                           2088 ;	Peephole 186.c	optimized movc sequence
                           2089 ;	Peephole 177.c	removed redundant move
   0610 FC                 2090 	mov	r4,a
   0611 90s00r00           2091 	mov	dptr,#_RACING_BITMAP
   0614 93                 2092 	movc	a,@a+dptr
   0615 CC                 2093 	xch	a,r4
   0616 A3                 2094 	inc	dptr
   0617 93                 2095 	movc	a,@a+dptr
   0618 FD                 2096 	mov	r5,a
                           2097 ;	genCast
                           2098 ;	genCall
   0619 8C 82              2099 	mov	dpl,r4
   061B C0 02              2100 	push	ar2
   061D C0 03              2101 	push	ar3
   061F C0 04              2102 	push	ar4
   0621 C0 05              2103 	push	ar5
   0623 C0 06              2104 	push	ar6
   0625 C0 07              2105 	push	ar7
   0627 C0 00              2106 	push	ar0
   0629 C0 01              2107 	push	ar1
   062B 12s00r00           2108 	lcall	_lcddata_b1
   062E D0 01              2109 	pop	ar1
   0630 D0 00              2110 	pop	ar0
   0632 D0 07              2111 	pop	ar7
   0634 D0 06              2112 	pop	ar6
   0636 D0 05              2113 	pop	ar5
   0638 D0 04              2114 	pop	ar4
   063A D0 03              2115 	pop	ar3
   063C D0 02              2116 	pop	ar2
                           2117 ;	racing.c:166: for(i=0; i<8; i++)
                           2118 ;	genPlus
                           2119 ;     genPlusIncr
   063E 08                 2120 	inc	r0
   063F B8 00 01           2121 	cjne	r0,#0x00,00330$
   0642 09                 2122 	inc	r1
   0643                    2123 00330$:
                           2124 ;	genIpop
   0643 D0 05              2125 	pop	ar5
   0645 D0 04              2126 	pop	ar4
                           2127 ;	racing.c:169: for(i=0; i<8; i++)
                           2128 ;	Peephole 112.b	changed ljmp to sjmp
   0647 80 B0              2129 	sjmp	00187$
   0649                    2130 00256$:
                           2131 ;	genAssign
   0649 78 00              2132 	mov	r0,#0x00
   064B 79 00              2133 	mov	r1,#0x00
   064D                    2134 00191$:
                           2135 ;	genCmpLt
                           2136 ;	genCmp
   064D C3                 2137 	clr	c
   064E E8                 2138 	mov	a,r0
   064F 94 08              2139 	subb	a,#0x08
   0651 E9                 2140 	mov	a,r1
   0652 94 00              2141 	subb	a,#0x00
                           2142 ;	genIfxJump
                           2143 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0654 50 44              2144 	jnc	00135$
                           2145 ;	Peephole 300	removed redundant label 00331$
                           2146 ;	racing.c:170: lcddata_b2(RACING_BITMAP[OFFSET_ROAD_DIVIDER+i]);
                           2147 ;	genIpush
   0656 C0 04              2148 	push	ar4
   0658 C0 05              2149 	push	ar5
                           2150 ;	genCast
   065A 88 04              2151 	mov	ar4,r0
                           2152 ;	genPlus
                           2153 ;     genPlusIncr
   065C 74 10              2154 	mov	a,#0x10
                           2155 ;	Peephole 236.a	used r4 instead of ar4
   065E 2C                 2156 	add	a,r4
                           2157 ;	genLeftShift
                           2158 ;	genLeftShiftLiteral
                           2159 ;	genlshOne
                           2160 ;	Peephole 105	removed redundant mov
                           2161 ;	genPlus
                           2162 ;	Peephole 204	removed redundant mov
   065F 25 E0              2163 	add	a,acc
                           2164 ;	Peephole 177.b	removed redundant mov
                           2165 ;	Peephole 181	changed mov to clr
                           2166 ;	genPointerGet
                           2167 ;	genCodePointerGet
                           2168 ;	Peephole 186.c	optimized movc sequence
                           2169 ;	Peephole 177.c	removed redundant move
   0661 FC                 2170 	mov	r4,a
   0662 90s00r00           2171 	mov	dptr,#_RACING_BITMAP
   0665 93                 2172 	movc	a,@a+dptr
   0666 CC                 2173 	xch	a,r4
   0667 A3                 2174 	inc	dptr
   0668 93                 2175 	movc	a,@a+dptr
   0669 FD                 2176 	mov	r5,a
                           2177 ;	genCast
                           2178 ;	genCall
   066A 8C 82              2179 	mov	dpl,r4
   066C C0 02              2180 	push	ar2
   066E C0 03              2181 	push	ar3
   0670 C0 04              2182 	push	ar4
   0672 C0 05              2183 	push	ar5
   0674 C0 06              2184 	push	ar6
   0676 C0 07              2185 	push	ar7
   0678 C0 00              2186 	push	ar0
   067A C0 01              2187 	push	ar1
   067C 12s00r00           2188 	lcall	_lcddata_b2
   067F D0 01              2189 	pop	ar1
   0681 D0 00              2190 	pop	ar0
   0683 D0 07              2191 	pop	ar7
   0685 D0 06              2192 	pop	ar6
   0687 D0 05              2193 	pop	ar5
   0689 D0 04              2194 	pop	ar4
   068B D0 03              2195 	pop	ar3
   068D D0 02              2196 	pop	ar2
                           2197 ;	racing.c:169: for(i=0; i<8; i++)
                           2198 ;	genPlus
                           2199 ;     genPlusIncr
   068F 08                 2200 	inc	r0
   0690 B8 00 01           2201 	cjne	r0,#0x00,00332$
   0693 09                 2202 	inc	r1
   0694                    2203 00332$:
                           2204 ;	genIpop
   0694 D0 05              2205 	pop	ar5
   0696 D0 04              2206 	pop	ar4
                           2207 ;	Peephole 112.b	changed ljmp to sjmp
   0698 80 B3              2208 	sjmp	00191$
   069A                    2209 00135$:
                           2210 ;	racing.c:173: if(code_byte==code_byte_ROAD_DIVIDER_1) {						//If the current element is a road divider
                           2211 ;	genAssign
   069A 90s00r00           2212 	mov	dptr,#_glcdUpdate1_code_byte_1_1
   069D E0                 2213 	movx	a,@dptr
   069E F8                 2214 	mov	r0,a
   069F A3                 2215 	inc	dptr
   06A0 E0                 2216 	movx	a,@dptr
   06A1 F9                 2217 	mov	r1,a
                           2218 ;	genCmpEq
                           2219 ;	gencjneshort
   06A2 B8 69 05           2220 	cjne	r0,#0x69,00333$
   06A5 B9 00 02           2221 	cjne	r1,#0x00,00333$
   06A8 80 03              2222 	sjmp	00334$
   06AA                    2223 00333$:
   06AA 02s07r5B           2224 	ljmp	00205$
   06AD                    2225 00334$:
                           2226 ;	racing.c:174: if(x<8)
                           2227 ;	genCmpLt
                           2228 ;	genCmp
   06AD C3                 2229 	clr	c
   06AE EE                 2230 	mov	a,r6
   06AF 94 08              2231 	subb	a,#0x08
   06B1 EF                 2232 	mov	a,r7
   06B2 94 00              2233 	subb	a,#0x00
                           2234 ;	genIfxJump
                           2235 ;	Peephole 108.a	removed ljmp by inverse jump logic
   06B4 50 54              2236 	jnc	00262$
                           2237 ;	Peephole 300	removed redundant label 00335$
                           2238 ;	racing.c:175: for(i=0; i<8; i++)
                           2239 ;	genAssign
   06B6 78 00              2240 	mov	r0,#0x00
   06B8 79 00              2241 	mov	r1,#0x00
   06BA                    2242 00195$:
                           2243 ;	genCmpLt
                           2244 ;	genCmp
   06BA C3                 2245 	clr	c
   06BB E8                 2246 	mov	a,r0
   06BC 94 08              2247 	subb	a,#0x08
   06BE E9                 2248 	mov	a,r1
   06BF 94 00              2249 	subb	a,#0x00
                           2250 ;	genIfxJump
   06C1 40 03              2251 	jc	00336$
   06C3 02s07r5B           2252 	ljmp	00205$
   06C6                    2253 00336$:
                           2254 ;	racing.c:176: lcddata_b1(RACING_BITMAP[OFFSET_ROAD_DIVIDER_1+i]);	//Print the other road divider
                           2255 ;	genIpush
   06C6 C0 04              2256 	push	ar4
   06C8 C0 05              2257 	push	ar5
                           2258 ;	genCast
   06CA 88 04              2259 	mov	ar4,r0
                           2260 ;	genPlus
                           2261 ;     genPlusIncr
   06CC 74 18              2262 	mov	a,#0x18
                           2263 ;	Peephole 236.a	used r4 instead of ar4
   06CE 2C                 2264 	add	a,r4
                           2265 ;	genLeftShift
                           2266 ;	genLeftShiftLiteral
                           2267 ;	genlshOne
                           2268 ;	Peephole 105	removed redundant mov
                           2269 ;	genPlus
                           2270 ;	Peephole 204	removed redundant mov
   06CF 25 E0              2271 	add	a,acc
                           2272 ;	Peephole 177.b	removed redundant mov
                           2273 ;	Peephole 181	changed mov to clr
                           2274 ;	genPointerGet
                           2275 ;	genCodePointerGet
                           2276 ;	Peephole 186.c	optimized movc sequence
                           2277 ;	Peephole 177.c	removed redundant move
   06D1 FC                 2278 	mov	r4,a
   06D2 90s00r00           2279 	mov	dptr,#_RACING_BITMAP
   06D5 93                 2280 	movc	a,@a+dptr
   06D6 CC                 2281 	xch	a,r4
   06D7 A3                 2282 	inc	dptr
   06D8 93                 2283 	movc	a,@a+dptr
   06D9 FD                 2284 	mov	r5,a
                           2285 ;	genCast
                           2286 ;	genCall
   06DA 8C 82              2287 	mov	dpl,r4
   06DC C0 02              2288 	push	ar2
   06DE C0 03              2289 	push	ar3
   06E0 C0 04              2290 	push	ar4
   06E2 C0 05              2291 	push	ar5
   06E4 C0 06              2292 	push	ar6
   06E6 C0 07              2293 	push	ar7
   06E8 C0 00              2294 	push	ar0
   06EA C0 01              2295 	push	ar1
   06EC 12s00r00           2296 	lcall	_lcddata_b1
   06EF D0 01              2297 	pop	ar1
   06F1 D0 00              2298 	pop	ar0
   06F3 D0 07              2299 	pop	ar7
   06F5 D0 06              2300 	pop	ar6
   06F7 D0 05              2301 	pop	ar5
   06F9 D0 04              2302 	pop	ar4
   06FB D0 03              2303 	pop	ar3
   06FD D0 02              2304 	pop	ar2
                           2305 ;	racing.c:175: for(i=0; i<8; i++)
                           2306 ;	genPlus
                           2307 ;     genPlusIncr
   06FF 08                 2308 	inc	r0
   0700 B8 00 01           2309 	cjne	r0,#0x00,00337$
   0703 09                 2310 	inc	r1
   0704                    2311 00337$:
                           2312 ;	genIpop
   0704 D0 05              2313 	pop	ar5
   0706 D0 04              2314 	pop	ar4
                           2315 ;	racing.c:178: for(i=0; i<8; i++)
                           2316 ;	Peephole 112.b	changed ljmp to sjmp
   0708 80 B0              2317 	sjmp	00195$
   070A                    2318 00262$:
                           2319 ;	genAssign
   070A 78 00              2320 	mov	r0,#0x00
   070C 79 00              2321 	mov	r1,#0x00
   070E                    2322 00199$:
                           2323 ;	genCmpLt
                           2324 ;	genCmp
   070E C3                 2325 	clr	c
   070F E8                 2326 	mov	a,r0
   0710 94 08              2327 	subb	a,#0x08
   0712 E9                 2328 	mov	a,r1
   0713 94 00              2329 	subb	a,#0x00
                           2330 ;	genIfxJump
                           2331 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0715 50 44              2332 	jnc	00205$
                           2333 ;	Peephole 300	removed redundant label 00338$
                           2334 ;	racing.c:179: lcddata_b2(RACING_BITMAP[OFFSET_ROAD_DIVIDER_1+i]);
                           2335 ;	genIpush
   0717 C0 04              2336 	push	ar4
   0719 C0 05              2337 	push	ar5
                           2338 ;	genCast
   071B 88 04              2339 	mov	ar4,r0
                           2340 ;	genPlus
                           2341 ;     genPlusIncr
   071D 74 18              2342 	mov	a,#0x18
                           2343 ;	Peephole 236.a	used r4 instead of ar4
   071F 2C                 2344 	add	a,r4
                           2345 ;	genLeftShift
                           2346 ;	genLeftShiftLiteral
                           2347 ;	genlshOne
                           2348 ;	Peephole 105	removed redundant mov
                           2349 ;	genPlus
                           2350 ;	Peephole 204	removed redundant mov
   0720 25 E0              2351 	add	a,acc
                           2352 ;	Peephole 177.b	removed redundant mov
                           2353 ;	Peephole 181	changed mov to clr
                           2354 ;	genPointerGet
                           2355 ;	genCodePointerGet
                           2356 ;	Peephole 186.c	optimized movc sequence
                           2357 ;	Peephole 177.c	removed redundant move
   0722 FC                 2358 	mov	r4,a
   0723 90s00r00           2359 	mov	dptr,#_RACING_BITMAP
   0726 93                 2360 	movc	a,@a+dptr
   0727 CC                 2361 	xch	a,r4
   0728 A3                 2362 	inc	dptr
   0729 93                 2363 	movc	a,@a+dptr
   072A FD                 2364 	mov	r5,a
                           2365 ;	genCast
                           2366 ;	genCall
   072B 8C 82              2367 	mov	dpl,r4
   072D C0 02              2368 	push	ar2
   072F C0 03              2369 	push	ar3
   0731 C0 04              2370 	push	ar4
   0733 C0 05              2371 	push	ar5
   0735 C0 06              2372 	push	ar6
   0737 C0 07              2373 	push	ar7
   0739 C0 00              2374 	push	ar0
   073B C0 01              2375 	push	ar1
   073D 12s00r00           2376 	lcall	_lcddata_b2
   0740 D0 01              2377 	pop	ar1
   0742 D0 00              2378 	pop	ar0
   0744 D0 07              2379 	pop	ar7
   0746 D0 06              2380 	pop	ar6
   0748 D0 05              2381 	pop	ar5
   074A D0 04              2382 	pop	ar4
   074C D0 03              2383 	pop	ar3
   074E D0 02              2384 	pop	ar2
                           2385 ;	racing.c:178: for(i=0; i<8; i++)
                           2386 ;	genPlus
                           2387 ;     genPlusIncr
   0750 08                 2388 	inc	r0
   0751 B8 00 01           2389 	cjne	r0,#0x00,00339$
   0754 09                 2390 	inc	r1
   0755                    2391 00339$:
                           2392 ;	genIpop
   0755 D0 05              2393 	pop	ar5
   0757 D0 04              2394 	pop	ar4
                           2395 ;	Peephole 112.b	changed ljmp to sjmp
   0759 80 B3              2396 	sjmp	00199$
   075B                    2397 00205$:
                           2398 ;	racing.c:92: for(x=0; x<16; x++)
                           2399 ;	genPlus
                           2400 ;     genPlusIncr
   075B 0E                 2401 	inc	r6
   075C BE 00 01           2402 	cjne	r6,#0x00,00340$
   075F 0F                 2403 	inc	r7
   0760                    2404 00340$:
   0760 02s01r79           2405 	ljmp	00203$
   0763                    2406 00209$:
                           2407 ;	racing.c:85: for(y = 0; y < 8; y++) {
                           2408 ;	genPlus
                           2409 ;     genPlusIncr
   0763 0A                 2410 	inc	r2
   0764 BA 00 01           2411 	cjne	r2,#0x00,00341$
   0767 0B                 2412 	inc	r3
   0768                    2413 00341$:
   0768 02s01r22           2414 	ljmp	00207$
                           2415 ;	Peephole 259.b	removed redundant label 00211$ and ret
                           2416 ;
                           2417 ;------------------------------------------------------------
                           2418 ;Allocation info for local variables in function 'move_block'
                           2419 ;------------------------------------------------------------
                           2420 ;tail_x                    Allocated with name '_move_block_tail_x_1_1'
                           2421 ;tail_y                    Allocated with name '_move_block_tail_y_1_1'
                           2422 ;head_x                    Allocated with name '_move_block_head_x_1_1'
                           2423 ;head_y                    Allocated with name '_move_block_head_y_1_1'
                           2424 ;------------------------------------------------------------
                           2425 ;	racing.c:187: unsigned int move_block() {
                           2426 ;	-----------------------------------------
                           2427 ;	 function move_block
                           2428 ;	-----------------------------------------
   076B                    2429 _move_block:
                           2430 ;	racing.c:190: tail_x = blockX[0];				//Temporarily store the head. These two locations will be cleared
                           2431 ;	genPointerGet
                           2432 ;	genFarPointerGet
   076B 90s00r00           2433 	mov	dptr,#_blockX
   076E E0                 2434 	movx	a,@dptr
   076F FA                 2435 	mov	r2,a
   0770 A3                 2436 	inc	dptr
   0771 E0                 2437 	movx	a,@dptr
   0772 FB                 2438 	mov	r3,a
                           2439 ;	racing.c:191: tail_y = blockY[0];
                           2440 ;	genPointerGet
                           2441 ;	genFarPointerGet
   0773 90s00r00           2442 	mov	dptr,#_blockY
   0776 E0                 2443 	movx	a,@dptr
   0777 FC                 2444 	mov	r4,a
   0778 A3                 2445 	inc	dptr
   0779 E0                 2446 	movx	a,@dptr
   077A FD                 2447 	mov	r5,a
                           2448 ;	racing.c:197: head_x++;                         //Obstacle movement
                           2449 ;	genPlus
                           2450 ;     genPlusIncr
   077B 74 01              2451 	mov	a,#0x01
                           2452 ;	Peephole 236.a	used r2 instead of ar2
   077D 2A                 2453 	add	a,r2
   077E FE                 2454 	mov	r6,a
                           2455 ;	Peephole 181	changed mov to clr
   077F E4                 2456 	clr	a
                           2457 ;	Peephole 236.b	used r3 instead of ar3
   0780 3B                 2458 	addc	a,r3
   0781 FF                 2459 	mov	r7,a
                           2460 ;	racing.c:199: blockX[0] = head_x;
                           2461 ;	genPointerSet
                           2462 ;     genFarPointerSet
   0782 90s00r00           2463 	mov	dptr,#_blockX
   0785 EE                 2464 	mov	a,r6
   0786 F0                 2465 	movx	@dptr,a
   0787 A3                 2466 	inc	dptr
   0788 EF                 2467 	mov	a,r7
   0789 F0                 2468 	movx	@dptr,a
                           2469 ;	racing.c:200: if(head_x > 16)            //lowest point on screen in terms of tetris
                           2470 ;	genCmpGt
                           2471 ;	genCmp
   078A C3                 2472 	clr	c
   078B 74 10              2473 	mov	a,#0x10
   078D 9E                 2474 	subb	a,r6
                           2475 ;	Peephole 159	avoided xrl during execution
   078E 74 80              2476 	mov	a,#(0x00 ^ 0x80)
   0790 8F F0              2477 	mov	b,r7
   0792 63 F0 80           2478 	xrl	b,#0x80
   0795 95 F0              2479 	subb	a,b
                           2480 ;	genIfxJump
                           2481 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0797 50 04              2482 	jnc	00102$
                           2483 ;	Peephole 300	removed redundant label 00112$
                           2484 ;	racing.c:202: return -2;
                           2485 ;	genRet
                           2486 ;	Peephole 182.b	used 16 bit load of dptr
   0799 90 FF FE           2487 	mov	dptr,#0xFFFE
                           2488 ;	Peephole 251.a	replaced ljmp to ret with ret
   079C 22                 2489 	ret
   079D                    2490 00102$:
                           2491 ;	racing.c:205: if(arena[head_x][head_y] != code_byte_CAR) {  //No collision with the car
                           2492 ;	genLeftShift
                           2493 ;	genLeftShiftLiteral
                           2494 ;	genlshTwo
   079D EF                 2495 	mov	a,r7
   079E C4                 2496 	swap	a
   079F 54 F0              2497 	anl	a,#0xf0
   07A1 CE                 2498 	xch	a,r6
   07A2 C4                 2499 	swap	a
   07A3 CE                 2500 	xch	a,r6
   07A4 6E                 2501 	xrl	a,r6
   07A5 CE                 2502 	xch	a,r6
   07A6 54 F0              2503 	anl	a,#0xf0
   07A8 CE                 2504 	xch	a,r6
   07A9 6E                 2505 	xrl	a,r6
   07AA FF                 2506 	mov	r7,a
                           2507 ;	genPlus
                           2508 ;	Peephole 236.g	used r6 instead of ar6
   07AB EE                 2509 	mov	a,r6
   07AC 24r00              2510 	add	a,#_arena
   07AE F8                 2511 	mov	r0,a
                           2512 ;	Peephole 236.g	used r7 instead of ar7
   07AF EF                 2513 	mov	a,r7
   07B0 34s00              2514 	addc	a,#(_arena >> 8)
   07B2 F9                 2515 	mov	r1,a
                           2516 ;	genLeftShift
                           2517 ;	genLeftShiftLiteral
                           2518 ;	genlshTwo
   07B3 ED                 2519 	mov	a,r5
   07B4 CC                 2520 	xch	a,r4
   07B5 25 E0              2521 	add	a,acc
   07B7 CC                 2522 	xch	a,r4
   07B8 33                 2523 	rlc	a
   07B9 FD                 2524 	mov	r5,a
                           2525 ;	genPlus
                           2526 ;	Peephole 236.g	used r4 instead of ar4
   07BA EC                 2527 	mov	a,r4
                           2528 ;	Peephole 236.a	used r0 instead of ar0
   07BB 28                 2529 	add	a,r0
   07BC F5 82              2530 	mov	dpl,a
                           2531 ;	Peephole 236.g	used r5 instead of ar5
   07BE ED                 2532 	mov	a,r5
                           2533 ;	Peephole 236.b	used r1 instead of ar1
   07BF 39                 2534 	addc	a,r1
   07C0 F5 83              2535 	mov	dph,a
                           2536 ;	genPointerGet
                           2537 ;	genFarPointerGet
   07C2 E0                 2538 	movx	a,@dptr
   07C3 F8                 2539 	mov	r0,a
   07C4 A3                 2540 	inc	dptr
   07C5 E0                 2541 	movx	a,@dptr
   07C6 F9                 2542 	mov	r1,a
                           2543 ;	genCmpEq
                           2544 ;	gencjneshort
   07C7 B8 4C 05           2545 	cjne	r0,#0x4C,00113$
   07CA B9 00 02           2546 	cjne	r1,#0x00,00113$
                           2547 ;	Peephole 112.b	changed ljmp to sjmp
   07CD 80 22              2548 	sjmp	00104$
   07CF                    2549 00113$:
                           2550 ;	racing.c:206: arena[tail_x][tail_y] = code_byte_EMPTY;	//Clear the previous location
                           2551 ;	genLeftShift
                           2552 ;	genLeftShiftLiteral
                           2553 ;	genlshTwo
   07CF EB                 2554 	mov	a,r3
   07D0 C4                 2555 	swap	a
   07D1 54 F0              2556 	anl	a,#0xf0
   07D3 CA                 2557 	xch	a,r2
   07D4 C4                 2558 	swap	a
   07D5 CA                 2559 	xch	a,r2
   07D6 6A                 2560 	xrl	a,r2
   07D7 CA                 2561 	xch	a,r2
   07D8 54 F0              2562 	anl	a,#0xf0
   07DA CA                 2563 	xch	a,r2
   07DB 6A                 2564 	xrl	a,r2
   07DC FB                 2565 	mov	r3,a
                           2566 ;	genPlus
                           2567 ;	Peephole 236.g	used r2 instead of ar2
   07DD EA                 2568 	mov	a,r2
   07DE 24r00              2569 	add	a,#_arena
   07E0 FA                 2570 	mov	r2,a
                           2571 ;	Peephole 236.g	used r3 instead of ar3
   07E1 EB                 2572 	mov	a,r3
   07E2 34s00              2573 	addc	a,#(_arena >> 8)
   07E4 FB                 2574 	mov	r3,a
                           2575 ;	genPlus
                           2576 ;	Peephole 236.g	used r4 instead of ar4
   07E5 EC                 2577 	mov	a,r4
                           2578 ;	Peephole 236.a	used r2 instead of ar2
   07E6 2A                 2579 	add	a,r2
   07E7 F5 82              2580 	mov	dpl,a
                           2581 ;	Peephole 236.g	used r5 instead of ar5
   07E9 ED                 2582 	mov	a,r5
                           2583 ;	Peephole 236.b	used r3 instead of ar3
   07EA 3B                 2584 	addc	a,r3
   07EB F5 83              2585 	mov	dph,a
                           2586 ;	genPointerSet
                           2587 ;     genFarPointerSet
                           2588 ;	Peephole 181	changed mov to clr
   07ED E4                 2589 	clr	a
   07EE F0                 2590 	movx	@dptr,a
   07EF A3                 2591 	inc	dptr
                           2592 ;	Peephole 101	removed redundant mov
   07F0 F0                 2593 	movx	@dptr,a
   07F1                    2594 00104$:
                           2595 ;	racing.c:209: if(arena[head_x][head_y] == code_byte_CAR) {	//Collision with the car- END GAME
                           2596 ;	genPlus
                           2597 ;	Peephole 236.g	used r6 instead of ar6
   07F1 EE                 2598 	mov	a,r6
   07F2 24r00              2599 	add	a,#_arena
   07F4 FA                 2600 	mov	r2,a
                           2601 ;	Peephole 236.g	used r7 instead of ar7
   07F5 EF                 2602 	mov	a,r7
   07F6 34s00              2603 	addc	a,#(_arena >> 8)
   07F8 FB                 2604 	mov	r3,a
                           2605 ;	genPlus
                           2606 ;	Peephole 236.g	used r4 instead of ar4
   07F9 EC                 2607 	mov	a,r4
                           2608 ;	Peephole 236.a	used r2 instead of ar2
   07FA 2A                 2609 	add	a,r2
   07FB F5 82              2610 	mov	dpl,a
                           2611 ;	Peephole 236.g	used r5 instead of ar5
   07FD ED                 2612 	mov	a,r5
                           2613 ;	Peephole 236.b	used r3 instead of ar3
   07FE 3B                 2614 	addc	a,r3
   07FF F5 83              2615 	mov	dph,a
                           2616 ;	genPointerGet
                           2617 ;	genFarPointerGet
   0801 E0                 2618 	movx	a,@dptr
   0802 FA                 2619 	mov	r2,a
   0803 A3                 2620 	inc	dptr
   0804 E0                 2621 	movx	a,@dptr
   0805 FB                 2622 	mov	r3,a
                           2623 ;	genCmpEq
                           2624 ;	gencjneshort
                           2625 ;	Peephole 112.b	changed ljmp to sjmp
                           2626 ;	Peephole 198.a	optimized misc jump sequence
   0806 BA 4C 07           2627 	cjne	r2,#0x4C,00106$
   0809 BB 00 04           2628 	cjne	r3,#0x00,00106$
                           2629 ;	Peephole 200.b	removed redundant sjmp
                           2630 ;	Peephole 300	removed redundant label 00114$
                           2631 ;	Peephole 300	removed redundant label 00115$
                           2632 ;	racing.c:211: return -3;
                           2633 ;	genRet
                           2634 ;	Peephole 182.b	used 16 bit load of dptr
   080C 90 FF FD           2635 	mov	dptr,#0xFFFD
                           2636 ;	Peephole 112.b	changed ljmp to sjmp
                           2637 ;	Peephole 251.b	replaced sjmp to ret with ret
   080F 22                 2638 	ret
   0810                    2639 00106$:
                           2640 ;	racing.c:213: arena[head_x][head_y] = code_byte_BLOCK;  //Write to arena array
                           2641 ;	genPlus
                           2642 ;	Peephole 236.g	used r6 instead of ar6
   0810 EE                 2643 	mov	a,r6
   0811 24r00              2644 	add	a,#_arena
   0813 FE                 2645 	mov	r6,a
                           2646 ;	Peephole 236.g	used r7 instead of ar7
   0814 EF                 2647 	mov	a,r7
   0815 34s00              2648 	addc	a,#(_arena >> 8)
   0817 FF                 2649 	mov	r7,a
                           2650 ;	genPlus
                           2651 ;	Peephole 236.g	used r4 instead of ar4
   0818 EC                 2652 	mov	a,r4
                           2653 ;	Peephole 236.a	used r6 instead of ar6
   0819 2E                 2654 	add	a,r6
   081A F5 82              2655 	mov	dpl,a
                           2656 ;	Peephole 236.g	used r5 instead of ar5
   081C ED                 2657 	mov	a,r5
                           2658 ;	Peephole 236.b	used r7 instead of ar7
   081D 3F                 2659 	addc	a,r7
   081E F5 83              2660 	mov	dph,a
                           2661 ;	genPointerSet
                           2662 ;     genFarPointerSet
   0820 74 DE              2663 	mov	a,#0xDE
   0822 F0                 2664 	movx	@dptr,a
   0823 A3                 2665 	inc	dptr
                           2666 ;	Peephole 181	changed mov to clr
   0824 E4                 2667 	clr	a
   0825 F0                 2668 	movx	@dptr,a
                           2669 ;	racing.c:214: return 0;
                           2670 ;	genRet
                           2671 ;	Peephole 182.b	used 16 bit load of dptr
   0826 90 00 00           2672 	mov	dptr,#0x0000
                           2673 ;	Peephole 300	removed redundant label 00107$
   0829 22                 2674 	ret
                           2675 ;------------------------------------------------------------
                           2676 ;Allocation info for local variables in function 'move_block_other'
                           2677 ;------------------------------------------------------------
                           2678 ;tail_x                    Allocated with name '_move_block_other_tail_x_1_1'
                           2679 ;tail_y                    Allocated with name '_move_block_other_tail_y_1_1'
                           2680 ;head_x                    Allocated with name '_move_block_other_head_x_1_1'
                           2681 ;head_y                    Allocated with name '_move_block_other_head_y_1_1'
                           2682 ;------------------------------------------------------------
                           2683 ;	racing.c:220: unsigned int move_block_other() {
                           2684 ;	-----------------------------------------
                           2685 ;	 function move_block_other
                           2686 ;	-----------------------------------------
   082A                    2687 _move_block_other:
                           2688 ;	racing.c:223: tail_x = blockA[0];			//Temporarily store the head. These two locations will be cleared
                           2689 ;	genPointerGet
                           2690 ;	genFarPointerGet
   082A 90s00r00           2691 	mov	dptr,#_blockA
   082D E0                 2692 	movx	a,@dptr
   082E FA                 2693 	mov	r2,a
   082F A3                 2694 	inc	dptr
   0830 E0                 2695 	movx	a,@dptr
   0831 FB                 2696 	mov	r3,a
                           2697 ;	racing.c:224: tail_y = blockB[0];
                           2698 ;	genPointerGet
                           2699 ;	genFarPointerGet
   0832 90s00r00           2700 	mov	dptr,#_blockB
   0835 E0                 2701 	movx	a,@dptr
   0836 FC                 2702 	mov	r4,a
   0837 A3                 2703 	inc	dptr
   0838 E0                 2704 	movx	a,@dptr
   0839 FD                 2705 	mov	r5,a
                           2706 ;	racing.c:229: head_x++;
                           2707 ;	genPlus
                           2708 ;     genPlusIncr
   083A 74 01              2709 	mov	a,#0x01
                           2710 ;	Peephole 236.a	used r2 instead of ar2
   083C 2A                 2711 	add	a,r2
   083D FE                 2712 	mov	r6,a
                           2713 ;	Peephole 181	changed mov to clr
   083E E4                 2714 	clr	a
                           2715 ;	Peephole 236.b	used r3 instead of ar3
   083F 3B                 2716 	addc	a,r3
   0840 FF                 2717 	mov	r7,a
                           2718 ;	racing.c:231: blockA[0] = head_x;
                           2719 ;	genPointerSet
                           2720 ;     genFarPointerSet
   0841 90s00r00           2721 	mov	dptr,#_blockA
   0844 EE                 2722 	mov	a,r6
   0845 F0                 2723 	movx	@dptr,a
   0846 A3                 2724 	inc	dptr
   0847 EF                 2725 	mov	a,r7
   0848 F0                 2726 	movx	@dptr,a
                           2727 ;	racing.c:232: blockB[0] = head_y;
                           2728 ;	genPointerSet
                           2729 ;     genFarPointerSet
   0849 90s00r00           2730 	mov	dptr,#_blockB
   084C EC                 2731 	mov	a,r4
   084D F0                 2732 	movx	@dptr,a
   084E A3                 2733 	inc	dptr
   084F ED                 2734 	mov	a,r5
   0850 F0                 2735 	movx	@dptr,a
                           2736 ;	racing.c:234: if(head_x > 16)            //lowest point on screen
                           2737 ;	genCmpGt
                           2738 ;	genCmp
   0851 C3                 2739 	clr	c
   0852 74 10              2740 	mov	a,#0x10
   0854 9E                 2741 	subb	a,r6
                           2742 ;	Peephole 159	avoided xrl during execution
   0855 74 80              2743 	mov	a,#(0x00 ^ 0x80)
   0857 8F F0              2744 	mov	b,r7
   0859 63 F0 80           2745 	xrl	b,#0x80
   085C 95 F0              2746 	subb	a,b
                           2747 ;	genIfxJump
                           2748 ;	Peephole 108.a	removed ljmp by inverse jump logic
   085E 50 04              2749 	jnc	00102$
                           2750 ;	Peephole 300	removed redundant label 00112$
                           2751 ;	racing.c:236: return -2;
                           2752 ;	genRet
                           2753 ;	Peephole 182.b	used 16 bit load of dptr
   0860 90 FF FE           2754 	mov	dptr,#0xFFFE
                           2755 ;	Peephole 251.a	replaced ljmp to ret with ret
   0863 22                 2756 	ret
   0864                    2757 00102$:
                           2758 ;	racing.c:239: if(arena[head_x][head_y] != code_byte_CAR) {  //No collision with the car
                           2759 ;	genLeftShift
                           2760 ;	genLeftShiftLiteral
                           2761 ;	genlshTwo
   0864 EF                 2762 	mov	a,r7
   0865 C4                 2763 	swap	a
   0866 54 F0              2764 	anl	a,#0xf0
   0868 CE                 2765 	xch	a,r6
   0869 C4                 2766 	swap	a
   086A CE                 2767 	xch	a,r6
   086B 6E                 2768 	xrl	a,r6
   086C CE                 2769 	xch	a,r6
   086D 54 F0              2770 	anl	a,#0xf0
   086F CE                 2771 	xch	a,r6
   0870 6E                 2772 	xrl	a,r6
   0871 FF                 2773 	mov	r7,a
                           2774 ;	genPlus
                           2775 ;	Peephole 236.g	used r6 instead of ar6
   0872 EE                 2776 	mov	a,r6
   0873 24r00              2777 	add	a,#_arena
   0875 F8                 2778 	mov	r0,a
                           2779 ;	Peephole 236.g	used r7 instead of ar7
   0876 EF                 2780 	mov	a,r7
   0877 34s00              2781 	addc	a,#(_arena >> 8)
   0879 F9                 2782 	mov	r1,a
                           2783 ;	genLeftShift
                           2784 ;	genLeftShiftLiteral
                           2785 ;	genlshTwo
   087A ED                 2786 	mov	a,r5
   087B CC                 2787 	xch	a,r4
   087C 25 E0              2788 	add	a,acc
   087E CC                 2789 	xch	a,r4
   087F 33                 2790 	rlc	a
   0880 FD                 2791 	mov	r5,a
                           2792 ;	genPlus
                           2793 ;	Peephole 236.g	used r4 instead of ar4
   0881 EC                 2794 	mov	a,r4
                           2795 ;	Peephole 236.a	used r0 instead of ar0
   0882 28                 2796 	add	a,r0
   0883 F5 82              2797 	mov	dpl,a
                           2798 ;	Peephole 236.g	used r5 instead of ar5
   0885 ED                 2799 	mov	a,r5
                           2800 ;	Peephole 236.b	used r1 instead of ar1
   0886 39                 2801 	addc	a,r1
   0887 F5 83              2802 	mov	dph,a
                           2803 ;	genPointerGet
                           2804 ;	genFarPointerGet
   0889 E0                 2805 	movx	a,@dptr
   088A F8                 2806 	mov	r0,a
   088B A3                 2807 	inc	dptr
   088C E0                 2808 	movx	a,@dptr
   088D F9                 2809 	mov	r1,a
                           2810 ;	genCmpEq
                           2811 ;	gencjneshort
   088E B8 4C 05           2812 	cjne	r0,#0x4C,00113$
   0891 B9 00 02           2813 	cjne	r1,#0x00,00113$
                           2814 ;	Peephole 112.b	changed ljmp to sjmp
   0894 80 22              2815 	sjmp	00104$
   0896                    2816 00113$:
                           2817 ;	racing.c:240: arena[tail_x][tail_y] = code_byte_EMPTY;  //Clear the previous location
                           2818 ;	genLeftShift
                           2819 ;	genLeftShiftLiteral
                           2820 ;	genlshTwo
   0896 EB                 2821 	mov	a,r3
   0897 C4                 2822 	swap	a
   0898 54 F0              2823 	anl	a,#0xf0
   089A CA                 2824 	xch	a,r2
   089B C4                 2825 	swap	a
   089C CA                 2826 	xch	a,r2
   089D 6A                 2827 	xrl	a,r2
   089E CA                 2828 	xch	a,r2
   089F 54 F0              2829 	anl	a,#0xf0
   08A1 CA                 2830 	xch	a,r2
   08A2 6A                 2831 	xrl	a,r2
   08A3 FB                 2832 	mov	r3,a
                           2833 ;	genPlus
                           2834 ;	Peephole 236.g	used r2 instead of ar2
   08A4 EA                 2835 	mov	a,r2
   08A5 24r00              2836 	add	a,#_arena
   08A7 FA                 2837 	mov	r2,a
                           2838 ;	Peephole 236.g	used r3 instead of ar3
   08A8 EB                 2839 	mov	a,r3
   08A9 34s00              2840 	addc	a,#(_arena >> 8)
   08AB FB                 2841 	mov	r3,a
                           2842 ;	genPlus
                           2843 ;	Peephole 236.g	used r4 instead of ar4
   08AC EC                 2844 	mov	a,r4
                           2845 ;	Peephole 236.a	used r2 instead of ar2
   08AD 2A                 2846 	add	a,r2
   08AE F5 82              2847 	mov	dpl,a
                           2848 ;	Peephole 236.g	used r5 instead of ar5
   08B0 ED                 2849 	mov	a,r5
                           2850 ;	Peephole 236.b	used r3 instead of ar3
   08B1 3B                 2851 	addc	a,r3
   08B2 F5 83              2852 	mov	dph,a
                           2853 ;	genPointerSet
                           2854 ;     genFarPointerSet
                           2855 ;	Peephole 181	changed mov to clr
   08B4 E4                 2856 	clr	a
   08B5 F0                 2857 	movx	@dptr,a
   08B6 A3                 2858 	inc	dptr
                           2859 ;	Peephole 101	removed redundant mov
   08B7 F0                 2860 	movx	@dptr,a
   08B8                    2861 00104$:
                           2862 ;	racing.c:242: if(arena[head_x][head_y] == code_byte_CAR) {		//Collision with the car- END GAME
                           2863 ;	genPlus
                           2864 ;	Peephole 236.g	used r6 instead of ar6
   08B8 EE                 2865 	mov	a,r6
   08B9 24r00              2866 	add	a,#_arena
   08BB FA                 2867 	mov	r2,a
                           2868 ;	Peephole 236.g	used r7 instead of ar7
   08BC EF                 2869 	mov	a,r7
   08BD 34s00              2870 	addc	a,#(_arena >> 8)
   08BF FB                 2871 	mov	r3,a
                           2872 ;	genPlus
                           2873 ;	Peephole 236.g	used r4 instead of ar4
   08C0 EC                 2874 	mov	a,r4
                           2875 ;	Peephole 236.a	used r2 instead of ar2
   08C1 2A                 2876 	add	a,r2
   08C2 F5 82              2877 	mov	dpl,a
                           2878 ;	Peephole 236.g	used r5 instead of ar5
   08C4 ED                 2879 	mov	a,r5
                           2880 ;	Peephole 236.b	used r3 instead of ar3
   08C5 3B                 2881 	addc	a,r3
   08C6 F5 83              2882 	mov	dph,a
                           2883 ;	genPointerGet
                           2884 ;	genFarPointerGet
   08C8 E0                 2885 	movx	a,@dptr
   08C9 FA                 2886 	mov	r2,a
   08CA A3                 2887 	inc	dptr
   08CB E0                 2888 	movx	a,@dptr
   08CC FB                 2889 	mov	r3,a
                           2890 ;	genCmpEq
                           2891 ;	gencjneshort
                           2892 ;	Peephole 112.b	changed ljmp to sjmp
                           2893 ;	Peephole 198.a	optimized misc jump sequence
   08CD BA 4C 07           2894 	cjne	r2,#0x4C,00106$
   08D0 BB 00 04           2895 	cjne	r3,#0x00,00106$
                           2896 ;	Peephole 200.b	removed redundant sjmp
                           2897 ;	Peephole 300	removed redundant label 00114$
                           2898 ;	Peephole 300	removed redundant label 00115$
                           2899 ;	racing.c:244: return -3;
                           2900 ;	genRet
                           2901 ;	Peephole 182.b	used 16 bit load of dptr
   08D3 90 FF FD           2902 	mov	dptr,#0xFFFD
                           2903 ;	Peephole 112.b	changed ljmp to sjmp
                           2904 ;	Peephole 251.b	replaced sjmp to ret with ret
   08D6 22                 2905 	ret
   08D7                    2906 00106$:
                           2907 ;	racing.c:247: arena[head_x][head_y] = code_byte_BLOCK_2;  //Write to arena array
                           2908 ;	genPlus
                           2909 ;	Peephole 236.g	used r6 instead of ar6
   08D7 EE                 2910 	mov	a,r6
   08D8 24r00              2911 	add	a,#_arena
   08DA FE                 2912 	mov	r6,a
                           2913 ;	Peephole 236.g	used r7 instead of ar7
   08DB EF                 2914 	mov	a,r7
   08DC 34s00              2915 	addc	a,#(_arena >> 8)
   08DE FF                 2916 	mov	r7,a
                           2917 ;	genPlus
                           2918 ;	Peephole 236.g	used r4 instead of ar4
   08DF EC                 2919 	mov	a,r4
                           2920 ;	Peephole 236.a	used r6 instead of ar6
   08E0 2E                 2921 	add	a,r6
   08E1 F5 82              2922 	mov	dpl,a
                           2923 ;	Peephole 236.g	used r5 instead of ar5
   08E3 ED                 2924 	mov	a,r5
                           2925 ;	Peephole 236.b	used r7 instead of ar7
   08E4 3F                 2926 	addc	a,r7
   08E5 F5 83              2927 	mov	dph,a
                           2928 ;	genPointerSet
                           2929 ;     genFarPointerSet
   08E7 74 DC              2930 	mov	a,#0xDC
   08E9 F0                 2931 	movx	@dptr,a
   08EA A3                 2932 	inc	dptr
                           2933 ;	Peephole 181	changed mov to clr
   08EB E4                 2934 	clr	a
   08EC F0                 2935 	movx	@dptr,a
                           2936 ;	racing.c:248: return 0;
                           2937 ;	genRet
                           2938 ;	Peephole 182.b	used 16 bit load of dptr
   08ED 90 00 00           2939 	mov	dptr,#0x0000
                           2940 ;	Peephole 300	removed redundant label 00107$
   08F0 22                 2941 	ret
                           2942 ;------------------------------------------------------------
                           2943 ;Allocation info for local variables in function 'move_block_other_1'
                           2944 ;------------------------------------------------------------
                           2945 ;tail_x                    Allocated with name '_move_block_other_1_tail_x_1_1'
                           2946 ;tail_y                    Allocated with name '_move_block_other_1_tail_y_1_1'
                           2947 ;head_x                    Allocated with name '_move_block_other_1_head_x_1_1'
                           2948 ;head_y                    Allocated with name '_move_block_other_1_head_y_1_1'
                           2949 ;------------------------------------------------------------
                           2950 ;	racing.c:254: unsigned int move_block_other_1() {
                           2951 ;	-----------------------------------------
                           2952 ;	 function move_block_other_1
                           2953 ;	-----------------------------------------
   08F1                    2954 _move_block_other_1:
                           2955 ;	racing.c:257: tail_x = blockC[0];							//Temporarily store the head. These two locations will be cleared
                           2956 ;	genPointerGet
                           2957 ;	genFarPointerGet
   08F1 90s00r00           2958 	mov	dptr,#_blockC
   08F4 E0                 2959 	movx	a,@dptr
   08F5 FA                 2960 	mov	r2,a
   08F6 A3                 2961 	inc	dptr
   08F7 E0                 2962 	movx	a,@dptr
   08F8 FB                 2963 	mov	r3,a
                           2964 ;	racing.c:258: tail_y = blockD[0];
                           2965 ;	genPointerGet
                           2966 ;	genFarPointerGet
   08F9 90s00r00           2967 	mov	dptr,#_blockD
   08FC E0                 2968 	movx	a,@dptr
   08FD FC                 2969 	mov	r4,a
   08FE A3                 2970 	inc	dptr
   08FF E0                 2971 	movx	a,@dptr
   0900 FD                 2972 	mov	r5,a
                           2973 ;	racing.c:264: head_x++;                         			//Obstacle movement
                           2974 ;	genPlus
                           2975 ;     genPlusIncr
   0901 74 01              2976 	mov	a,#0x01
                           2977 ;	Peephole 236.a	used r2 instead of ar2
   0903 2A                 2978 	add	a,r2
   0904 FE                 2979 	mov	r6,a
                           2980 ;	Peephole 181	changed mov to clr
   0905 E4                 2981 	clr	a
                           2982 ;	Peephole 236.b	used r3 instead of ar3
   0906 3B                 2983 	addc	a,r3
   0907 FF                 2984 	mov	r7,a
                           2985 ;	racing.c:266: blockC[0] = head_x;
                           2986 ;	genPointerSet
                           2987 ;     genFarPointerSet
   0908 90s00r00           2988 	mov	dptr,#_blockC
   090B EE                 2989 	mov	a,r6
   090C F0                 2990 	movx	@dptr,a
   090D A3                 2991 	inc	dptr
   090E EF                 2992 	mov	a,r7
   090F F0                 2993 	movx	@dptr,a
                           2994 ;	racing.c:267: if(head_x > 16)          					  //lowest point on screen
                           2995 ;	genCmpGt
                           2996 ;	genCmp
   0910 C3                 2997 	clr	c
   0911 74 10              2998 	mov	a,#0x10
   0913 9E                 2999 	subb	a,r6
                           3000 ;	Peephole 159	avoided xrl during execution
   0914 74 80              3001 	mov	a,#(0x00 ^ 0x80)
   0916 8F F0              3002 	mov	b,r7
   0918 63 F0 80           3003 	xrl	b,#0x80
   091B 95 F0              3004 	subb	a,b
                           3005 ;	genIfxJump
                           3006 ;	Peephole 108.a	removed ljmp by inverse jump logic
   091D 50 04              3007 	jnc	00102$
                           3008 ;	Peephole 300	removed redundant label 00112$
                           3009 ;	racing.c:269: return -2;
                           3010 ;	genRet
                           3011 ;	Peephole 182.b	used 16 bit load of dptr
   091F 90 FF FE           3012 	mov	dptr,#0xFFFE
                           3013 ;	Peephole 251.a	replaced ljmp to ret with ret
   0922 22                 3014 	ret
   0923                    3015 00102$:
                           3016 ;	racing.c:273: if(arena[head_x][head_y] != code_byte_CAR) {  //No collision with the car
                           3017 ;	genLeftShift
                           3018 ;	genLeftShiftLiteral
                           3019 ;	genlshTwo
   0923 EF                 3020 	mov	a,r7
   0924 C4                 3021 	swap	a
   0925 54 F0              3022 	anl	a,#0xf0
   0927 CE                 3023 	xch	a,r6
   0928 C4                 3024 	swap	a
   0929 CE                 3025 	xch	a,r6
   092A 6E                 3026 	xrl	a,r6
   092B CE                 3027 	xch	a,r6
   092C 54 F0              3028 	anl	a,#0xf0
   092E CE                 3029 	xch	a,r6
   092F 6E                 3030 	xrl	a,r6
   0930 FF                 3031 	mov	r7,a
                           3032 ;	genPlus
                           3033 ;	Peephole 236.g	used r6 instead of ar6
   0931 EE                 3034 	mov	a,r6
   0932 24r00              3035 	add	a,#_arena
   0934 F8                 3036 	mov	r0,a
                           3037 ;	Peephole 236.g	used r7 instead of ar7
   0935 EF                 3038 	mov	a,r7
   0936 34s00              3039 	addc	a,#(_arena >> 8)
   0938 F9                 3040 	mov	r1,a
                           3041 ;	genLeftShift
                           3042 ;	genLeftShiftLiteral
                           3043 ;	genlshTwo
   0939 ED                 3044 	mov	a,r5
   093A CC                 3045 	xch	a,r4
   093B 25 E0              3046 	add	a,acc
   093D CC                 3047 	xch	a,r4
   093E 33                 3048 	rlc	a
   093F FD                 3049 	mov	r5,a
                           3050 ;	genPlus
                           3051 ;	Peephole 236.g	used r4 instead of ar4
   0940 EC                 3052 	mov	a,r4
                           3053 ;	Peephole 236.a	used r0 instead of ar0
   0941 28                 3054 	add	a,r0
   0942 F5 82              3055 	mov	dpl,a
                           3056 ;	Peephole 236.g	used r5 instead of ar5
   0944 ED                 3057 	mov	a,r5
                           3058 ;	Peephole 236.b	used r1 instead of ar1
   0945 39                 3059 	addc	a,r1
   0946 F5 83              3060 	mov	dph,a
                           3061 ;	genPointerGet
                           3062 ;	genFarPointerGet
   0948 E0                 3063 	movx	a,@dptr
   0949 F8                 3064 	mov	r0,a
   094A A3                 3065 	inc	dptr
   094B E0                 3066 	movx	a,@dptr
   094C F9                 3067 	mov	r1,a
                           3068 ;	genCmpEq
                           3069 ;	gencjneshort
   094D B8 4C 05           3070 	cjne	r0,#0x4C,00113$
   0950 B9 00 02           3071 	cjne	r1,#0x00,00113$
                           3072 ;	Peephole 112.b	changed ljmp to sjmp
   0953 80 22              3073 	sjmp	00104$
   0955                    3074 00113$:
                           3075 ;	racing.c:274: arena[tail_x][tail_y] = code_byte_EMPTY;	//Clear the previous location
                           3076 ;	genLeftShift
                           3077 ;	genLeftShiftLiteral
                           3078 ;	genlshTwo
   0955 EB                 3079 	mov	a,r3
   0956 C4                 3080 	swap	a
   0957 54 F0              3081 	anl	a,#0xf0
   0959 CA                 3082 	xch	a,r2
   095A C4                 3083 	swap	a
   095B CA                 3084 	xch	a,r2
   095C 6A                 3085 	xrl	a,r2
   095D CA                 3086 	xch	a,r2
   095E 54 F0              3087 	anl	a,#0xf0
   0960 CA                 3088 	xch	a,r2
   0961 6A                 3089 	xrl	a,r2
   0962 FB                 3090 	mov	r3,a
                           3091 ;	genPlus
                           3092 ;	Peephole 236.g	used r2 instead of ar2
   0963 EA                 3093 	mov	a,r2
   0964 24r00              3094 	add	a,#_arena
   0966 FA                 3095 	mov	r2,a
                           3096 ;	Peephole 236.g	used r3 instead of ar3
   0967 EB                 3097 	mov	a,r3
   0968 34s00              3098 	addc	a,#(_arena >> 8)
   096A FB                 3099 	mov	r3,a
                           3100 ;	genPlus
                           3101 ;	Peephole 236.g	used r4 instead of ar4
   096B EC                 3102 	mov	a,r4
                           3103 ;	Peephole 236.a	used r2 instead of ar2
   096C 2A                 3104 	add	a,r2
   096D F5 82              3105 	mov	dpl,a
                           3106 ;	Peephole 236.g	used r5 instead of ar5
   096F ED                 3107 	mov	a,r5
                           3108 ;	Peephole 236.b	used r3 instead of ar3
   0970 3B                 3109 	addc	a,r3
   0971 F5 83              3110 	mov	dph,a
                           3111 ;	genPointerSet
                           3112 ;     genFarPointerSet
                           3113 ;	Peephole 181	changed mov to clr
   0973 E4                 3114 	clr	a
   0974 F0                 3115 	movx	@dptr,a
   0975 A3                 3116 	inc	dptr
                           3117 ;	Peephole 101	removed redundant mov
   0976 F0                 3118 	movx	@dptr,a
   0977                    3119 00104$:
                           3120 ;	racing.c:277: if(arena[head_x][head_y] == code_byte_CAR) {		//Collision with the car- END GAME
                           3121 ;	genPlus
                           3122 ;	Peephole 236.g	used r6 instead of ar6
   0977 EE                 3123 	mov	a,r6
   0978 24r00              3124 	add	a,#_arena
   097A FA                 3125 	mov	r2,a
                           3126 ;	Peephole 236.g	used r7 instead of ar7
   097B EF                 3127 	mov	a,r7
   097C 34s00              3128 	addc	a,#(_arena >> 8)
   097E FB                 3129 	mov	r3,a
                           3130 ;	genPlus
                           3131 ;	Peephole 236.g	used r4 instead of ar4
   097F EC                 3132 	mov	a,r4
                           3133 ;	Peephole 236.a	used r2 instead of ar2
   0980 2A                 3134 	add	a,r2
   0981 F5 82              3135 	mov	dpl,a
                           3136 ;	Peephole 236.g	used r5 instead of ar5
   0983 ED                 3137 	mov	a,r5
                           3138 ;	Peephole 236.b	used r3 instead of ar3
   0984 3B                 3139 	addc	a,r3
   0985 F5 83              3140 	mov	dph,a
                           3141 ;	genPointerGet
                           3142 ;	genFarPointerGet
   0987 E0                 3143 	movx	a,@dptr
   0988 FA                 3144 	mov	r2,a
   0989 A3                 3145 	inc	dptr
   098A E0                 3146 	movx	a,@dptr
   098B FB                 3147 	mov	r3,a
                           3148 ;	genCmpEq
                           3149 ;	gencjneshort
                           3150 ;	Peephole 112.b	changed ljmp to sjmp
                           3151 ;	Peephole 198.a	optimized misc jump sequence
   098C BA 4C 07           3152 	cjne	r2,#0x4C,00106$
   098F BB 00 04           3153 	cjne	r3,#0x00,00106$
                           3154 ;	Peephole 200.b	removed redundant sjmp
                           3155 ;	Peephole 300	removed redundant label 00114$
                           3156 ;	Peephole 300	removed redundant label 00115$
                           3157 ;	racing.c:279: return -3;
                           3158 ;	genRet
                           3159 ;	Peephole 182.b	used 16 bit load of dptr
   0992 90 FF FD           3160 	mov	dptr,#0xFFFD
                           3161 ;	Peephole 112.b	changed ljmp to sjmp
                           3162 ;	Peephole 251.b	replaced sjmp to ret with ret
   0995 22                 3163 	ret
   0996                    3164 00106$:
                           3165 ;	racing.c:281: arena[head_x][head_y] = code_byte_BLOCK_3;  		//Write to arena array
                           3166 ;	genPlus
                           3167 ;	Peephole 236.g	used r6 instead of ar6
   0996 EE                 3168 	mov	a,r6
   0997 24r00              3169 	add	a,#_arena
   0999 FE                 3170 	mov	r6,a
                           3171 ;	Peephole 236.g	used r7 instead of ar7
   099A EF                 3172 	mov	a,r7
   099B 34s00              3173 	addc	a,#(_arena >> 8)
   099D FF                 3174 	mov	r7,a
                           3175 ;	genPlus
                           3176 ;	Peephole 236.g	used r4 instead of ar4
   099E EC                 3177 	mov	a,r4
                           3178 ;	Peephole 236.a	used r6 instead of ar6
   099F 2E                 3179 	add	a,r6
   09A0 F5 82              3180 	mov	dpl,a
                           3181 ;	Peephole 236.g	used r5 instead of ar5
   09A2 ED                 3182 	mov	a,r5
                           3183 ;	Peephole 236.b	used r7 instead of ar7
   09A3 3F                 3184 	addc	a,r7
   09A4 F5 83              3185 	mov	dph,a
                           3186 ;	genPointerSet
                           3187 ;     genFarPointerSet
   09A6 74 DD              3188 	mov	a,#0xDD
   09A8 F0                 3189 	movx	@dptr,a
   09A9 A3                 3190 	inc	dptr
                           3191 ;	Peephole 181	changed mov to clr
   09AA E4                 3192 	clr	a
   09AB F0                 3193 	movx	@dptr,a
                           3194 ;	racing.c:282: return 0;
                           3195 ;	genRet
                           3196 ;	Peephole 182.b	used 16 bit load of dptr
   09AC 90 00 00           3197 	mov	dptr,#0x0000
                           3198 ;	Peephole 300	removed redundant label 00107$
   09AF 22                 3199 	ret
                           3200 ;------------------------------------------------------------
                           3201 ;Allocation info for local variables in function 'refreshCarDir'
                           3202 ;------------------------------------------------------------
                           3203 ;oldDir                    Allocated with name '_refreshCarDir_oldDir_1_1'
                           3204 ;------------------------------------------------------------
                           3205 ;	racing.c:288: int refreshCarDir() {							
                           3206 ;	-----------------------------------------
                           3207 ;	 function refreshCarDir
                           3208 ;	-----------------------------------------
   09B0                    3209 _refreshCarDir:
                           3210 ;	racing.c:290: oldDir = car_dir;				//Store old location of the car for comparison
                           3211 ;	genAssign
   09B0 90s00r00           3212 	mov	dptr,#_car_dir
   09B3 E0                 3213 	movx	a,@dptr
   09B4 FA                 3214 	mov	r2,a
   09B5 A3                 3215 	inc	dptr
   09B6 E0                 3216 	movx	a,@dptr
   09B7 FB                 3217 	mov	r3,a
                           3218 ;	genAssign
   09B8 90s00r02           3219 	mov	dptr,#_refreshCarDir_oldDir_1_1
   09BB EA                 3220 	mov	a,r2
   09BC F0                 3221 	movx	@dptr,a
   09BD A3                 3222 	inc	dptr
   09BE EB                 3223 	mov	a,r3
   09BF F0                 3224 	movx	@dptr,a
                           3225 ;	genIfx
                           3226 ;	genIfxJump
                           3227 ;	Peephole 108.e	removed ljmp by inverse jump logic
   09C0 20 B5 37           3228 	jb	_P3_5,00107$
                           3229 ;	Peephole 300	removed redundant label 00127$
                           3230 ;	racing.c:293: if(car_dir<=1)				//The right corner is restricted to 1
                           3231 ;	genCmpGt
                           3232 ;	genCmp
   09C3 C3                 3233 	clr	c
   09C4 74 01              3234 	mov	a,#0x01
   09C6 9A                 3235 	subb	a,r2
                           3236 ;	Peephole 181	changed mov to clr
   09C7 E4                 3237 	clr	a
   09C8 9B                 3238 	subb	a,r3
                           3239 ;	genIfxJump
                           3240 ;	Peephole 112.b	changed ljmp to sjmp
                           3241 ;	Peephole 160.a	removed sjmp by inverse jump logic
   09C9 40 0B              3242 	jc	00104$
                           3243 ;	Peephole 300	removed redundant label 00128$
                           3244 ;	racing.c:295: car_dir=1;			
                           3245 ;	genAssign
   09CB 90s00r00           3246 	mov	dptr,#_car_dir
   09CE 74 01              3247 	mov	a,#0x01
   09D0 F0                 3248 	movx	@dptr,a
   09D1 E4                 3249 	clr	a
   09D2 A3                 3250 	inc	dptr
   09D3 F0                 3251 	movx	@dptr,a
                           3252 ;	Peephole 112.b	changed ljmp to sjmp
   09D4 80 24              3253 	sjmp	00107$
   09D6                    3254 00104$:
                           3255 ;	racing.c:300: car_dir--;           //move right
                           3256 ;	genMinus
                           3257 ;	genMinusDec
   09D6 1A                 3258 	dec	r2
   09D7 BA FF 01           3259 	cjne	r2,#0xff,00129$
   09DA 1B                 3260 	dec	r3
   09DB                    3261 00129$:
                           3262 ;	genAssign
   09DB 90s00r00           3263 	mov	dptr,#_car_dir
   09DE EA                 3264 	mov	a,r2
   09DF F0                 3265 	movx	@dptr,a
   09E0 A3                 3266 	inc	dptr
   09E1 EB                 3267 	mov	a,r3
   09E2 F0                 3268 	movx	@dptr,a
                           3269 ;	racing.c:301: if(car_dir==3)		//Dividers are on column 3, so avoid it
                           3270 ;	genAssign
   09E3 90s00r00           3271 	mov	dptr,#_car_dir
   09E6 E0                 3272 	movx	a,@dptr
   09E7 FA                 3273 	mov	r2,a
   09E8 A3                 3274 	inc	dptr
   09E9 E0                 3275 	movx	a,@dptr
   09EA FB                 3276 	mov	r3,a
                           3277 ;	genCmpEq
                           3278 ;	gencjneshort
                           3279 ;	Peephole 112.b	changed ljmp to sjmp
                           3280 ;	Peephole 198.a	optimized misc jump sequence
   09EB BA 03 0C           3281 	cjne	r2,#0x03,00107$
   09EE BB 00 09           3282 	cjne	r3,#0x00,00107$
                           3283 ;	Peephole 200.b	removed redundant sjmp
                           3284 ;	Peephole 300	removed redundant label 00130$
                           3285 ;	Peephole 300	removed redundant label 00131$
                           3286 ;	racing.c:302: car_dir=2;
                           3287 ;	genAssign
   09F1 90s00r00           3288 	mov	dptr,#_car_dir
   09F4 74 02              3289 	mov	a,#0x02
   09F6 F0                 3290 	movx	@dptr,a
   09F7 E4                 3291 	clr	a
   09F8 A3                 3292 	inc	dptr
   09F9 F0                 3293 	movx	@dptr,a
   09FA                    3294 00107$:
                           3295 ;	genIfx
                           3296 ;	genIfxJump
                           3297 ;	Peephole 108.e	removed ljmp by inverse jump logic
   09FA 20 92 3E           3298 	jb	_P1_2,00114$
                           3299 ;	Peephole 300	removed redundant label 00132$
                           3300 ;	racing.c:308: if(car_dir>=6)				//The left corner is restricted to 6
                           3301 ;	genAssign
   09FD 90s00r00           3302 	mov	dptr,#_car_dir
   0A00 E0                 3303 	movx	a,@dptr
   0A01 FA                 3304 	mov	r2,a
   0A02 A3                 3305 	inc	dptr
   0A03 E0                 3306 	movx	a,@dptr
   0A04 FB                 3307 	mov	r3,a
                           3308 ;	genCmpLt
                           3309 ;	genCmp
   0A05 C3                 3310 	clr	c
   0A06 EA                 3311 	mov	a,r2
   0A07 94 06              3312 	subb	a,#0x06
   0A09 EB                 3313 	mov	a,r3
   0A0A 94 00              3314 	subb	a,#0x00
                           3315 ;	genIfxJump
                           3316 ;	Peephole 112.b	changed ljmp to sjmp
                           3317 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0A0C 40 0B              3318 	jc	00111$
                           3319 ;	Peephole 300	removed redundant label 00133$
                           3320 ;	racing.c:310: car_dir=6;				
                           3321 ;	genAssign
   0A0E 90s00r00           3322 	mov	dptr,#_car_dir
   0A11 74 06              3323 	mov	a,#0x06
   0A13 F0                 3324 	movx	@dptr,a
   0A14 E4                 3325 	clr	a
   0A15 A3                 3326 	inc	dptr
   0A16 F0                 3327 	movx	@dptr,a
                           3328 ;	Peephole 112.b	changed ljmp to sjmp
   0A17 80 22              3329 	sjmp	00114$
   0A19                    3330 00111$:
                           3331 ;	racing.c:314: car_dir++;
                           3332 ;	genPlus
   0A19 90s00r00           3333 	mov	dptr,#_car_dir
                           3334 ;     genPlusIncr
   0A1C 74 01              3335 	mov	a,#0x01
                           3336 ;	Peephole 236.a	used r2 instead of ar2
   0A1E 2A                 3337 	add	a,r2
   0A1F F0                 3338 	movx	@dptr,a
                           3339 ;	Peephole 181	changed mov to clr
   0A20 E4                 3340 	clr	a
                           3341 ;	Peephole 236.b	used r3 instead of ar3
   0A21 3B                 3342 	addc	a,r3
   0A22 A3                 3343 	inc	dptr
   0A23 F0                 3344 	movx	@dptr,a
                           3345 ;	racing.c:315: if(car_dir==3)		//Dividers are on column 3, so avoid it
                           3346 ;	genAssign
   0A24 90s00r00           3347 	mov	dptr,#_car_dir
   0A27 E0                 3348 	movx	a,@dptr
   0A28 FA                 3349 	mov	r2,a
   0A29 A3                 3350 	inc	dptr
   0A2A E0                 3351 	movx	a,@dptr
   0A2B FB                 3352 	mov	r3,a
                           3353 ;	genCmpEq
                           3354 ;	gencjneshort
                           3355 ;	Peephole 112.b	changed ljmp to sjmp
                           3356 ;	Peephole 198.a	optimized misc jump sequence
   0A2C BA 03 0C           3357 	cjne	r2,#0x03,00114$
   0A2F BB 00 09           3358 	cjne	r3,#0x00,00114$
                           3359 ;	Peephole 200.b	removed redundant sjmp
                           3360 ;	Peephole 300	removed redundant label 00134$
                           3361 ;	Peephole 300	removed redundant label 00135$
                           3362 ;	racing.c:316: car_dir=4;
                           3363 ;	genAssign
   0A32 90s00r00           3364 	mov	dptr,#_car_dir
   0A35 74 04              3365 	mov	a,#0x04
   0A37 F0                 3366 	movx	@dptr,a
   0A38 E4                 3367 	clr	a
   0A39 A3                 3368 	inc	dptr
   0A3A F0                 3369 	movx	@dptr,a
   0A3B                    3370 00114$:
                           3371 ;	racing.c:320: if(oldDir!=car_dir)				//If there is key press
                           3372 ;	genAssign
   0A3B 90s00r02           3373 	mov	dptr,#_refreshCarDir_oldDir_1_1
   0A3E E0                 3374 	movx	a,@dptr
   0A3F FA                 3375 	mov	r2,a
   0A40 A3                 3376 	inc	dptr
   0A41 E0                 3377 	movx	a,@dptr
   0A42 FB                 3378 	mov	r3,a
                           3379 ;	genAssign
   0A43 90s00r00           3380 	mov	dptr,#_car_dir
   0A46 E0                 3381 	movx	a,@dptr
   0A47 FC                 3382 	mov	r4,a
   0A48 A3                 3383 	inc	dptr
   0A49 E0                 3384 	movx	a,@dptr
   0A4A FD                 3385 	mov	r5,a
                           3386 ;	genCmpEq
                           3387 ;	gencjneshort
   0A4B EA                 3388 	mov	a,r2
   0A4C B5 04 06           3389 	cjne	a,ar4,00136$
   0A4F EB                 3390 	mov	a,r3
   0A50 B5 05 02           3391 	cjne	a,ar5,00136$
                           3392 ;	Peephole 112.b	changed ljmp to sjmp
   0A53 80 32              3393 	sjmp	00116$
   0A55                    3394 00136$:
                           3395 ;	racing.c:322: arena[15][oldDir] = code_byte_EMPTY;     //clear the old car data
                           3396 ;	genLeftShift
                           3397 ;	genLeftShiftLiteral
                           3398 ;	genlshTwo
   0A55 EB                 3399 	mov	a,r3
   0A56 CA                 3400 	xch	a,r2
   0A57 25 E0              3401 	add	a,acc
   0A59 CA                 3402 	xch	a,r2
   0A5A 33                 3403 	rlc	a
   0A5B FB                 3404 	mov	r3,a
                           3405 ;	genPlus
                           3406 ;	Peephole 236.g	used r2 instead of ar2
   0A5C EA                 3407 	mov	a,r2
   0A5D 24rF0              3408 	add	a,#(_arena + 0x00f0)
   0A5F F5 82              3409 	mov	dpl,a
                           3410 ;	Peephole 236.g	used r3 instead of ar3
   0A61 EB                 3411 	mov	a,r3
   0A62 34s00              3412 	addc	a,#((_arena + 0x00f0) >> 8)
   0A64 F5 83              3413 	mov	dph,a
                           3414 ;	genPointerSet
                           3415 ;     genFarPointerSet
                           3416 ;	Peephole 181	changed mov to clr
   0A66 E4                 3417 	clr	a
   0A67 F0                 3418 	movx	@dptr,a
   0A68 A3                 3419 	inc	dptr
                           3420 ;	Peephole 101	removed redundant mov
   0A69 F0                 3421 	movx	@dptr,a
                           3422 ;	racing.c:323: arena[15][car_dir] = code_byte_CAR;		//Write new car to that new location
                           3423 ;	genLeftShift
                           3424 ;	genLeftShiftLiteral
                           3425 ;	genlshTwo
   0A6A 8C 02              3426 	mov	ar2,r4
   0A6C ED                 3427 	mov	a,r5
   0A6D CA                 3428 	xch	a,r2
   0A6E 25 E0              3429 	add	a,acc
   0A70 CA                 3430 	xch	a,r2
   0A71 33                 3431 	rlc	a
   0A72 FB                 3432 	mov	r3,a
                           3433 ;	genPlus
                           3434 ;	Peephole 236.g	used r2 instead of ar2
   0A73 EA                 3435 	mov	a,r2
   0A74 24rF0              3436 	add	a,#(_arena + 0x00f0)
   0A76 F5 82              3437 	mov	dpl,a
                           3438 ;	Peephole 236.g	used r3 instead of ar3
   0A78 EB                 3439 	mov	a,r3
   0A79 34s00              3440 	addc	a,#((_arena + 0x00f0) >> 8)
   0A7B F5 83              3441 	mov	dph,a
                           3442 ;	genPointerSet
                           3443 ;     genFarPointerSet
   0A7D 74 4C              3444 	mov	a,#0x4C
   0A7F F0                 3445 	movx	@dptr,a
   0A80 A3                 3446 	inc	dptr
                           3447 ;	Peephole 181	changed mov to clr
   0A81 E4                 3448 	clr	a
   0A82 F0                 3449 	movx	@dptr,a
                           3450 ;	racing.c:325: return 1;							//return that car has moved
                           3451 ;	genRet
                           3452 ;	Peephole 182.b	used 16 bit load of dptr
   0A83 90 00 01           3453 	mov	dptr,#0x0001
                           3454 ;	Peephole 112.b	changed ljmp to sjmp
                           3455 ;	Peephole 251.b	replaced sjmp to ret with ret
   0A86 22                 3456 	ret
   0A87                    3457 00116$:
                           3458 ;	racing.c:329: arena[15][car_dir] = code_byte_CAR;		//Write car to original car location. This can be a default car loaction
                           3459 ;	genLeftShift
                           3460 ;	genLeftShiftLiteral
                           3461 ;	genlshTwo
   0A87 ED                 3462 	mov	a,r5
   0A88 CC                 3463 	xch	a,r4
   0A89 25 E0              3464 	add	a,acc
   0A8B CC                 3465 	xch	a,r4
   0A8C 33                 3466 	rlc	a
   0A8D FD                 3467 	mov	r5,a
                           3468 ;	genPlus
                           3469 ;	Peephole 236.g	used r4 instead of ar4
   0A8E EC                 3470 	mov	a,r4
   0A8F 24rF0              3471 	add	a,#(_arena + 0x00f0)
   0A91 F5 82              3472 	mov	dpl,a
                           3473 ;	Peephole 236.g	used r5 instead of ar5
   0A93 ED                 3474 	mov	a,r5
   0A94 34s00              3475 	addc	a,#((_arena + 0x00f0) >> 8)
   0A96 F5 83              3476 	mov	dph,a
                           3477 ;	genPointerSet
                           3478 ;     genFarPointerSet
   0A98 74 4C              3479 	mov	a,#0x4C
   0A9A F0                 3480 	movx	@dptr,a
   0A9B A3                 3481 	inc	dptr
                           3482 ;	Peephole 181	changed mov to clr
   0A9C E4                 3483 	clr	a
   0A9D F0                 3484 	movx	@dptr,a
                           3485 ;	racing.c:330: return 0;						//Return that car has not moved
                           3486 ;	genRet
                           3487 ;	Peephole 182.b	used 16 bit load of dptr
   0A9E 90 00 00           3488 	mov	dptr,#0x0000
                           3489 ;	Peephole 300	removed redundant label 00118$
   0AA1 22                 3490 	ret
                           3491 	.area CSEG    (CODE)
                           3492 	.area CONST   (CODE)
   0000                    3493 _RACING_BITMAP:
   0000 3C 00              3494 	.byte #0x3C,#0x00
   0002 42 00              3495 	.byte #0x42,#0x00
   0004 42 00              3496 	.byte #0x42,#0x00
   0006 3C 00              3497 	.byte #0x3C,#0x00
   0008 3C 00              3498 	.byte #0x3C,#0x00
   000A 24 00              3499 	.byte #0x24,#0x00
   000C 42 00              3500 	.byte #0x42,#0x00
   000E 7E 00              3501 	.byte #0x7E,#0x00
   0010 3C 00              3502 	.byte #0x3C,#0x00
   0012 42 00              3503 	.byte #0x42,#0x00
   0014 42 00              3504 	.byte #0x42,#0x00
   0016 3C 00              3505 	.byte #0x3C,#0x00
   0018 3C 00              3506 	.byte #0x3C,#0x00
   001A 24 00              3507 	.byte #0x24,#0x00
   001C 42 00              3508 	.byte #0x42,#0x00
   001E 7E 00              3509 	.byte #0x7E,#0x00
   0020 F0 00              3510 	.byte #0xF0,#0x00
   0022 F0 00              3511 	.byte #0xF0,#0x00
   0024 F0 00              3512 	.byte #0xF0,#0x00
   0026 F0 00              3513 	.byte #0xF0,#0x00
   0028 00 00              3514 	.byte #0x00,#0x00
   002A 00 00              3515 	.byte #0x00,#0x00
   002C 00 00              3516 	.byte #0x00,#0x00
   002E 00 00              3517 	.byte #0x00,#0x00
   0030 00 00              3518 	.byte #0x00,#0x00
   0032 00 00              3519 	.byte #0x00,#0x00
   0034 00 00              3520 	.byte #0x00,#0x00
   0036 00 00              3521 	.byte #0x00,#0x00
   0038 F0 00              3522 	.byte #0xF0,#0x00
   003A F0 00              3523 	.byte #0xF0,#0x00
   003C F0 00              3524 	.byte #0xF0,#0x00
   003E F0 00              3525 	.byte #0xF0,#0x00
   0040 FF 00              3526 	.byte #0xFF,#0x00
   0042 FF 00              3527 	.byte #0xFF,#0x00
   0044 FF 00              3528 	.byte #0xFF,#0x00
   0046 FF 00              3529 	.byte #0xFF,#0x00
   0048 FF 00              3530 	.byte #0xFF,#0x00
   004A FF 00              3531 	.byte #0xFF,#0x00
   004C FF 00              3532 	.byte #0xFF,#0x00
   004E FF 00              3533 	.byte #0xFF,#0x00
   0050                    3534 _BITMAP:
   0050 3C 00              3535 	.byte #0x3C,#0x00
   0052 24 00              3536 	.byte #0x24,#0x00
   0054 FF 00              3537 	.byte #0xFF,#0x00
   0056 A5 00              3538 	.byte #0xA5,#0x00
   0058 FF 00              3539 	.byte #0xFF,#0x00
   005A 24 00              3540 	.byte #0x24,#0x00
   005C 3C 00              3541 	.byte #0x3C,#0x00
   005E 00 00              3542 	.byte #0x00,#0x00
   0060 00 00              3543 	.byte #0x00,#0x00
   0062 00 00              3544 	.byte #0x00,#0x00
   0064 EE 00              3545 	.byte #0xEE,#0x00
   0066 EE 00              3546 	.byte #0xEE,#0x00
   0068 77 00              3547 	.byte #0x77,#0x00
   006A 77 00              3548 	.byte #0x77,#0x00
   006C 00 00              3549 	.byte #0x00,#0x00
   006E 00 00              3550 	.byte #0x00,#0x00
   0070 0C 00              3551 	.byte #0x0C,#0x00
   0072 3C 00              3552 	.byte #0x3C,#0x00
   0074 3C 00              3553 	.byte #0x3C,#0x00
   0076 30 00              3554 	.byte #0x30,#0x00
   0078 0C 00              3555 	.byte #0x0C,#0x00
   007A 3C 00              3556 	.byte #0x3C,#0x00
   007C 3C 00              3557 	.byte #0x3C,#0x00
   007E 30 00              3558 	.byte #0x30,#0x00
   0080 0C 00              3559 	.byte #0x0C,#0x00
   0082 3C 00              3560 	.byte #0x3C,#0x00
   0084 FC 00              3561 	.byte #0xFC,#0x00
   0086 E8 00              3562 	.byte #0xE8,#0x00
   0088 78 00              3563 	.byte #0x78,#0x00
   008A 60 00              3564 	.byte #0x60,#0x00
   008C 00 00              3565 	.byte #0x00,#0x00
   008E 00 00              3566 	.byte #0x00,#0x00
   0090 0C 00              3567 	.byte #0x0C,#0x00
   0092 3C 00              3568 	.byte #0x3C,#0x00
   0094 3E 00              3569 	.byte #0x3E,#0x00
   0096 16 00              3570 	.byte #0x16,#0x00
   0098 1F 00              3571 	.byte #0x1F,#0x00
   009A 07 00              3572 	.byte #0x07,#0x00
   009C 00 00              3573 	.byte #0x00,#0x00
   009E 00 00              3574 	.byte #0x00,#0x00
   00A0 00 00              3575 	.byte #0x00,#0x00
   00A2 00 00              3576 	.byte #0x00,#0x00
   00A4 06 00              3577 	.byte #0x06,#0x00
   00A6 1E 00              3578 	.byte #0x1E,#0x00
   00A8 17 00              3579 	.byte #0x17,#0x00
   00AA 3F 00              3580 	.byte #0x3F,#0x00
   00AC 3C 00              3581 	.byte #0x3C,#0x00
   00AE 30 00              3582 	.byte #0x30,#0x00
   00B0 00 00              3583 	.byte #0x00,#0x00
   00B2 00 00              3584 	.byte #0x00,#0x00
   00B4 E0 00              3585 	.byte #0xE0,#0x00
   00B6 F8 00              3586 	.byte #0xF8,#0x00
   00B8 68 00              3587 	.byte #0x68,#0x00
   00BA 7C 00              3588 	.byte #0x7C,#0x00
   00BC 3C 00              3589 	.byte #0x3C,#0x00
   00BE 30 00              3590 	.byte #0x30,#0x00
   00C0 00 00              3591 	.byte #0x00,#0x00
   00C2 70 00              3592 	.byte #0x70,#0x00
   00C4 9E 00              3593 	.byte #0x9E,#0x00
   00C6 FE 00              3594 	.byte #0xFE,#0x00
   00C8 FF 00              3595 	.byte #0xFF,#0x00
   00CA 9F 00              3596 	.byte #0x9F,#0x00
   00CC 70 00              3597 	.byte #0x70,#0x00
   00CE 00 00              3598 	.byte #0x00,#0x00
   00D0 3C 00              3599 	.byte #0x3C,#0x00
   00D2 5A 00              3600 	.byte #0x5A,#0x00
   00D4 5A 00              3601 	.byte #0x5A,#0x00
   00D6 7E 00              3602 	.byte #0x7E,#0x00
   00D8 3C 00              3603 	.byte #0x3C,#0x00
   00DA 3C 00              3604 	.byte #0x3C,#0x00
   00DC 3C 00              3605 	.byte #0x3C,#0x00
   00DE 30 00              3606 	.byte #0x30,#0x00
   00E0 00 00              3607 	.byte #0x00,#0x00
   00E2 0E 00              3608 	.byte #0x0E,#0x00
   00E4 F9 00              3609 	.byte #0xF9,#0x00
   00E6 FF 00              3610 	.byte #0xFF,#0x00
   00E8 7F 00              3611 	.byte #0x7F,#0x00
   00EA 79 00              3612 	.byte #0x79,#0x00
   00EC 0E 00              3613 	.byte #0x0E,#0x00
   00EE 00 00              3614 	.byte #0x00,#0x00
   00F0 0C 00              3615 	.byte #0x0C,#0x00
   00F2 3C 00              3616 	.byte #0x3C,#0x00
   00F4 3C 00              3617 	.byte #0x3C,#0x00
   00F6 3C 00              3618 	.byte #0x3C,#0x00
   00F8 7E 00              3619 	.byte #0x7E,#0x00
   00FA 5A 00              3620 	.byte #0x5A,#0x00
   00FC 5A 00              3621 	.byte #0x5A,#0x00
   00FE 3C 00              3622 	.byte #0x3C,#0x00
   0100 00 00              3623 	.byte #0x00,#0x00
   0102 00 00              3624 	.byte #0x00,#0x00
   0104 2E 00              3625 	.byte #0x2E,#0x00
   0106 EE 00              3626 	.byte #0xEE,#0x00
   0108 F7 00              3627 	.byte #0xF7,#0x00
   010A 37 00              3628 	.byte #0x37,#0x00
   010C 00 00              3629 	.byte #0x00,#0x00
   010E 00 00              3630 	.byte #0x00,#0x00
   0110 18 00              3631 	.byte #0x18,#0x00
   0112 18 00              3632 	.byte #0x18,#0x00
   0114 3C 00              3633 	.byte #0x3C,#0x00
   0116 30 00              3634 	.byte #0x30,#0x00
   0118 0C 00              3635 	.byte #0x0C,#0x00
   011A 3C 00              3636 	.byte #0x3C,#0x00
   011C 3C 00              3637 	.byte #0x3C,#0x00
   011E 30 00              3638 	.byte #0x30,#0x00
   0120 00 00              3639 	.byte #0x00,#0x00
   0122 00 00              3640 	.byte #0x00,#0x00
   0124 EC 00              3641 	.byte #0xEC,#0x00
   0126 EF 00              3642 	.byte #0xEF,#0x00
   0128 77 00              3643 	.byte #0x77,#0x00
   012A 74 00              3644 	.byte #0x74,#0x00
   012C 00 00              3645 	.byte #0x00,#0x00
   012E 00 00              3646 	.byte #0x00,#0x00
   0130 0C 00              3647 	.byte #0x0C,#0x00
   0132 3C 00              3648 	.byte #0x3C,#0x00
   0134 3C 00              3649 	.byte #0x3C,#0x00
   0136 30 00              3650 	.byte #0x30,#0x00
   0138 0C 00              3651 	.byte #0x0C,#0x00
   013A 3C 00              3652 	.byte #0x3C,#0x00
   013C 18 00              3653 	.byte #0x18,#0x00
   013E 18 00              3654 	.byte #0x18,#0x00
   0140                    3655 _SCORE:
   0140 FF 00              3656 	.byte #0xFF,#0x00
   0142 81 00              3657 	.byte #0x81,#0x00
   0144 81 00              3658 	.byte #0x81,#0x00
   0146 FF 00              3659 	.byte #0xFF,#0x00
   0148 00 00              3660 	.byte #0x00,#0x00
   014A FF 00              3661 	.byte #0xFF,#0x00
   014C FF 00              3662 	.byte #0xFF,#0x00
   014E 00 00              3663 	.byte #0x00,#0x00
   0150 F1 00              3664 	.byte #0xF1,#0x00
   0152 91 00              3665 	.byte #0x91,#0x00
   0154 91 00              3666 	.byte #0x91,#0x00
   0156 8F 00              3667 	.byte #0x8F,#0x00
   0158 91 00              3668 	.byte #0x91,#0x00
   015A 91 00              3669 	.byte #0x91,#0x00
   015C 91 00              3670 	.byte #0x91,#0x00
   015E FF 00              3671 	.byte #0xFF,#0x00
   0160 0F 00              3672 	.byte #0x0F,#0x00
   0162 08 00              3673 	.byte #0x08,#0x00
   0164 08 00              3674 	.byte #0x08,#0x00
   0166 FF 00              3675 	.byte #0xFF,#0x00
   0168 8F 00              3676 	.byte #0x8F,#0x00
   016A 91 00              3677 	.byte #0x91,#0x00
   016C 91 00              3678 	.byte #0x91,#0x00
   016E F1 00              3679 	.byte #0xF1,#0x00
   0170 FF 00              3680 	.byte #0xFF,#0x00
   0172 99 00              3681 	.byte #0x99,#0x00
   0174 99 00              3682 	.byte #0x99,#0x00
   0176 F9 00              3683 	.byte #0xF9,#0x00
   0178 11 00              3684 	.byte #0x11,#0x00
   017A 11 00              3685 	.byte #0x11,#0x00
   017C 11 00              3686 	.byte #0x11,#0x00
   017E FF 00              3687 	.byte #0xFF,#0x00
   0180 FF 00              3688 	.byte #0xFF,#0x00
   0182 99 00              3689 	.byte #0x99,#0x00
   0184 99 00              3690 	.byte #0x99,#0x00
   0186 FF 00              3691 	.byte #0xFF,#0x00
   0188 1F 00              3692 	.byte #0x1F,#0x00
   018A 91 00              3693 	.byte #0x91,#0x00
   018C 91 00              3694 	.byte #0x91,#0x00
   018E FF 00              3695 	.byte #0xFF,#0x00
                           3696 	.area XINIT   (CODE)
