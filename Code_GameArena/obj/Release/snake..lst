                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : FreeWare ANSI-C Compiler
                              3 ; Version 2.6.0 #4309 (Jul 28 2006)
                              4 ; This file generated Fri Dec 09 17:15:36 2016
                              5 ;--------------------------------------------------------
                              6 	.module snake
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _SCORE
                             13 	.globl _BITMAP
                             14 	.globl _RACING_BITMAP
                             15 	.globl _P5_7
                             16 	.globl _P5_6
                             17 	.globl _P5_5
                             18 	.globl _P5_4
                             19 	.globl _P5_3
                             20 	.globl _P5_2
                             21 	.globl _P5_1
                             22 	.globl _P5_0
                             23 	.globl _P4_7
                             24 	.globl _P4_6
                             25 	.globl _P4_5
                             26 	.globl _P4_4
                             27 	.globl _P4_3
                             28 	.globl _P4_2
                             29 	.globl _P4_1
                             30 	.globl _P4_0
                             31 	.globl _PX0L
                             32 	.globl _PT0L
                             33 	.globl _PX1L
                             34 	.globl _PT1L
                             35 	.globl _PLS
                             36 	.globl _PT2L
                             37 	.globl _PPCL
                             38 	.globl _EC
                             39 	.globl _CCF0
                             40 	.globl _CCF1
                             41 	.globl _CCF2
                             42 	.globl _CCF3
                             43 	.globl _CCF4
                             44 	.globl _CR
                             45 	.globl _CF
                             46 	.globl _TF2
                             47 	.globl _EXF2
                             48 	.globl _RCLK
                             49 	.globl _TCLK
                             50 	.globl _EXEN2
                             51 	.globl _TR2
                             52 	.globl _C_T2
                             53 	.globl _CP_RL2
                             54 	.globl _T2CON_7
                             55 	.globl _T2CON_6
                             56 	.globl _T2CON_5
                             57 	.globl _T2CON_4
                             58 	.globl _T2CON_3
                             59 	.globl _T2CON_2
                             60 	.globl _T2CON_1
                             61 	.globl _T2CON_0
                             62 	.globl _PT2
                             63 	.globl _ET2
                             64 	.globl _CY
                             65 	.globl _AC
                             66 	.globl _F0
                             67 	.globl _RS1
                             68 	.globl _RS0
                             69 	.globl _OV
                             70 	.globl _F1
                             71 	.globl _P
                             72 	.globl _PS
                             73 	.globl _PT1
                             74 	.globl _PX1
                             75 	.globl _PT0
                             76 	.globl _PX0
                             77 	.globl _RD
                             78 	.globl _WR
                             79 	.globl _T1
                             80 	.globl _T0
                             81 	.globl _INT1
                             82 	.globl _INT0
                             83 	.globl _TXD
                             84 	.globl _RXD
                             85 	.globl _P3_7
                             86 	.globl _P3_6
                             87 	.globl _P3_5
                             88 	.globl _P3_4
                             89 	.globl _P3_3
                             90 	.globl _P3_2
                             91 	.globl _P3_1
                             92 	.globl _P3_0
                             93 	.globl _EA
                             94 	.globl _ES
                             95 	.globl _ET1
                             96 	.globl _EX1
                             97 	.globl _ET0
                             98 	.globl _EX0
                             99 	.globl _P2_7
                            100 	.globl _P2_6
                            101 	.globl _P2_5
                            102 	.globl _P2_4
                            103 	.globl _P2_3
                            104 	.globl _P2_2
                            105 	.globl _P2_1
                            106 	.globl _P2_0
                            107 	.globl _SM0
                            108 	.globl _SM1
                            109 	.globl _SM2
                            110 	.globl _REN
                            111 	.globl _TB8
                            112 	.globl _RB8
                            113 	.globl _TI
                            114 	.globl _RI
                            115 	.globl _P1_7
                            116 	.globl _P1_6
                            117 	.globl _P1_5
                            118 	.globl _P1_4
                            119 	.globl _P1_3
                            120 	.globl _P1_2
                            121 	.globl _P1_1
                            122 	.globl _P1_0
                            123 	.globl _TF1
                            124 	.globl _TR1
                            125 	.globl _TF0
                            126 	.globl _TR0
                            127 	.globl _IE1
                            128 	.globl _IT1
                            129 	.globl _IE0
                            130 	.globl _IT0
                            131 	.globl _P0_7
                            132 	.globl _P0_6
                            133 	.globl _P0_5
                            134 	.globl _P0_4
                            135 	.globl _P0_3
                            136 	.globl _P0_2
                            137 	.globl _P0_1
                            138 	.globl _P0_0
                            139 	.globl _EECON
                            140 	.globl _KBF
                            141 	.globl _KBE
                            142 	.globl _KBLS
                            143 	.globl _BRL
                            144 	.globl _BDRCON
                            145 	.globl _T2MOD
                            146 	.globl _SPDAT
                            147 	.globl _SPSTA
                            148 	.globl _SPCON
                            149 	.globl _SADEN
                            150 	.globl _SADDR
                            151 	.globl _WDTPRG
                            152 	.globl _WDTRST
                            153 	.globl _P5
                            154 	.globl _P4
                            155 	.globl _IPH1
                            156 	.globl _IPL1
                            157 	.globl _IPH0
                            158 	.globl _IPL0
                            159 	.globl _IEN1
                            160 	.globl _IEN0
                            161 	.globl _CMOD
                            162 	.globl _CL
                            163 	.globl _CH
                            164 	.globl _CCON
                            165 	.globl _CCAPM4
                            166 	.globl _CCAPM3
                            167 	.globl _CCAPM2
                            168 	.globl _CCAPM1
                            169 	.globl _CCAPM0
                            170 	.globl _CCAP4L
                            171 	.globl _CCAP3L
                            172 	.globl _CCAP2L
                            173 	.globl _CCAP1L
                            174 	.globl _CCAP0L
                            175 	.globl _CCAP4H
                            176 	.globl _CCAP3H
                            177 	.globl _CCAP2H
                            178 	.globl _CCAP1H
                            179 	.globl _CCAP0H
                            180 	.globl _CKCKON1
                            181 	.globl _CKCKON0
                            182 	.globl _CKRL
                            183 	.globl _AUXR1
                            184 	.globl _AUXR
                            185 	.globl _TH2
                            186 	.globl _TL2
                            187 	.globl _RCAP2H
                            188 	.globl _RCAP2L
                            189 	.globl _T2CON
                            190 	.globl _B
                            191 	.globl _ACC
                            192 	.globl _PSW
                            193 	.globl _IP
                            194 	.globl _P3
                            195 	.globl _IE
                            196 	.globl _P2
                            197 	.globl _SBUF
                            198 	.globl _SCON
                            199 	.globl _P1
                            200 	.globl _TH1
                            201 	.globl _TH0
                            202 	.globl _TL1
                            203 	.globl _TL0
                            204 	.globl _TMOD
                            205 	.globl _TCON
                            206 	.globl _PCON
                            207 	.globl _DPH
                            208 	.globl _DPL
                            209 	.globl _SP
                            210 	.globl _P0
                            211 	.globl _snakeBitmapOffset_PARM_2
                            212 	.globl __Randseed
                            213 	.globl _rand
                            214 	.globl _srand
                            215 	.globl _put_food
                            216 	.globl _snakeBitmapOffset
                            217 	.globl _glcdUpdate
                            218 	.globl _move_snake
                            219 	.globl _refreshSnakeDir
                            220 ;--------------------------------------------------------
                            221 ; special function registers
                            222 ;--------------------------------------------------------
                            223 	.area RSEG    (DATA)
                    0080    224 _P0	=	0x0080
                    0081    225 _SP	=	0x0081
                    0082    226 _DPL	=	0x0082
                    0083    227 _DPH	=	0x0083
                    0087    228 _PCON	=	0x0087
                    0088    229 _TCON	=	0x0088
                    0089    230 _TMOD	=	0x0089
                    008A    231 _TL0	=	0x008a
                    008B    232 _TL1	=	0x008b
                    008C    233 _TH0	=	0x008c
                    008D    234 _TH1	=	0x008d
                    0090    235 _P1	=	0x0090
                    0098    236 _SCON	=	0x0098
                    0099    237 _SBUF	=	0x0099
                    00A0    238 _P2	=	0x00a0
                    00A8    239 _IE	=	0x00a8
                    00B0    240 _P3	=	0x00b0
                    00B8    241 _IP	=	0x00b8
                    00D0    242 _PSW	=	0x00d0
                    00E0    243 _ACC	=	0x00e0
                    00F0    244 _B	=	0x00f0
                    00C8    245 _T2CON	=	0x00c8
                    00CA    246 _RCAP2L	=	0x00ca
                    00CB    247 _RCAP2H	=	0x00cb
                    00CC    248 _TL2	=	0x00cc
                    00CD    249 _TH2	=	0x00cd
                    008E    250 _AUXR	=	0x008e
                    00A2    251 _AUXR1	=	0x00a2
                    0097    252 _CKRL	=	0x0097
                    008F    253 _CKCKON0	=	0x008f
                    008F    254 _CKCKON1	=	0x008f
                    00FA    255 _CCAP0H	=	0x00fa
                    00FB    256 _CCAP1H	=	0x00fb
                    00FC    257 _CCAP2H	=	0x00fc
                    00FD    258 _CCAP3H	=	0x00fd
                    00FE    259 _CCAP4H	=	0x00fe
                    00EA    260 _CCAP0L	=	0x00ea
                    00EB    261 _CCAP1L	=	0x00eb
                    00EC    262 _CCAP2L	=	0x00ec
                    00ED    263 _CCAP3L	=	0x00ed
                    00EE    264 _CCAP4L	=	0x00ee
                    00DA    265 _CCAPM0	=	0x00da
                    00DB    266 _CCAPM1	=	0x00db
                    00DC    267 _CCAPM2	=	0x00dc
                    00DD    268 _CCAPM3	=	0x00dd
                    00DE    269 _CCAPM4	=	0x00de
                    00D8    270 _CCON	=	0x00d8
                    00F9    271 _CH	=	0x00f9
                    00E9    272 _CL	=	0x00e9
                    00D9    273 _CMOD	=	0x00d9
                    00A8    274 _IEN0	=	0x00a8
                    00B1    275 _IEN1	=	0x00b1
                    00B8    276 _IPL0	=	0x00b8
                    00B7    277 _IPH0	=	0x00b7
                    00B2    278 _IPL1	=	0x00b2
                    00B3    279 _IPH1	=	0x00b3
                    00C0    280 _P4	=	0x00c0
                    00D8    281 _P5	=	0x00d8
                    00A6    282 _WDTRST	=	0x00a6
                    00A7    283 _WDTPRG	=	0x00a7
                    00A9    284 _SADDR	=	0x00a9
                    00B9    285 _SADEN	=	0x00b9
                    00C3    286 _SPCON	=	0x00c3
                    00C4    287 _SPSTA	=	0x00c4
                    00C5    288 _SPDAT	=	0x00c5
                    00C9    289 _T2MOD	=	0x00c9
                    009B    290 _BDRCON	=	0x009b
                    009A    291 _BRL	=	0x009a
                    009C    292 _KBLS	=	0x009c
                    009D    293 _KBE	=	0x009d
                    009E    294 _KBF	=	0x009e
                    00D2    295 _EECON	=	0x00d2
                            296 ;--------------------------------------------------------
                            297 ; special function bits
                            298 ;--------------------------------------------------------
                            299 	.area RSEG    (DATA)
                    0080    300 _P0_0	=	0x0080
                    0081    301 _P0_1	=	0x0081
                    0082    302 _P0_2	=	0x0082
                    0083    303 _P0_3	=	0x0083
                    0084    304 _P0_4	=	0x0084
                    0085    305 _P0_5	=	0x0085
                    0086    306 _P0_6	=	0x0086
                    0087    307 _P0_7	=	0x0087
                    0088    308 _IT0	=	0x0088
                    0089    309 _IE0	=	0x0089
                    008A    310 _IT1	=	0x008a
                    008B    311 _IE1	=	0x008b
                    008C    312 _TR0	=	0x008c
                    008D    313 _TF0	=	0x008d
                    008E    314 _TR1	=	0x008e
                    008F    315 _TF1	=	0x008f
                    0090    316 _P1_0	=	0x0090
                    0091    317 _P1_1	=	0x0091
                    0092    318 _P1_2	=	0x0092
                    0093    319 _P1_3	=	0x0093
                    0094    320 _P1_4	=	0x0094
                    0095    321 _P1_5	=	0x0095
                    0096    322 _P1_6	=	0x0096
                    0097    323 _P1_7	=	0x0097
                    0098    324 _RI	=	0x0098
                    0099    325 _TI	=	0x0099
                    009A    326 _RB8	=	0x009a
                    009B    327 _TB8	=	0x009b
                    009C    328 _REN	=	0x009c
                    009D    329 _SM2	=	0x009d
                    009E    330 _SM1	=	0x009e
                    009F    331 _SM0	=	0x009f
                    00A0    332 _P2_0	=	0x00a0
                    00A1    333 _P2_1	=	0x00a1
                    00A2    334 _P2_2	=	0x00a2
                    00A3    335 _P2_3	=	0x00a3
                    00A4    336 _P2_4	=	0x00a4
                    00A5    337 _P2_5	=	0x00a5
                    00A6    338 _P2_6	=	0x00a6
                    00A7    339 _P2_7	=	0x00a7
                    00A8    340 _EX0	=	0x00a8
                    00A9    341 _ET0	=	0x00a9
                    00AA    342 _EX1	=	0x00aa
                    00AB    343 _ET1	=	0x00ab
                    00AC    344 _ES	=	0x00ac
                    00AF    345 _EA	=	0x00af
                    00B0    346 _P3_0	=	0x00b0
                    00B1    347 _P3_1	=	0x00b1
                    00B2    348 _P3_2	=	0x00b2
                    00B3    349 _P3_3	=	0x00b3
                    00B4    350 _P3_4	=	0x00b4
                    00B5    351 _P3_5	=	0x00b5
                    00B6    352 _P3_6	=	0x00b6
                    00B7    353 _P3_7	=	0x00b7
                    00B0    354 _RXD	=	0x00b0
                    00B1    355 _TXD	=	0x00b1
                    00B2    356 _INT0	=	0x00b2
                    00B3    357 _INT1	=	0x00b3
                    00B4    358 _T0	=	0x00b4
                    00B5    359 _T1	=	0x00b5
                    00B6    360 _WR	=	0x00b6
                    00B7    361 _RD	=	0x00b7
                    00B8    362 _PX0	=	0x00b8
                    00B9    363 _PT0	=	0x00b9
                    00BA    364 _PX1	=	0x00ba
                    00BB    365 _PT1	=	0x00bb
                    00BC    366 _PS	=	0x00bc
                    00D0    367 _P	=	0x00d0
                    00D1    368 _F1	=	0x00d1
                    00D2    369 _OV	=	0x00d2
                    00D3    370 _RS0	=	0x00d3
                    00D4    371 _RS1	=	0x00d4
                    00D5    372 _F0	=	0x00d5
                    00D6    373 _AC	=	0x00d6
                    00D7    374 _CY	=	0x00d7
                    00AD    375 _ET2	=	0x00ad
                    00BD    376 _PT2	=	0x00bd
                    00C8    377 _T2CON_0	=	0x00c8
                    00C9    378 _T2CON_1	=	0x00c9
                    00CA    379 _T2CON_2	=	0x00ca
                    00CB    380 _T2CON_3	=	0x00cb
                    00CC    381 _T2CON_4	=	0x00cc
                    00CD    382 _T2CON_5	=	0x00cd
                    00CE    383 _T2CON_6	=	0x00ce
                    00CF    384 _T2CON_7	=	0x00cf
                    00C8    385 _CP_RL2	=	0x00c8
                    00C9    386 _C_T2	=	0x00c9
                    00CA    387 _TR2	=	0x00ca
                    00CB    388 _EXEN2	=	0x00cb
                    00CC    389 _TCLK	=	0x00cc
                    00CD    390 _RCLK	=	0x00cd
                    00CE    391 _EXF2	=	0x00ce
                    00CF    392 _TF2	=	0x00cf
                    00DF    393 _CF	=	0x00df
                    00DE    394 _CR	=	0x00de
                    00DC    395 _CCF4	=	0x00dc
                    00DB    396 _CCF3	=	0x00db
                    00DA    397 _CCF2	=	0x00da
                    00D9    398 _CCF1	=	0x00d9
                    00D8    399 _CCF0	=	0x00d8
                    00AE    400 _EC	=	0x00ae
                    00BE    401 _PPCL	=	0x00be
                    00BD    402 _PT2L	=	0x00bd
                    00BC    403 _PLS	=	0x00bc
                    00BB    404 _PT1L	=	0x00bb
                    00BA    405 _PX1L	=	0x00ba
                    00B9    406 _PT0L	=	0x00b9
                    00B8    407 _PX0L	=	0x00b8
                    00C0    408 _P4_0	=	0x00c0
                    00C1    409 _P4_1	=	0x00c1
                    00C2    410 _P4_2	=	0x00c2
                    00C3    411 _P4_3	=	0x00c3
                    00C4    412 _P4_4	=	0x00c4
                    00C5    413 _P4_5	=	0x00c5
                    00C6    414 _P4_6	=	0x00c6
                    00C7    415 _P4_7	=	0x00c7
                    00D8    416 _P5_0	=	0x00d8
                    00D9    417 _P5_1	=	0x00d9
                    00DA    418 _P5_2	=	0x00da
                    00DB    419 _P5_3	=	0x00db
                    00DC    420 _P5_4	=	0x00dc
                    00DD    421 _P5_5	=	0x00dd
                    00DE    422 _P5_6	=	0x00de
                    00DF    423 _P5_7	=	0x00df
                            424 ;--------------------------------------------------------
                            425 ; overlayable register banks
                            426 ;--------------------------------------------------------
                            427 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     428 	.ds 8
                            429 ;--------------------------------------------------------
                            430 ; internal ram data
                            431 ;--------------------------------------------------------
                            432 	.area DSEG    (DATA)
   0000                     433 _glcdUpdate_sloc0_1_0:
   0000                     434 	.ds 2
   0002                     435 _glcdUpdate_sloc1_1_0:
   0002                     436 	.ds 2
   0004                     437 _glcdUpdate_sloc2_1_0:
   0004                     438 	.ds 2
                            439 ;--------------------------------------------------------
                            440 ; overlayable items in internal ram 
                            441 ;--------------------------------------------------------
                            442 	.area	OSEG    (OVR,DATA)
   0000                     443 _snakeBitmapOffset_sloc0_1_0::
   0000                     444 	.ds 2
                            445 	.area	OSEG    (OVR,DATA)
   0000                     446 _move_snake_sloc0_1_0::
   0000                     447 	.ds 2
   0002                     448 _move_snake_sloc1_1_0::
   0002                     449 	.ds 2
   0004                     450 _move_snake_sloc2_1_0::
   0004                     451 	.ds 2
   0006                     452 _move_snake_sloc3_1_0::
   0006                     453 	.ds 2
   0008                     454 _move_snake_sloc4_1_0::
   0008                     455 	.ds 1
                            456 ;--------------------------------------------------------
                            457 ; indirectly addressable internal ram data
                            458 ;--------------------------------------------------------
                            459 	.area ISEG    (DATA)
                            460 ;--------------------------------------------------------
                            461 ; bit data
                            462 ;--------------------------------------------------------
                            463 	.area BSEG    (BIT)
                            464 ;--------------------------------------------------------
                            465 ; paged external ram data
                            466 ;--------------------------------------------------------
                            467 	.area PSEG    (PAG,XDATA)
                            468 ;--------------------------------------------------------
                            469 ; external ram data
                            470 ;--------------------------------------------------------
                            471 	.area XSEG    (XDATA)
   0000                     472 __Randseed::
   0000                     473 	.ds 4
   0004                     474 _srand_seed_1_1:
   0004                     475 	.ds 4
   0008                     476 _snakeBitmapOffset_PARM_2:
   0008                     477 	.ds 2
   000A                     478 _snakeBitmapOffset_x_1_1:
   000A                     479 	.ds 2
   000C                     480 _glcdUpdate_code_byte_1_1:
   000C                     481 	.ds 2
   000E                     482 _move_snake_head_x_1_1:
   000E                     483 	.ds 2
   0010                     484 _move_snake_head_y_1_1:
   0010                     485 	.ds 2
   0012                     486 _refreshSnakeDir_oldDir_1_1:
   0012                     487 	.ds 2
                            488 ;--------------------------------------------------------
                            489 ; external initialized ram data
                            490 ;--------------------------------------------------------
                            491 	.area XISEG   (XDATA)
                            492 	.area HOME    (CODE)
                            493 	.area GSINIT0 (CODE)
                            494 	.area GSINIT1 (CODE)
                            495 	.area GSINIT2 (CODE)
                            496 	.area GSINIT3 (CODE)
                            497 	.area GSINIT4 (CODE)
                            498 	.area GSINIT5 (CODE)
                            499 	.area GSINIT  (CODE)
                            500 	.area GSFINAL (CODE)
                            501 	.area CSEG    (CODE)
                            502 ;--------------------------------------------------------
                            503 ; global & static initialisations
                            504 ;--------------------------------------------------------
                            505 	.area HOME    (CODE)
                            506 	.area GSINIT  (CODE)
                            507 	.area GSFINAL (CODE)
                            508 	.area GSINIT  (CODE)
                            509 ;--------------------------------------------------------
                            510 ; Home
                            511 ;--------------------------------------------------------
                            512 	.area HOME    (CODE)
                            513 	.area CSEG    (CODE)
                            514 ;--------------------------------------------------------
                            515 ; code
                            516 ;--------------------------------------------------------
                            517 	.area CSEG    (CODE)
                            518 ;------------------------------------------------------------
                            519 ;Allocation info for local variables in function 'rand'
                            520 ;------------------------------------------------------------
                            521 ;------------------------------------------------------------
                            522 ;	snake.c:34: unsigned int rand(void) {
                            523 ;	-----------------------------------------
                            524 ;	 function rand
                            525 ;	-----------------------------------------
   0000                     526 _rand:
                    0002    527 	ar2 = 0x02
                    0003    528 	ar3 = 0x03
                    0004    529 	ar4 = 0x04
                    0005    530 	ar5 = 0x05
                    0006    531 	ar6 = 0x06
                    0007    532 	ar7 = 0x07
                    0000    533 	ar0 = 0x00
                    0001    534 	ar1 = 0x01
                            535 ;	snake.c:35: _Randseed = _Randseed * 1103515245 + 12345;
                            536 ;	genAssign
   0000 90s00r00            537 	mov	dptr,#__Randseed
   0003 E0                  538 	movx	a,@dptr
   0004 FA                  539 	mov	r2,a
   0005 A3                  540 	inc	dptr
   0006 E0                  541 	movx	a,@dptr
   0007 FB                  542 	mov	r3,a
   0008 A3                  543 	inc	dptr
   0009 E0                  544 	movx	a,@dptr
   000A FC                  545 	mov	r4,a
   000B A3                  546 	inc	dptr
   000C E0                  547 	movx	a,@dptr
   000D FD                  548 	mov	r5,a
                            549 ;	genAssign
   000E 90s00r00            550 	mov	dptr,#__mullong_PARM_2
   0011 74 6D               551 	mov	a,#0x6D
   0013 F0                  552 	movx	@dptr,a
   0014 A3                  553 	inc	dptr
   0015 74 4E               554 	mov	a,#0x4E
   0017 F0                  555 	movx	@dptr,a
   0018 A3                  556 	inc	dptr
   0019 74 C6               557 	mov	a,#0xC6
   001B F0                  558 	movx	@dptr,a
   001C A3                  559 	inc	dptr
   001D 74 41               560 	mov	a,#0x41
   001F F0                  561 	movx	@dptr,a
                            562 ;	genCall
   0020 8A 82               563 	mov	dpl,r2
   0022 8B 83               564 	mov	dph,r3
   0024 8C F0               565 	mov	b,r4
   0026 ED                  566 	mov	a,r5
   0027 12s00r00            567 	lcall	__mullong
   002A AA 82               568 	mov	r2,dpl
   002C AB 83               569 	mov	r3,dph
   002E AC F0               570 	mov	r4,b
   0030 FD                  571 	mov	r5,a
                            572 ;	genPlus
   0031 90s00r00            573 	mov	dptr,#__Randseed
                            574 ;     genPlusIncr
   0034 74 39               575 	mov	a,#0x39
                            576 ;	Peephole 236.a	used r2 instead of ar2
   0036 2A                  577 	add	a,r2
   0037 F0                  578 	movx	@dptr,a
   0038 74 30               579 	mov	a,#0x30
                            580 ;	Peephole 236.b	used r3 instead of ar3
   003A 3B                  581 	addc	a,r3
   003B A3                  582 	inc	dptr
   003C F0                  583 	movx	@dptr,a
                            584 ;	Peephole 181	changed mov to clr
   003D E4                  585 	clr	a
                            586 ;	Peephole 236.b	used r4 instead of ar4
   003E 3C                  587 	addc	a,r4
   003F A3                  588 	inc	dptr
   0040 F0                  589 	movx	@dptr,a
                            590 ;	Peephole 181	changed mov to clr
   0041 E4                  591 	clr	a
                            592 ;	Peephole 236.b	used r5 instead of ar5
   0042 3D                  593 	addc	a,r5
   0043 A3                  594 	inc	dptr
   0044 F0                  595 	movx	@dptr,a
                            596 ;	snake.c:36: return ((unsigned int)(_Randseed >> 16) );
                            597 ;	genAssign
   0045 90s00r00            598 	mov	dptr,#__Randseed
   0048 E0                  599 	movx	a,@dptr
   0049 FA                  600 	mov	r2,a
   004A A3                  601 	inc	dptr
   004B E0                  602 	movx	a,@dptr
   004C FB                  603 	mov	r3,a
   004D A3                  604 	inc	dptr
   004E E0                  605 	movx	a,@dptr
   004F FC                  606 	mov	r4,a
   0050 A3                  607 	inc	dptr
   0051 E0                  608 	movx	a,@dptr
   0052 FD                  609 	mov	r5,a
                            610 ;	genGetWord
   0053 8C 02               611 	mov	ar2,r4
   0055 8D 03               612 	mov	ar3,r5
                            613 ;	genRet
   0057 8A 82               614 	mov	dpl,r2
   0059 8B 83               615 	mov	dph,r3
                            616 ;	Peephole 300	removed redundant label 00101$
   005B 22                  617 	ret
                            618 ;------------------------------------------------------------
                            619 ;Allocation info for local variables in function 'srand'
                            620 ;------------------------------------------------------------
                            621 ;seed                      Allocated with name '_srand_seed_1_1'
                            622 ;------------------------------------------------------------
                            623 ;	snake.c:39: void srand(uint32_t seed) {
                            624 ;	-----------------------------------------
                            625 ;	 function srand
                            626 ;	-----------------------------------------
   005C                     627 _srand:
                            628 ;	genReceive
   005C AA 82               629 	mov	r2,dpl
   005E AB 83               630 	mov	r3,dph
   0060 AC F0               631 	mov	r4,b
   0062 FD                  632 	mov	r5,a
   0063 90s00r04            633 	mov	dptr,#_srand_seed_1_1
   0066 EA                  634 	mov	a,r2
   0067 F0                  635 	movx	@dptr,a
   0068 A3                  636 	inc	dptr
   0069 EB                  637 	mov	a,r3
   006A F0                  638 	movx	@dptr,a
   006B A3                  639 	inc	dptr
   006C EC                  640 	mov	a,r4
   006D F0                  641 	movx	@dptr,a
   006E A3                  642 	inc	dptr
   006F ED                  643 	mov	a,r5
   0070 F0                  644 	movx	@dptr,a
                            645 ;	snake.c:40: _Randseed = seed;
                            646 ;	genAssign
   0071 90s00r04            647 	mov	dptr,#_srand_seed_1_1
   0074 E0                  648 	movx	a,@dptr
   0075 FA                  649 	mov	r2,a
   0076 A3                  650 	inc	dptr
   0077 E0                  651 	movx	a,@dptr
   0078 FB                  652 	mov	r3,a
   0079 A3                  653 	inc	dptr
   007A E0                  654 	movx	a,@dptr
   007B FC                  655 	mov	r4,a
   007C A3                  656 	inc	dptr
   007D E0                  657 	movx	a,@dptr
   007E FD                  658 	mov	r5,a
                            659 ;	genAssign
   007F 90s00r00            660 	mov	dptr,#__Randseed
   0082 EA                  661 	mov	a,r2
   0083 F0                  662 	movx	@dptr,a
   0084 A3                  663 	inc	dptr
   0085 EB                  664 	mov	a,r3
   0086 F0                  665 	movx	@dptr,a
   0087 A3                  666 	inc	dptr
   0088 EC                  667 	mov	a,r4
   0089 F0                  668 	movx	@dptr,a
   008A A3                  669 	inc	dptr
   008B ED                  670 	mov	a,r5
   008C F0                  671 	movx	@dptr,a
                            672 ;	Peephole 300	removed redundant label 00101$
   008D 22                  673 	ret
                            674 ;------------------------------------------------------------
                            675 ;Allocation info for local variables in function 'put_food'
                            676 ;------------------------------------------------------------
                            677 ;x                         Allocated with name '_put_food_x_1_1'
                            678 ;y                         Allocated with name '_put_food_y_1_1'
                            679 ;------------------------------------------------------------
                            680 ;	snake.c:47: void put_food() {
                            681 ;	-----------------------------------------
                            682 ;	 function put_food
                            683 ;	-----------------------------------------
   008E                     684 _put_food:
                            685 ;	snake.c:49: while(1) {
   008E                     686 00104$:
                            687 ;	snake.c:50: x = rand() % 16;                    //To conver the number in the range 0-15 and 0-7 for glcd display
                            688 ;	genCall
   008E 12s00r00            689 	lcall	_rand
   0091 E5 82               690 	mov	a,dpl
   0093 85 83 F0            691 	mov	b,dph
                            692 ;	genAnd
   0096 54 0F               693 	anl	a,#0x0F
   0098 FA                  694 	mov	r2,a
   0099 7B 00               695 	mov	r3,#0x00
                            696 ;	snake.c:51: y = rand() % 8;
                            697 ;	genCall
   009B C0 02               698 	push	ar2
   009D C0 03               699 	push	ar3
   009F 12s00r00            700 	lcall	_rand
   00A2 E5 82               701 	mov	a,dpl
   00A4 85 83 F0            702 	mov	b,dph
   00A7 D0 03               703 	pop	ar3
   00A9 D0 02               704 	pop	ar2
                            705 ;	genAnd
   00AB 54 07               706 	anl	a,#0x07
   00AD FC                  707 	mov	r4,a
   00AE 7D 00               708 	mov	r5,#0x00
                            709 ;	snake.c:52: if(arena[x][y]!=code_byte_SNAKE) {  //Check if snake is present at that place or not
                            710 ;	genLeftShift
                            711 ;	genLeftShiftLiteral
                            712 ;	genlshTwo
   00B0 EB                  713 	mov	a,r3
   00B1 C4                  714 	swap	a
   00B2 54 F0               715 	anl	a,#0xf0
   00B4 CA                  716 	xch	a,r2
   00B5 C4                  717 	swap	a
   00B6 CA                  718 	xch	a,r2
   00B7 6A                  719 	xrl	a,r2
   00B8 CA                  720 	xch	a,r2
   00B9 54 F0               721 	anl	a,#0xf0
   00BB CA                  722 	xch	a,r2
   00BC 6A                  723 	xrl	a,r2
   00BD FB                  724 	mov	r3,a
                            725 ;	genPlus
                            726 ;	Peephole 236.g	used r2 instead of ar2
   00BE EA                  727 	mov	a,r2
   00BF 24r00               728 	add	a,#_arena
   00C1 FE                  729 	mov	r6,a
                            730 ;	Peephole 236.g	used r3 instead of ar3
   00C2 EB                  731 	mov	a,r3
   00C3 34s00               732 	addc	a,#(_arena >> 8)
   00C5 FF                  733 	mov	r7,a
                            734 ;	genLeftShift
                            735 ;	genLeftShiftLiteral
                            736 ;	genlshTwo
   00C6 ED                  737 	mov	a,r5
   00C7 CC                  738 	xch	a,r4
   00C8 25 E0               739 	add	a,acc
   00CA CC                  740 	xch	a,r4
   00CB 33                  741 	rlc	a
   00CC FD                  742 	mov	r5,a
                            743 ;	genPlus
                            744 ;	Peephole 236.g	used r4 instead of ar4
   00CD EC                  745 	mov	a,r4
                            746 ;	Peephole 236.a	used r6 instead of ar6
   00CE 2E                  747 	add	a,r6
   00CF F5 82               748 	mov	dpl,a
                            749 ;	Peephole 236.g	used r5 instead of ar5
   00D1 ED                  750 	mov	a,r5
                            751 ;	Peephole 236.b	used r7 instead of ar7
   00D2 3F                  752 	addc	a,r7
   00D3 F5 83               753 	mov	dph,a
                            754 ;	genPointerGet
                            755 ;	genFarPointerGet
   00D5 E0                  756 	movx	a,@dptr
   00D6 FE                  757 	mov	r6,a
   00D7 A3                  758 	inc	dptr
   00D8 E0                  759 	movx	a,@dptr
   00D9 FF                  760 	mov	r7,a
                            761 ;	genCmpEq
                            762 ;	gencjneshort
   00DA BE DB 05            763 	cjne	r6,#0xDB,00110$
   00DD BF 00 02            764 	cjne	r7,#0x00,00110$
                            765 ;	Peephole 112.b	changed ljmp to sjmp
   00E0 80 AC               766 	sjmp	00104$
   00E2                     767 00110$:
                            768 ;	snake.c:53: arena[x][y] = code_byte_FOOD;   //if not then place the food or else continue to check for other place
                            769 ;	genPlus
                            770 ;	Peephole 236.g	used r2 instead of ar2
   00E2 EA                  771 	mov	a,r2
   00E3 24r00               772 	add	a,#_arena
   00E5 FA                  773 	mov	r2,a
                            774 ;	Peephole 236.g	used r3 instead of ar3
   00E6 EB                  775 	mov	a,r3
   00E7 34s00               776 	addc	a,#(_arena >> 8)
   00E9 FB                  777 	mov	r3,a
                            778 ;	genPlus
                            779 ;	Peephole 236.g	used r4 instead of ar4
   00EA EC                  780 	mov	a,r4
                            781 ;	Peephole 236.a	used r2 instead of ar2
   00EB 2A                  782 	add	a,r2
   00EC F5 82               783 	mov	dpl,a
                            784 ;	Peephole 236.g	used r5 instead of ar5
   00EE ED                  785 	mov	a,r5
                            786 ;	Peephole 236.b	used r3 instead of ar3
   00EF 3B                  787 	addc	a,r3
   00F0 F5 83               788 	mov	dph,a
                            789 ;	genPointerSet
                            790 ;     genFarPointerSet
   00F2 74 03               791 	mov	a,#0x03
   00F4 F0                  792 	movx	@dptr,a
   00F5 A3                  793 	inc	dptr
                            794 ;	Peephole 181	changed mov to clr
   00F6 E4                  795 	clr	a
   00F7 F0                  796 	movx	@dptr,a
                            797 ;	snake.c:54: break;
                            798 ;	Peephole 300	removed redundant label 00106$
   00F8 22                  799 	ret
                            800 ;------------------------------------------------------------
                            801 ;Allocation info for local variables in function 'snakeBitmapOffset'
                            802 ;------------------------------------------------------------
                            803 ;y                         Allocated with name '_snakeBitmapOffset_PARM_2'
                            804 ;x                         Allocated with name '_snakeBitmapOffset_x_1_1'
                            805 ;i                         Allocated with name '_snakeBitmapOffset_i_1_1'
                            806 ;sloc0                     Allocated with name '_snakeBitmapOffset_sloc0_1_0'
                            807 ;------------------------------------------------------------
                            808 ;	snake.c:63: unsigned int snakeBitmapOffset(unsigned int x, unsigned int y) {
                            809 ;	-----------------------------------------
                            810 ;	 function snakeBitmapOffset
                            811 ;	-----------------------------------------
   00F9                     812 _snakeBitmapOffset:
                            813 ;	genReceive
   00F9 AA 83               814 	mov	r2,dph
   00FB E5 82               815 	mov	a,dpl
   00FD 90s00r0A            816 	mov	dptr,#_snakeBitmapOffset_x_1_1
   0100 F0                  817 	movx	@dptr,a
   0101 A3                  818 	inc	dptr
   0102 EA                  819 	mov	a,r2
   0103 F0                  820 	movx	@dptr,a
                            821 ;	snake.c:68: while(1) {
                            822 ;	genAssign
   0104 90s00r08            823 	mov	dptr,#_snakeBitmapOffset_PARM_2
   0107 E0                  824 	movx	a,@dptr
   0108 FA                  825 	mov	r2,a
   0109 A3                  826 	inc	dptr
   010A E0                  827 	movx	a,@dptr
   010B FB                  828 	mov	r3,a
                            829 ;	genAssign
   010C 90s00r0A            830 	mov	dptr,#_snakeBitmapOffset_x_1_1
   010F E0                  831 	movx	a,@dptr
   0110 FC                  832 	mov	r4,a
   0111 A3                  833 	inc	dptr
   0112 E0                  834 	movx	a,@dptr
   0113 FD                  835 	mov	r5,a
                            836 ;	genAssign
   0114 7E 00               837 	mov	r6,#0x00
   0116 7F 00               838 	mov	r7,#0x00
   0118                     839 00105$:
                            840 ;	snake.c:69: if(snakeX[i]==x && snakeY[i]==y) break;
                            841 ;	genIpush
   0118 C0 02               842 	push	ar2
   011A C0 03               843 	push	ar3
                            844 ;	genLeftShift
                            845 ;	genLeftShiftLiteral
                            846 ;	genlshTwo
   011C 8E 00               847 	mov	ar0,r6
   011E EF                  848 	mov	a,r7
   011F C8                  849 	xch	a,r0
   0120 25 E0               850 	add	a,acc
   0122 C8                  851 	xch	a,r0
   0123 33                  852 	rlc	a
   0124 F9                  853 	mov	r1,a
                            854 ;	genPlus
                            855 ;	Peephole 236.g	used r0 instead of ar0
   0125 E8                  856 	mov	a,r0
   0126 24r00               857 	add	a,#_snakeX
   0128 F5 82               858 	mov	dpl,a
                            859 ;	Peephole 236.g	used r1 instead of ar1
   012A E9                  860 	mov	a,r1
   012B 34s00               861 	addc	a,#(_snakeX >> 8)
   012D F5 83               862 	mov	dph,a
                            863 ;	genPointerGet
                            864 ;	genFarPointerGet
   012F E0                  865 	movx	a,@dptr
   0130 FA                  866 	mov	r2,a
   0131 A3                  867 	inc	dptr
   0132 E0                  868 	movx	a,@dptr
   0133 FB                  869 	mov	r3,a
                            870 ;	genCmpEq
                            871 ;	gencjne
                            872 ;	gencjneshort
   0134 EA                  873 	mov	a,r2
   0135 B5 04 08            874 	cjne	a,ar4,00192$
   0138 EB                  875 	mov	a,r3
   0139 B5 05 04            876 	cjne	a,ar5,00192$
   013C 74 01               877 	mov	a,#0x01
   013E 80 01               878 	sjmp	00193$
   0140                     879 00192$:
   0140 E4                  880 	clr	a
   0141                     881 00193$:
                            882 ;	genIpop
   0141 D0 03               883 	pop	ar3
   0143 D0 02               884 	pop	ar2
                            885 ;	genIfx
                            886 ;	genIfxJump
                            887 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0145 60 19               888 	jz	00102$
                            889 ;	Peephole 300	removed redundant label 00194$
                            890 ;	genPlus
                            891 ;	Peephole 236.g	used r0 instead of ar0
   0147 E8                  892 	mov	a,r0
   0148 24r00               893 	add	a,#_snakeY
   014A F5 82               894 	mov	dpl,a
                            895 ;	Peephole 236.g	used r1 instead of ar1
   014C E9                  896 	mov	a,r1
   014D 34s00               897 	addc	a,#(_snakeY >> 8)
   014F F5 83               898 	mov	dph,a
                            899 ;	genPointerGet
                            900 ;	genFarPointerGet
   0151 E0                  901 	movx	a,@dptr
   0152 F8                  902 	mov	r0,a
   0153 A3                  903 	inc	dptr
   0154 E0                  904 	movx	a,@dptr
   0155 F9                  905 	mov	r1,a
                            906 ;	genCmpEq
                            907 ;	gencjneshort
   0156 E8                  908 	mov	a,r0
   0157 B5 02 06            909 	cjne	a,ar2,00195$
   015A E9                  910 	mov	a,r1
   015B B5 03 02            911 	cjne	a,ar3,00195$
                            912 ;	Peephole 112.b	changed ljmp to sjmp
   015E 80 07               913 	sjmp	00106$
   0160                     914 00195$:
   0160                     915 00102$:
                            916 ;	snake.c:70: i++;
                            917 ;	genPlus
                            918 ;     genPlusIncr
   0160 0E                  919 	inc	r6
                            920 ;	Peephole 112.b	changed ljmp to sjmp
                            921 ;	Peephole 243	avoided branch to sjmp
   0161 BE 00 B4            922 	cjne	r6,#0x00,00105$
   0164 0F                  923 	inc	r7
                            924 ;	Peephole 300	removed redundant label 00196$
   0165 80 B1               925 	sjmp	00105$
   0167                     926 00106$:
                            927 ;	snake.c:73: if(i==0) {
                            928 ;	genIfx
   0167 EE                  929 	mov	a,r6
   0168 4F                  930 	orl	a,r7
                            931 ;	genIfxJump
   0169 60 03               932 	jz	00197$
   016B 02s02r3A            933 	ljmp	00116$
   016E                     934 00197$:
                            935 ;	snake.c:74: if(snakeX[i+1]==x+1) return OFFSET_SNHR;
                            936 ;	genIpush
   016E C0 02               937 	push	ar2
   0170 C0 03               938 	push	ar3
                            939 ;	genCast
   0172 8E 00               940 	mov	ar0,r6
                            941 ;	genPlus
                            942 ;     genPlusIncr
   0174 74 01               943 	mov	a,#0x01
                            944 ;	Peephole 236.a	used r0 instead of ar0
   0176 28                  945 	add	a,r0
                            946 ;	genLeftShift
                            947 ;	genLeftShiftLiteral
                            948 ;	genlshOne
                            949 ;	Peephole 105	removed redundant mov
                            950 ;	genPlus
                            951 ;	Peephole 204	removed redundant mov
   0177 25 E0               952 	add	a,acc
   0179 F9                  953 	mov	r1,a
                            954 ;	Peephole 177.b	removed redundant mov
   017A 24r00               955 	add	a,#_snakeX
   017C F5 82               956 	mov	dpl,a
                            957 ;	Peephole 181	changed mov to clr
   017E E4                  958 	clr	a
   017F 34s00               959 	addc	a,#(_snakeX >> 8)
   0181 F5 83               960 	mov	dph,a
                            961 ;	genPointerGet
                            962 ;	genFarPointerGet
   0183 E0                  963 	movx	a,@dptr
   0184 F5*00               964 	mov	_snakeBitmapOffset_sloc0_1_0,a
   0186 A3                  965 	inc	dptr
   0187 E0                  966 	movx	a,@dptr
   0188 F5*01               967 	mov	(_snakeBitmapOffset_sloc0_1_0 + 1),a
                            968 ;	genPlus
                            969 ;     genPlusIncr
   018A 74 01               970 	mov	a,#0x01
                            971 ;	Peephole 236.a	used r4 instead of ar4
   018C 2C                  972 	add	a,r4
   018D FB                  973 	mov	r3,a
                            974 ;	Peephole 181	changed mov to clr
   018E E4                  975 	clr	a
                            976 ;	Peephole 236.b	used r5 instead of ar5
   018F 3D                  977 	addc	a,r5
   0190 FA                  978 	mov	r2,a
                            979 ;	genCmpEq
                            980 ;	gencjne
                            981 ;	gencjneshort
   0191 E5*00               982 	mov	a,_snakeBitmapOffset_sloc0_1_0
   0193 B5 03 09            983 	cjne	a,ar3,00198$
   0196 E5*01               984 	mov	a,(_snakeBitmapOffset_sloc0_1_0 + 1)
   0198 B5 02 04            985 	cjne	a,ar2,00198$
   019B 74 01               986 	mov	a,#0x01
   019D 80 01               987 	sjmp	00199$
   019F                     988 00198$:
   019F E4                  989 	clr	a
   01A0                     990 00199$:
                            991 ;	genIpop
   01A0 D0 03               992 	pop	ar3
   01A2 D0 02               993 	pop	ar2
                            994 ;	genIfx
                            995 ;	genIfxJump
                            996 ;	Peephole 108.c	removed ljmp by inverse jump logic
   01A4 60 04               997 	jz	00108$
                            998 ;	Peephole 300	removed redundant label 00200$
                            999 ;	genRet
                           1000 ;	Peephole 182.b	used 16 bit load of dptr
   01A6 90 00 40           1001 	mov	dptr,#0x0040
                           1002 ;	Peephole 251.a	replaced ljmp to ret with ret
   01A9 22                 1003 	ret
   01AA                    1004 00108$:
                           1005 ;	snake.c:75: if(snakeX[i+1]==x-1) return OFFSET_SNHL;
                           1006 ;	genIpush
   01AA C0 06              1007 	push	ar6
   01AC C0 07              1008 	push	ar7
                           1009 ;	genPlus
                           1010 ;     genPlusIncr
   01AE 74 01              1011 	mov	a,#0x01
                           1012 ;	Peephole 236.a	used r0 instead of ar0
   01B0 28                 1013 	add	a,r0
                           1014 ;	genLeftShift
                           1015 ;	genLeftShiftLiteral
                           1016 ;	genlshOne
                           1017 ;	Peephole 105	removed redundant mov
                           1018 ;	genPlus
                           1019 ;	Peephole 204	removed redundant mov
   01B1 25 E0              1020 	add	a,acc
   01B3 F9                 1021 	mov	r1,a
                           1022 ;	Peephole 177.b	removed redundant mov
   01B4 24r00              1023 	add	a,#_snakeX
   01B6 F5 82              1024 	mov	dpl,a
                           1025 ;	Peephole 181	changed mov to clr
   01B8 E4                 1026 	clr	a
   01B9 34s00              1027 	addc	a,#(_snakeX >> 8)
   01BB F5 83              1028 	mov	dph,a
                           1029 ;	genPointerGet
                           1030 ;	genFarPointerGet
   01BD E0                 1031 	movx	a,@dptr
   01BE F9                 1032 	mov	r1,a
   01BF A3                 1033 	inc	dptr
   01C0 E0                 1034 	movx	a,@dptr
   01C1 FE                 1035 	mov	r6,a
                           1036 ;	genMinus
                           1037 ;	genMinusDec
   01C2 1C                 1038 	dec	r4
   01C3 BC FF 01           1039 	cjne	r4,#0xff,00201$
   01C6 1D                 1040 	dec	r5
   01C7                    1041 00201$:
                           1042 ;	genCmpEq
                           1043 ;	gencjne
                           1044 ;	gencjneshort
   01C7 E9                 1045 	mov	a,r1
   01C8 B5 04 08           1046 	cjne	a,ar4,00202$
   01CB EE                 1047 	mov	a,r6
   01CC B5 05 04           1048 	cjne	a,ar5,00202$
   01CF 74 01              1049 	mov	a,#0x01
   01D1 80 01              1050 	sjmp	00203$
   01D3                    1051 00202$:
   01D3 E4                 1052 	clr	a
   01D4                    1053 00203$:
                           1054 ;	genIpop
   01D4 D0 07              1055 	pop	ar7
   01D6 D0 06              1056 	pop	ar6
                           1057 ;	genIfx
                           1058 ;	genIfxJump
                           1059 ;	Peephole 108.c	removed ljmp by inverse jump logic
   01D8 60 04              1060 	jz	00110$
                           1061 ;	Peephole 300	removed redundant label 00204$
                           1062 ;	genRet
                           1063 ;	Peephole 182.b	used 16 bit load of dptr
   01DA 90 00 50           1064 	mov	dptr,#0x0050
                           1065 ;	Peephole 251.a	replaced ljmp to ret with ret
   01DD 22                 1066 	ret
   01DE                    1067 00110$:
                           1068 ;	snake.c:76: if(snakeY[i+1]==y+1) return OFFSET_SNHD;
                           1069 ;	genIpush
   01DE C0 06              1070 	push	ar6
   01E0 C0 07              1071 	push	ar7
                           1072 ;	genPlus
                           1073 ;     genPlusIncr
   01E2 74 01              1074 	mov	a,#0x01
                           1075 ;	Peephole 236.a	used r0 instead of ar0
   01E4 28                 1076 	add	a,r0
                           1077 ;	genLeftShift
                           1078 ;	genLeftShiftLiteral
                           1079 ;	genlshOne
                           1080 ;	Peephole 105	removed redundant mov
                           1081 ;	genPlus
                           1082 ;	Peephole 204	removed redundant mov
   01E5 25 E0              1083 	add	a,acc
   01E7 FC                 1084 	mov	r4,a
                           1085 ;	Peephole 177.b	removed redundant mov
   01E8 24r00              1086 	add	a,#_snakeY
   01EA F5 82              1087 	mov	dpl,a
                           1088 ;	Peephole 181	changed mov to clr
   01EC E4                 1089 	clr	a
   01ED 34s00              1090 	addc	a,#(_snakeY >> 8)
   01EF F5 83              1091 	mov	dph,a
                           1092 ;	genPointerGet
                           1093 ;	genFarPointerGet
   01F1 E0                 1094 	movx	a,@dptr
   01F2 FC                 1095 	mov	r4,a
   01F3 A3                 1096 	inc	dptr
   01F4 E0                 1097 	movx	a,@dptr
   01F5 FD                 1098 	mov	r5,a
                           1099 ;	genPlus
                           1100 ;     genPlusIncr
   01F6 74 01              1101 	mov	a,#0x01
                           1102 ;	Peephole 236.a	used r2 instead of ar2
   01F8 2A                 1103 	add	a,r2
   01F9 F9                 1104 	mov	r1,a
                           1105 ;	Peephole 181	changed mov to clr
   01FA E4                 1106 	clr	a
                           1107 ;	Peephole 236.b	used r3 instead of ar3
   01FB 3B                 1108 	addc	a,r3
   01FC FE                 1109 	mov	r6,a
                           1110 ;	genCmpEq
                           1111 ;	gencjne
                           1112 ;	gencjneshort
   01FD EC                 1113 	mov	a,r4
   01FE B5 01 08           1114 	cjne	a,ar1,00205$
   0201 ED                 1115 	mov	a,r5
   0202 B5 06 04           1116 	cjne	a,ar6,00205$
   0205 74 01              1117 	mov	a,#0x01
   0207 80 01              1118 	sjmp	00206$
   0209                    1119 00205$:
   0209 E4                 1120 	clr	a
   020A                    1121 00206$:
                           1122 ;	genIpop
   020A D0 07              1123 	pop	ar7
   020C D0 06              1124 	pop	ar6
                           1125 ;	genIfx
                           1126 ;	genIfxJump
                           1127 ;	Peephole 108.c	removed ljmp by inverse jump logic
   020E 60 04              1128 	jz	00112$
                           1129 ;	Peephole 300	removed redundant label 00207$
                           1130 ;	genRet
                           1131 ;	Peephole 182.b	used 16 bit load of dptr
   0210 90 00 48           1132 	mov	dptr,#0x0048
                           1133 ;	Peephole 251.a	replaced ljmp to ret with ret
   0213 22                 1134 	ret
   0214                    1135 00112$:
                           1136 ;	snake.c:77: if(snakeY[i+1]==y-1) return OFFSET_SNHU;
                           1137 ;	genPlus
                           1138 ;     genPlusIncr
   0214 08                 1139 	inc	r0
                           1140 ;	genLeftShift
                           1141 ;	genLeftShiftLiteral
                           1142 ;	genlshOne
   0215 E8                 1143 	mov	a,r0
                           1144 ;	Peephole 254	optimized left shift
   0216 28                 1145 	add	a,r0
                           1146 ;	genPlus
   0217 F8                 1147 	mov	r0,a
                           1148 ;	Peephole 177.b	removed redundant mov
   0218 24r00              1149 	add	a,#_snakeY
   021A F5 82              1150 	mov	dpl,a
                           1151 ;	Peephole 181	changed mov to clr
   021C E4                 1152 	clr	a
   021D 34s00              1153 	addc	a,#(_snakeY >> 8)
   021F F5 83              1154 	mov	dph,a
                           1155 ;	genPointerGet
                           1156 ;	genFarPointerGet
   0221 E0                 1157 	movx	a,@dptr
   0222 FC                 1158 	mov	r4,a
   0223 A3                 1159 	inc	dptr
   0224 E0                 1160 	movx	a,@dptr
   0225 FD                 1161 	mov	r5,a
                           1162 ;	genMinus
                           1163 ;	genMinusDec
   0226 EA                 1164 	mov	a,r2
   0227 24 FF              1165 	add	a,#0xff
   0229 F8                 1166 	mov	r0,a
   022A EB                 1167 	mov	a,r3
   022B 34 FF              1168 	addc	a,#0xff
   022D F9                 1169 	mov	r1,a
                           1170 ;	genCmpEq
                           1171 ;	gencjneshort
   022E EC                 1172 	mov	a,r4
                           1173 ;	Peephole 112.b	changed ljmp to sjmp
                           1174 ;	Peephole 197.b	optimized misc jump sequence
   022F B5 00 08           1175 	cjne	a,ar0,00116$
   0232 ED                 1176 	mov	a,r5
   0233 B5 01 04           1177 	cjne	a,ar1,00116$
                           1178 ;	Peephole 200.b	removed redundant sjmp
                           1179 ;	Peephole 300	removed redundant label 00208$
                           1180 ;	Peephole 300	removed redundant label 00209$
                           1181 ;	genRet
                           1182 ;	Peephole 182.b	used 16 bit load of dptr
   0236 90 00 38           1183 	mov	dptr,#0x0038
                           1184 ;	Peephole 251.a	replaced ljmp to ret with ret
   0239 22                 1185 	ret
   023A                    1186 00116$:
                           1187 ;	snake.c:80: if(i==snakeLen-1) {
                           1188 ;	genAssign
   023A 90s00r00           1189 	mov	dptr,#_snakeLen
   023D E0                 1190 	movx	a,@dptr
   023E FC                 1191 	mov	r4,a
   023F A3                 1192 	inc	dptr
   0240 E0                 1193 	movx	a,@dptr
   0241 FD                 1194 	mov	r5,a
                           1195 ;	genMinus
                           1196 ;	genMinusDec
   0242 1C                 1197 	dec	r4
   0243 BC FF 01           1198 	cjne	r4,#0xff,00210$
   0246 1D                 1199 	dec	r5
   0247                    1200 00210$:
                           1201 ;	genCmpEq
                           1202 ;	gencjneshort
   0247 EE                 1203 	mov	a,r6
   0248 B5 04 06           1204 	cjne	a,ar4,00211$
   024B EF                 1205 	mov	a,r7
   024C B5 05 02           1206 	cjne	a,ar5,00211$
   024F 80 03              1207 	sjmp	00212$
   0251                    1208 00211$:
   0251 02s03r2A           1209 	ljmp	00126$
   0254                    1210 00212$:
                           1211 ;	snake.c:81: if(snakeX[i-1]==x+1) return OFFSET_SNTR;
                           1212 ;	genIpush
   0254 C0 02              1213 	push	ar2
   0256 C0 03              1214 	push	ar3
                           1215 ;	genCast
   0258 8E 04              1216 	mov	ar4,r6
                           1217 ;	genMinus
                           1218 ;	genMinusDec
   025A EC                 1219 	mov	a,r4
   025B 14                 1220 	dec	a
                           1221 ;	genLeftShift
                           1222 ;	genLeftShiftLiteral
                           1223 ;	genlshOne
                           1224 ;	Peephole 105	removed redundant mov
                           1225 ;	genPlus
                           1226 ;	Peephole 204	removed redundant mov
   025C 25 E0              1227 	add	a,acc
   025E FD                 1228 	mov	r5,a
                           1229 ;	Peephole 177.b	removed redundant mov
   025F 24r00              1230 	add	a,#_snakeX
   0261 F5 82              1231 	mov	dpl,a
                           1232 ;	Peephole 181	changed mov to clr
   0263 E4                 1233 	clr	a
   0264 34s00              1234 	addc	a,#(_snakeX >> 8)
   0266 F5 83              1235 	mov	dph,a
                           1236 ;	genPointerGet
                           1237 ;	genFarPointerGet
   0268 E0                 1238 	movx	a,@dptr
   0269 FD                 1239 	mov	r5,a
   026A A3                 1240 	inc	dptr
   026B E0                 1241 	movx	a,@dptr
   026C F8                 1242 	mov	r0,a
                           1243 ;	genAssign
   026D 90s00r0A           1244 	mov	dptr,#_snakeBitmapOffset_x_1_1
   0270 E0                 1245 	movx	a,@dptr
   0271 F5*00              1246 	mov	_snakeBitmapOffset_sloc0_1_0,a
   0273 A3                 1247 	inc	dptr
   0274 E0                 1248 	movx	a,@dptr
   0275 F5*01              1249 	mov	(_snakeBitmapOffset_sloc0_1_0 + 1),a
                           1250 ;	genPlus
                           1251 ;     genPlusIncr
   0277 74 01              1252 	mov	a,#0x01
   0279 25*00              1253 	add	a,_snakeBitmapOffset_sloc0_1_0
   027B F9                 1254 	mov	r1,a
                           1255 ;	Peephole 181	changed mov to clr
   027C E4                 1256 	clr	a
   027D 35*01              1257 	addc	a,(_snakeBitmapOffset_sloc0_1_0 + 1)
   027F FA                 1258 	mov	r2,a
                           1259 ;	genCmpEq
                           1260 ;	gencjne
                           1261 ;	gencjneshort
   0280 ED                 1262 	mov	a,r5
   0281 B5 01 08           1263 	cjne	a,ar1,00213$
   0284 E8                 1264 	mov	a,r0
   0285 B5 02 04           1265 	cjne	a,ar2,00213$
   0288 74 01              1266 	mov	a,#0x01
   028A 80 01              1267 	sjmp	00214$
   028C                    1268 00213$:
   028C E4                 1269 	clr	a
   028D                    1270 00214$:
                           1271 ;	genIpop
   028D D0 03              1272 	pop	ar3
   028F D0 02              1273 	pop	ar2
                           1274 ;	genIfx
                           1275 ;	genIfxJump
                           1276 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0291 60 04              1277 	jz	00118$
                           1278 ;	Peephole 300	removed redundant label 00215$
                           1279 ;	genRet
                           1280 ;	Peephole 182.b	used 16 bit load of dptr
   0293 90 00 60           1281 	mov	dptr,#0x0060
                           1282 ;	Peephole 251.a	replaced ljmp to ret with ret
   0296 22                 1283 	ret
   0297                    1284 00118$:
                           1285 ;	snake.c:82: if(snakeX[i-1]==x-1) return OFFSET_SNTL;
                           1286 ;	genIpush
   0297 C0 06              1287 	push	ar6
   0299 C0 07              1288 	push	ar7
                           1289 ;	genMinus
                           1290 ;	genMinusDec
   029B EC                 1291 	mov	a,r4
   029C 14                 1292 	dec	a
                           1293 ;	genLeftShift
                           1294 ;	genLeftShiftLiteral
                           1295 ;	genlshOne
                           1296 ;	Peephole 105	removed redundant mov
                           1297 ;	genPlus
                           1298 ;	Peephole 204	removed redundant mov
   029D 25 E0              1299 	add	a,acc
   029F FD                 1300 	mov	r5,a
                           1301 ;	Peephole 177.b	removed redundant mov
   02A0 24r00              1302 	add	a,#_snakeX
   02A2 F5 82              1303 	mov	dpl,a
                           1304 ;	Peephole 181	changed mov to clr
   02A4 E4                 1305 	clr	a
   02A5 34s00              1306 	addc	a,#(_snakeX >> 8)
   02A7 F5 83              1307 	mov	dph,a
                           1308 ;	genPointerGet
                           1309 ;	genFarPointerGet
   02A9 E0                 1310 	movx	a,@dptr
   02AA FD                 1311 	mov	r5,a
   02AB A3                 1312 	inc	dptr
   02AC E0                 1313 	movx	a,@dptr
   02AD F8                 1314 	mov	r0,a
                           1315 ;	genMinus
                           1316 ;	genMinusDec
   02AE E5*00              1317 	mov	a,_snakeBitmapOffset_sloc0_1_0
   02B0 24 FF              1318 	add	a,#0xff
   02B2 F9                 1319 	mov	r1,a
   02B3 E5*01              1320 	mov	a,(_snakeBitmapOffset_sloc0_1_0 + 1)
   02B5 34 FF              1321 	addc	a,#0xff
   02B7 FE                 1322 	mov	r6,a
                           1323 ;	genCmpEq
                           1324 ;	gencjne
                           1325 ;	gencjneshort
   02B8 ED                 1326 	mov	a,r5
   02B9 B5 01 08           1327 	cjne	a,ar1,00216$
   02BC E8                 1328 	mov	a,r0
   02BD B5 06 04           1329 	cjne	a,ar6,00216$
   02C0 74 01              1330 	mov	a,#0x01
   02C2 80 01              1331 	sjmp	00217$
   02C4                    1332 00216$:
   02C4 E4                 1333 	clr	a
   02C5                    1334 00217$:
                           1335 ;	genIpop
   02C5 D0 07              1336 	pop	ar7
   02C7 D0 06              1337 	pop	ar6
                           1338 ;	genIfx
                           1339 ;	genIfxJump
                           1340 ;	Peephole 108.c	removed ljmp by inverse jump logic
   02C9 60 04              1341 	jz	00120$
                           1342 ;	Peephole 300	removed redundant label 00218$
                           1343 ;	genRet
                           1344 ;	Peephole 182.b	used 16 bit load of dptr
   02CB 90 00 70           1345 	mov	dptr,#0x0070
                           1346 ;	Peephole 251.a	replaced ljmp to ret with ret
   02CE 22                 1347 	ret
   02CF                    1348 00120$:
                           1349 ;	snake.c:83: if(snakeY[i-1]==y+1) return OFFSET_SNTD;
                           1350 ;	genIpush
   02CF C0 06              1351 	push	ar6
   02D1 C0 07              1352 	push	ar7
                           1353 ;	genMinus
                           1354 ;	genMinusDec
   02D3 EC                 1355 	mov	a,r4
   02D4 14                 1356 	dec	a
                           1357 ;	genLeftShift
                           1358 ;	genLeftShiftLiteral
                           1359 ;	genlshOne
                           1360 ;	Peephole 105	removed redundant mov
                           1361 ;	genPlus
                           1362 ;	Peephole 204	removed redundant mov
   02D5 25 E0              1363 	add	a,acc
   02D7 FD                 1364 	mov	r5,a
                           1365 ;	Peephole 177.b	removed redundant mov
   02D8 24r00              1366 	add	a,#_snakeY
   02DA F5 82              1367 	mov	dpl,a
                           1368 ;	Peephole 181	changed mov to clr
   02DC E4                 1369 	clr	a
   02DD 34s00              1370 	addc	a,#(_snakeY >> 8)
   02DF F5 83              1371 	mov	dph,a
                           1372 ;	genPointerGet
                           1373 ;	genFarPointerGet
   02E1 E0                 1374 	movx	a,@dptr
   02E2 FD                 1375 	mov	r5,a
   02E3 A3                 1376 	inc	dptr
   02E4 E0                 1377 	movx	a,@dptr
   02E5 F8                 1378 	mov	r0,a
                           1379 ;	genPlus
                           1380 ;     genPlusIncr
   02E6 74 01              1381 	mov	a,#0x01
                           1382 ;	Peephole 236.a	used r2 instead of ar2
   02E8 2A                 1383 	add	a,r2
   02E9 F9                 1384 	mov	r1,a
                           1385 ;	Peephole 181	changed mov to clr
   02EA E4                 1386 	clr	a
                           1387 ;	Peephole 236.b	used r3 instead of ar3
   02EB 3B                 1388 	addc	a,r3
   02EC FE                 1389 	mov	r6,a
                           1390 ;	genCmpEq
                           1391 ;	gencjne
                           1392 ;	gencjneshort
   02ED ED                 1393 	mov	a,r5
   02EE B5 01 08           1394 	cjne	a,ar1,00219$
   02F1 E8                 1395 	mov	a,r0
   02F2 B5 06 04           1396 	cjne	a,ar6,00219$
   02F5 74 01              1397 	mov	a,#0x01
   02F7 80 01              1398 	sjmp	00220$
   02F9                    1399 00219$:
   02F9 E4                 1400 	clr	a
   02FA                    1401 00220$:
                           1402 ;	genIpop
   02FA D0 07              1403 	pop	ar7
   02FC D0 06              1404 	pop	ar6
                           1405 ;	genIfx
                           1406 ;	genIfxJump
                           1407 ;	Peephole 108.c	removed ljmp by inverse jump logic
   02FE 60 04              1408 	jz	00122$
                           1409 ;	Peephole 300	removed redundant label 00221$
                           1410 ;	genRet
                           1411 ;	Peephole 182.b	used 16 bit load of dptr
   0300 90 00 68           1412 	mov	dptr,#0x0068
                           1413 ;	Peephole 251.a	replaced ljmp to ret with ret
   0303 22                 1414 	ret
   0304                    1415 00122$:
                           1416 ;	snake.c:84: if(snakeY[i-1]==y-1) return OFFSET_SNTU;
                           1417 ;	genMinus
                           1418 ;	genMinusDec
   0304 1C                 1419 	dec	r4
                           1420 ;	genLeftShift
                           1421 ;	genLeftShiftLiteral
                           1422 ;	genlshOne
   0305 EC                 1423 	mov	a,r4
                           1424 ;	Peephole 254	optimized left shift
   0306 2C                 1425 	add	a,r4
                           1426 ;	genPlus
   0307 FC                 1427 	mov	r4,a
                           1428 ;	Peephole 177.b	removed redundant mov
   0308 24r00              1429 	add	a,#_snakeY
   030A F5 82              1430 	mov	dpl,a
                           1431 ;	Peephole 181	changed mov to clr
   030C E4                 1432 	clr	a
   030D 34s00              1433 	addc	a,#(_snakeY >> 8)
   030F F5 83              1434 	mov	dph,a
                           1435 ;	genPointerGet
                           1436 ;	genFarPointerGet
   0311 E0                 1437 	movx	a,@dptr
   0312 FC                 1438 	mov	r4,a
   0313 A3                 1439 	inc	dptr
   0314 E0                 1440 	movx	a,@dptr
   0315 FD                 1441 	mov	r5,a
                           1442 ;	genMinus
                           1443 ;	genMinusDec
   0316 EA                 1444 	mov	a,r2
   0317 24 FF              1445 	add	a,#0xff
   0319 F8                 1446 	mov	r0,a
   031A EB                 1447 	mov	a,r3
   031B 34 FF              1448 	addc	a,#0xff
   031D F9                 1449 	mov	r1,a
                           1450 ;	genCmpEq
                           1451 ;	gencjneshort
   031E EC                 1452 	mov	a,r4
                           1453 ;	Peephole 112.b	changed ljmp to sjmp
                           1454 ;	Peephole 197.b	optimized misc jump sequence
   031F B5 00 08           1455 	cjne	a,ar0,00126$
   0322 ED                 1456 	mov	a,r5
   0323 B5 01 04           1457 	cjne	a,ar1,00126$
                           1458 ;	Peephole 200.b	removed redundant sjmp
                           1459 ;	Peephole 300	removed redundant label 00222$
                           1460 ;	Peephole 300	removed redundant label 00223$
                           1461 ;	genRet
                           1462 ;	Peephole 182.b	used 16 bit load of dptr
   0326 90 00 58           1463 	mov	dptr,#0x0058
                           1464 ;	Peephole 251.a	replaced ljmp to ret with ret
   0329 22                 1465 	ret
   032A                    1466 00126$:
                           1467 ;	snake.c:87: if(snakeX[i+1]==x && snakeX[i-1]==x) return OFFSET_SNVE;
                           1468 ;	genCast
                           1469 ;	genPlus
                           1470 ;     genPlusIncr
   032A 74 01              1471 	mov	a,#0x01
                           1472 ;	Peephole 236.a	used r6 instead of ar6
   032C 2E                 1473 	add	a,r6
                           1474 ;	genLeftShift
                           1475 ;	genLeftShiftLiteral
                           1476 ;	genlshOne
                           1477 ;	Peephole 105	removed redundant mov
                           1478 ;	genPlus
                           1479 ;	Peephole 204	removed redundant mov
   032D 25 E0              1480 	add	a,acc
   032F FC                 1481 	mov	r4,a
                           1482 ;	Peephole 177.b	removed redundant mov
   0330 24r00              1483 	add	a,#_snakeX
   0332 F5 82              1484 	mov	dpl,a
                           1485 ;	Peephole 181	changed mov to clr
   0334 E4                 1486 	clr	a
   0335 34s00              1487 	addc	a,#(_snakeX >> 8)
   0337 F5 83              1488 	mov	dph,a
                           1489 ;	genPointerGet
                           1490 ;	genFarPointerGet
   0339 E0                 1491 	movx	a,@dptr
   033A FC                 1492 	mov	r4,a
   033B A3                 1493 	inc	dptr
   033C E0                 1494 	movx	a,@dptr
   033D FD                 1495 	mov	r5,a
                           1496 ;	genAssign
   033E 90s00r0A           1497 	mov	dptr,#_snakeBitmapOffset_x_1_1
   0341 E0                 1498 	movx	a,@dptr
   0342 FF                 1499 	mov	r7,a
   0343 A3                 1500 	inc	dptr
   0344 E0                 1501 	movx	a,@dptr
   0345 F8                 1502 	mov	r0,a
                           1503 ;	genCmpEq
                           1504 ;	gencjneshort
   0346 EC                 1505 	mov	a,r4
                           1506 ;	Peephole 112.b	changed ljmp to sjmp
                           1507 ;	Peephole 197.b	optimized misc jump sequence
   0347 B5 07 23           1508 	cjne	a,ar7,00128$
   034A ED                 1509 	mov	a,r5
   034B B5 00 1F           1510 	cjne	a,ar0,00128$
                           1511 ;	Peephole 200.b	removed redundant sjmp
                           1512 ;	Peephole 300	removed redundant label 00224$
                           1513 ;	Peephole 300	removed redundant label 00225$
                           1514 ;	genMinus
                           1515 ;	genMinusDec
   034E EE                 1516 	mov	a,r6
   034F 14                 1517 	dec	a
                           1518 ;	genLeftShift
                           1519 ;	genLeftShiftLiteral
                           1520 ;	genlshOne
                           1521 ;	Peephole 105	removed redundant mov
                           1522 ;	genPlus
                           1523 ;	Peephole 204	removed redundant mov
   0350 25 E0              1524 	add	a,acc
   0352 FC                 1525 	mov	r4,a
                           1526 ;	Peephole 177.b	removed redundant mov
   0353 24r00              1527 	add	a,#_snakeX
   0355 F5 82              1528 	mov	dpl,a
                           1529 ;	Peephole 181	changed mov to clr
   0357 E4                 1530 	clr	a
   0358 34s00              1531 	addc	a,#(_snakeX >> 8)
   035A F5 83              1532 	mov	dph,a
                           1533 ;	genPointerGet
                           1534 ;	genFarPointerGet
   035C E0                 1535 	movx	a,@dptr
   035D FC                 1536 	mov	r4,a
   035E A3                 1537 	inc	dptr
   035F E0                 1538 	movx	a,@dptr
   0360 FD                 1539 	mov	r5,a
                           1540 ;	genCmpEq
                           1541 ;	gencjneshort
   0361 EC                 1542 	mov	a,r4
                           1543 ;	Peephole 112.b	changed ljmp to sjmp
                           1544 ;	Peephole 197.b	optimized misc jump sequence
   0362 B5 07 08           1545 	cjne	a,ar7,00128$
   0365 ED                 1546 	mov	a,r5
   0366 B5 00 04           1547 	cjne	a,ar0,00128$
                           1548 ;	Peephole 200.b	removed redundant sjmp
                           1549 ;	Peephole 300	removed redundant label 00226$
                           1550 ;	Peephole 300	removed redundant label 00227$
                           1551 ;	genRet
                           1552 ;	Peephole 182.b	used 16 bit load of dptr
   0369 90 00 08           1553 	mov	dptr,#0x0008
                           1554 ;	Peephole 251.a	replaced ljmp to ret with ret
   036C 22                 1555 	ret
   036D                    1556 00128$:
                           1557 ;	snake.c:88: if(snakeY[i+1]==y && snakeY[i-1]==y) return OFFSET_SNHO;
                           1558 ;	genPlus
                           1559 ;     genPlusIncr
   036D 74 01              1560 	mov	a,#0x01
                           1561 ;	Peephole 236.a	used r6 instead of ar6
   036F 2E                 1562 	add	a,r6
                           1563 ;	genLeftShift
                           1564 ;	genLeftShiftLiteral
                           1565 ;	genlshOne
                           1566 ;	Peephole 105	removed redundant mov
                           1567 ;	genPlus
                           1568 ;	Peephole 204	removed redundant mov
   0370 25 E0              1569 	add	a,acc
   0372 FC                 1570 	mov	r4,a
                           1571 ;	Peephole 177.b	removed redundant mov
   0373 24r00              1572 	add	a,#_snakeY
   0375 F5 82              1573 	mov	dpl,a
                           1574 ;	Peephole 181	changed mov to clr
   0377 E4                 1575 	clr	a
   0378 34s00              1576 	addc	a,#(_snakeY >> 8)
   037A F5 83              1577 	mov	dph,a
                           1578 ;	genPointerGet
                           1579 ;	genFarPointerGet
   037C E0                 1580 	movx	a,@dptr
   037D FC                 1581 	mov	r4,a
   037E A3                 1582 	inc	dptr
   037F E0                 1583 	movx	a,@dptr
   0380 FD                 1584 	mov	r5,a
                           1585 ;	genCmpEq
                           1586 ;	gencjneshort
   0381 EC                 1587 	mov	a,r4
                           1588 ;	Peephole 112.b	changed ljmp to sjmp
                           1589 ;	Peephole 197.b	optimized misc jump sequence
   0382 B5 02 23           1590 	cjne	a,ar2,00131$
   0385 ED                 1591 	mov	a,r5
   0386 B5 03 1F           1592 	cjne	a,ar3,00131$
                           1593 ;	Peephole 200.b	removed redundant sjmp
                           1594 ;	Peephole 300	removed redundant label 00228$
                           1595 ;	Peephole 300	removed redundant label 00229$
                           1596 ;	genMinus
                           1597 ;	genMinusDec
   0389 EE                 1598 	mov	a,r6
   038A 14                 1599 	dec	a
                           1600 ;	genLeftShift
                           1601 ;	genLeftShiftLiteral
                           1602 ;	genlshOne
                           1603 ;	Peephole 105	removed redundant mov
                           1604 ;	genPlus
                           1605 ;	Peephole 204	removed redundant mov
   038B 25 E0              1606 	add	a,acc
   038D FC                 1607 	mov	r4,a
                           1608 ;	Peephole 177.b	removed redundant mov
   038E 24r00              1609 	add	a,#_snakeY
   0390 F5 82              1610 	mov	dpl,a
                           1611 ;	Peephole 181	changed mov to clr
   0392 E4                 1612 	clr	a
   0393 34s00              1613 	addc	a,#(_snakeY >> 8)
   0395 F5 83              1614 	mov	dph,a
                           1615 ;	genPointerGet
                           1616 ;	genFarPointerGet
   0397 E0                 1617 	movx	a,@dptr
   0398 FC                 1618 	mov	r4,a
   0399 A3                 1619 	inc	dptr
   039A E0                 1620 	movx	a,@dptr
   039B FD                 1621 	mov	r5,a
                           1622 ;	genCmpEq
                           1623 ;	gencjneshort
   039C EC                 1624 	mov	a,r4
                           1625 ;	Peephole 112.b	changed ljmp to sjmp
                           1626 ;	Peephole 197.b	optimized misc jump sequence
   039D B5 02 08           1627 	cjne	a,ar2,00131$
   03A0 ED                 1628 	mov	a,r5
   03A1 B5 03 04           1629 	cjne	a,ar3,00131$
                           1630 ;	Peephole 200.b	removed redundant sjmp
                           1631 ;	Peephole 300	removed redundant label 00230$
                           1632 ;	Peephole 300	removed redundant label 00231$
                           1633 ;	genRet
                           1634 ;	Peephole 182.b	used 16 bit load of dptr
   03A4 90 00 10           1635 	mov	dptr,#0x0010
                           1636 ;	Peephole 251.a	replaced ljmp to ret with ret
   03A7 22                 1637 	ret
   03A8                    1638 00131$:
                           1639 ;	snake.c:91: if(snakeX[i+1]==x+1 && snakeY[i-1]==y+1) return OFFSET_SNDR;
                           1640 ;	genPlus
                           1641 ;     genPlusIncr
   03A8 74 01              1642 	mov	a,#0x01
                           1643 ;	Peephole 236.a	used r6 instead of ar6
   03AA 2E                 1644 	add	a,r6
                           1645 ;	genLeftShift
                           1646 ;	genLeftShiftLiteral
                           1647 ;	genlshOne
                           1648 ;	Peephole 105	removed redundant mov
                           1649 ;	genPlus
                           1650 ;	Peephole 204	removed redundant mov
   03AB 25 E0              1651 	add	a,acc
   03AD FC                 1652 	mov	r4,a
                           1653 ;	Peephole 177.b	removed redundant mov
   03AE 24r00              1654 	add	a,#_snakeX
   03B0 F5 82              1655 	mov	dpl,a
                           1656 ;	Peephole 181	changed mov to clr
   03B2 E4                 1657 	clr	a
   03B3 34s00              1658 	addc	a,#(_snakeX >> 8)
   03B5 F5 83              1659 	mov	dph,a
                           1660 ;	genPointerGet
                           1661 ;	genFarPointerGet
   03B7 E0                 1662 	movx	a,@dptr
   03B8 FC                 1663 	mov	r4,a
   03B9 A3                 1664 	inc	dptr
   03BA E0                 1665 	movx	a,@dptr
   03BB FD                 1666 	mov	r5,a
                           1667 ;	genAssign
   03BC 90s00r0A           1668 	mov	dptr,#_snakeBitmapOffset_x_1_1
   03BF E0                 1669 	movx	a,@dptr
   03C0 FF                 1670 	mov	r7,a
   03C1 A3                 1671 	inc	dptr
   03C2 E0                 1672 	movx	a,@dptr
   03C3 F8                 1673 	mov	r0,a
                           1674 ;	genPlus
                           1675 ;     genPlusIncr
   03C4 0F                 1676 	inc	r7
   03C5 BF 00 01           1677 	cjne	r7,#0x00,00232$
   03C8 08                 1678 	inc	r0
   03C9                    1679 00232$:
                           1680 ;	genCmpEq
                           1681 ;	gencjneshort
   03C9 EC                 1682 	mov	a,r4
                           1683 ;	Peephole 112.b	changed ljmp to sjmp
                           1684 ;	Peephole 197.b	optimized misc jump sequence
   03CA B5 07 2A           1685 	cjne	a,ar7,00134$
   03CD ED                 1686 	mov	a,r5
   03CE B5 00 26           1687 	cjne	a,ar0,00134$
                           1688 ;	Peephole 200.b	removed redundant sjmp
                           1689 ;	Peephole 300	removed redundant label 00233$
                           1690 ;	Peephole 300	removed redundant label 00234$
                           1691 ;	genMinus
                           1692 ;	genMinusDec
   03D1 EE                 1693 	mov	a,r6
   03D2 14                 1694 	dec	a
                           1695 ;	genLeftShift
                           1696 ;	genLeftShiftLiteral
                           1697 ;	genlshOne
                           1698 ;	Peephole 105	removed redundant mov
                           1699 ;	genPlus
                           1700 ;	Peephole 204	removed redundant mov
   03D3 25 E0              1701 	add	a,acc
   03D5 FC                 1702 	mov	r4,a
                           1703 ;	Peephole 177.b	removed redundant mov
   03D6 24r00              1704 	add	a,#_snakeY
   03D8 F5 82              1705 	mov	dpl,a
                           1706 ;	Peephole 181	changed mov to clr
   03DA E4                 1707 	clr	a
   03DB 34s00              1708 	addc	a,#(_snakeY >> 8)
   03DD F5 83              1709 	mov	dph,a
                           1710 ;	genPointerGet
                           1711 ;	genFarPointerGet
   03DF E0                 1712 	movx	a,@dptr
   03E0 FC                 1713 	mov	r4,a
   03E1 A3                 1714 	inc	dptr
   03E2 E0                 1715 	movx	a,@dptr
   03E3 FD                 1716 	mov	r5,a
                           1717 ;	genPlus
                           1718 ;     genPlusIncr
   03E4 74 01              1719 	mov	a,#0x01
                           1720 ;	Peephole 236.a	used r2 instead of ar2
   03E6 2A                 1721 	add	a,r2
   03E7 FF                 1722 	mov	r7,a
                           1723 ;	Peephole 181	changed mov to clr
   03E8 E4                 1724 	clr	a
                           1725 ;	Peephole 236.b	used r3 instead of ar3
   03E9 3B                 1726 	addc	a,r3
   03EA F8                 1727 	mov	r0,a
                           1728 ;	genCmpEq
                           1729 ;	gencjneshort
   03EB EC                 1730 	mov	a,r4
                           1731 ;	Peephole 112.b	changed ljmp to sjmp
                           1732 ;	Peephole 197.b	optimized misc jump sequence
   03EC B5 07 08           1733 	cjne	a,ar7,00134$
   03EF ED                 1734 	mov	a,r5
   03F0 B5 00 04           1735 	cjne	a,ar0,00134$
                           1736 ;	Peephole 200.b	removed redundant sjmp
                           1737 ;	Peephole 300	removed redundant label 00235$
                           1738 ;	Peephole 300	removed redundant label 00236$
                           1739 ;	genRet
                           1740 ;	Peephole 182.b	used 16 bit load of dptr
   03F3 90 00 30           1741 	mov	dptr,#0x0030
                           1742 ;	Peephole 251.a	replaced ljmp to ret with ret
   03F6 22                 1743 	ret
   03F7                    1744 00134$:
                           1745 ;	snake.c:92: if(snakeX[i-1]==x+1 && snakeY[i+1]==y+1) return OFFSET_SNDR;
                           1746 ;	genMinus
                           1747 ;	genMinusDec
   03F7 EE                 1748 	mov	a,r6
   03F8 14                 1749 	dec	a
                           1750 ;	genLeftShift
                           1751 ;	genLeftShiftLiteral
                           1752 ;	genlshOne
                           1753 ;	Peephole 105	removed redundant mov
                           1754 ;	genPlus
                           1755 ;	Peephole 204	removed redundant mov
   03F9 25 E0              1756 	add	a,acc
   03FB FC                 1757 	mov	r4,a
                           1758 ;	Peephole 177.b	removed redundant mov
   03FC 24r00              1759 	add	a,#_snakeX
   03FE F5 82              1760 	mov	dpl,a
                           1761 ;	Peephole 181	changed mov to clr
   0400 E4                 1762 	clr	a
   0401 34s00              1763 	addc	a,#(_snakeX >> 8)
   0403 F5 83              1764 	mov	dph,a
                           1765 ;	genPointerGet
                           1766 ;	genFarPointerGet
   0405 E0                 1767 	movx	a,@dptr
   0406 FC                 1768 	mov	r4,a
   0407 A3                 1769 	inc	dptr
   0408 E0                 1770 	movx	a,@dptr
   0409 FD                 1771 	mov	r5,a
                           1772 ;	genAssign
   040A 90s00r0A           1773 	mov	dptr,#_snakeBitmapOffset_x_1_1
   040D E0                 1774 	movx	a,@dptr
   040E FF                 1775 	mov	r7,a
   040F A3                 1776 	inc	dptr
   0410 E0                 1777 	movx	a,@dptr
   0411 F8                 1778 	mov	r0,a
                           1779 ;	genPlus
                           1780 ;     genPlusIncr
   0412 0F                 1781 	inc	r7
   0413 BF 00 01           1782 	cjne	r7,#0x00,00237$
   0416 08                 1783 	inc	r0
   0417                    1784 00237$:
                           1785 ;	genCmpEq
                           1786 ;	gencjneshort
   0417 EC                 1787 	mov	a,r4
                           1788 ;	Peephole 112.b	changed ljmp to sjmp
                           1789 ;	Peephole 197.b	optimized misc jump sequence
   0418 B5 07 2B           1790 	cjne	a,ar7,00137$
   041B ED                 1791 	mov	a,r5
   041C B5 00 27           1792 	cjne	a,ar0,00137$
                           1793 ;	Peephole 200.b	removed redundant sjmp
                           1794 ;	Peephole 300	removed redundant label 00238$
                           1795 ;	Peephole 300	removed redundant label 00239$
                           1796 ;	genPlus
                           1797 ;     genPlusIncr
   041F 74 01              1798 	mov	a,#0x01
                           1799 ;	Peephole 236.a	used r6 instead of ar6
   0421 2E                 1800 	add	a,r6
                           1801 ;	genLeftShift
                           1802 ;	genLeftShiftLiteral
                           1803 ;	genlshOne
                           1804 ;	Peephole 105	removed redundant mov
                           1805 ;	genPlus
                           1806 ;	Peephole 204	removed redundant mov
   0422 25 E0              1807 	add	a,acc
   0424 FC                 1808 	mov	r4,a
                           1809 ;	Peephole 177.b	removed redundant mov
   0425 24r00              1810 	add	a,#_snakeY
   0427 F5 82              1811 	mov	dpl,a
                           1812 ;	Peephole 181	changed mov to clr
   0429 E4                 1813 	clr	a
   042A 34s00              1814 	addc	a,#(_snakeY >> 8)
   042C F5 83              1815 	mov	dph,a
                           1816 ;	genPointerGet
                           1817 ;	genFarPointerGet
   042E E0                 1818 	movx	a,@dptr
   042F FC                 1819 	mov	r4,a
   0430 A3                 1820 	inc	dptr
   0431 E0                 1821 	movx	a,@dptr
   0432 FD                 1822 	mov	r5,a
                           1823 ;	genPlus
                           1824 ;     genPlusIncr
   0433 74 01              1825 	mov	a,#0x01
                           1826 ;	Peephole 236.a	used r2 instead of ar2
   0435 2A                 1827 	add	a,r2
   0436 FF                 1828 	mov	r7,a
                           1829 ;	Peephole 181	changed mov to clr
   0437 E4                 1830 	clr	a
                           1831 ;	Peephole 236.b	used r3 instead of ar3
   0438 3B                 1832 	addc	a,r3
   0439 F8                 1833 	mov	r0,a
                           1834 ;	genCmpEq
                           1835 ;	gencjneshort
   043A EC                 1836 	mov	a,r4
                           1837 ;	Peephole 112.b	changed ljmp to sjmp
                           1838 ;	Peephole 197.b	optimized misc jump sequence
   043B B5 07 08           1839 	cjne	a,ar7,00137$
   043E ED                 1840 	mov	a,r5
   043F B5 00 04           1841 	cjne	a,ar0,00137$
                           1842 ;	Peephole 200.b	removed redundant sjmp
                           1843 ;	Peephole 300	removed redundant label 00240$
                           1844 ;	Peephole 300	removed redundant label 00241$
                           1845 ;	genRet
                           1846 ;	Peephole 182.b	used 16 bit load of dptr
   0442 90 00 30           1847 	mov	dptr,#0x0030
                           1848 ;	Peephole 251.a	replaced ljmp to ret with ret
   0445 22                 1849 	ret
   0446                    1850 00137$:
                           1851 ;	snake.c:94: if(snakeX[i+1]==x-1 && snakeY[i-1]==y+1) return OFFSET_SNDL;
                           1852 ;	genPlus
                           1853 ;     genPlusIncr
   0446 74 01              1854 	mov	a,#0x01
                           1855 ;	Peephole 236.a	used r6 instead of ar6
   0448 2E                 1856 	add	a,r6
                           1857 ;	genLeftShift
                           1858 ;	genLeftShiftLiteral
                           1859 ;	genlshOne
                           1860 ;	Peephole 105	removed redundant mov
                           1861 ;	genPlus
                           1862 ;	Peephole 204	removed redundant mov
   0449 25 E0              1863 	add	a,acc
   044B FC                 1864 	mov	r4,a
                           1865 ;	Peephole 177.b	removed redundant mov
   044C 24r00              1866 	add	a,#_snakeX
   044E F5 82              1867 	mov	dpl,a
                           1868 ;	Peephole 181	changed mov to clr
   0450 E4                 1869 	clr	a
   0451 34s00              1870 	addc	a,#(_snakeX >> 8)
   0453 F5 83              1871 	mov	dph,a
                           1872 ;	genPointerGet
                           1873 ;	genFarPointerGet
   0455 E0                 1874 	movx	a,@dptr
   0456 FC                 1875 	mov	r4,a
   0457 A3                 1876 	inc	dptr
   0458 E0                 1877 	movx	a,@dptr
   0459 FD                 1878 	mov	r5,a
                           1879 ;	genAssign
   045A 90s00r0A           1880 	mov	dptr,#_snakeBitmapOffset_x_1_1
   045D E0                 1881 	movx	a,@dptr
   045E FF                 1882 	mov	r7,a
   045F A3                 1883 	inc	dptr
   0460 E0                 1884 	movx	a,@dptr
   0461 F8                 1885 	mov	r0,a
                           1886 ;	genMinus
                           1887 ;	genMinusDec
   0462 1F                 1888 	dec	r7
   0463 BF FF 01           1889 	cjne	r7,#0xff,00242$
   0466 18                 1890 	dec	r0
   0467                    1891 00242$:
                           1892 ;	genCmpEq
                           1893 ;	gencjneshort
   0467 EC                 1894 	mov	a,r4
                           1895 ;	Peephole 112.b	changed ljmp to sjmp
                           1896 ;	Peephole 197.b	optimized misc jump sequence
   0468 B5 07 2A           1897 	cjne	a,ar7,00140$
   046B ED                 1898 	mov	a,r5
   046C B5 00 26           1899 	cjne	a,ar0,00140$
                           1900 ;	Peephole 200.b	removed redundant sjmp
                           1901 ;	Peephole 300	removed redundant label 00243$
                           1902 ;	Peephole 300	removed redundant label 00244$
                           1903 ;	genMinus
                           1904 ;	genMinusDec
   046F EE                 1905 	mov	a,r6
   0470 14                 1906 	dec	a
                           1907 ;	genLeftShift
                           1908 ;	genLeftShiftLiteral
                           1909 ;	genlshOne
                           1910 ;	Peephole 105	removed redundant mov
                           1911 ;	genPlus
                           1912 ;	Peephole 204	removed redundant mov
   0471 25 E0              1913 	add	a,acc
   0473 FC                 1914 	mov	r4,a
                           1915 ;	Peephole 177.b	removed redundant mov
   0474 24r00              1916 	add	a,#_snakeY
   0476 F5 82              1917 	mov	dpl,a
                           1918 ;	Peephole 181	changed mov to clr
   0478 E4                 1919 	clr	a
   0479 34s00              1920 	addc	a,#(_snakeY >> 8)
   047B F5 83              1921 	mov	dph,a
                           1922 ;	genPointerGet
                           1923 ;	genFarPointerGet
   047D E0                 1924 	movx	a,@dptr
   047E FC                 1925 	mov	r4,a
   047F A3                 1926 	inc	dptr
   0480 E0                 1927 	movx	a,@dptr
   0481 FD                 1928 	mov	r5,a
                           1929 ;	genPlus
                           1930 ;     genPlusIncr
   0482 74 01              1931 	mov	a,#0x01
                           1932 ;	Peephole 236.a	used r2 instead of ar2
   0484 2A                 1933 	add	a,r2
   0485 FF                 1934 	mov	r7,a
                           1935 ;	Peephole 181	changed mov to clr
   0486 E4                 1936 	clr	a
                           1937 ;	Peephole 236.b	used r3 instead of ar3
   0487 3B                 1938 	addc	a,r3
   0488 F8                 1939 	mov	r0,a
                           1940 ;	genCmpEq
                           1941 ;	gencjneshort
   0489 EC                 1942 	mov	a,r4
                           1943 ;	Peephole 112.b	changed ljmp to sjmp
                           1944 ;	Peephole 197.b	optimized misc jump sequence
   048A B5 07 08           1945 	cjne	a,ar7,00140$
   048D ED                 1946 	mov	a,r5
   048E B5 00 04           1947 	cjne	a,ar0,00140$
                           1948 ;	Peephole 200.b	removed redundant sjmp
                           1949 ;	Peephole 300	removed redundant label 00245$
                           1950 ;	Peephole 300	removed redundant label 00246$
                           1951 ;	genRet
                           1952 ;	Peephole 182.b	used 16 bit load of dptr
   0491 90 00 18           1953 	mov	dptr,#0x0018
                           1954 ;	Peephole 251.a	replaced ljmp to ret with ret
   0494 22                 1955 	ret
   0495                    1956 00140$:
                           1957 ;	snake.c:95: if(snakeX[i-1]==x-1 && snakeY[i+1]==y+1) return OFFSET_SNDL;
                           1958 ;	genMinus
                           1959 ;	genMinusDec
   0495 EE                 1960 	mov	a,r6
   0496 14                 1961 	dec	a
                           1962 ;	genLeftShift
                           1963 ;	genLeftShiftLiteral
                           1964 ;	genlshOne
                           1965 ;	Peephole 105	removed redundant mov
                           1966 ;	genPlus
                           1967 ;	Peephole 204	removed redundant mov
   0497 25 E0              1968 	add	a,acc
   0499 FC                 1969 	mov	r4,a
                           1970 ;	Peephole 177.b	removed redundant mov
   049A 24r00              1971 	add	a,#_snakeX
   049C F5 82              1972 	mov	dpl,a
                           1973 ;	Peephole 181	changed mov to clr
   049E E4                 1974 	clr	a
   049F 34s00              1975 	addc	a,#(_snakeX >> 8)
   04A1 F5 83              1976 	mov	dph,a
                           1977 ;	genPointerGet
                           1978 ;	genFarPointerGet
   04A3 E0                 1979 	movx	a,@dptr
   04A4 FC                 1980 	mov	r4,a
   04A5 A3                 1981 	inc	dptr
   04A6 E0                 1982 	movx	a,@dptr
   04A7 FD                 1983 	mov	r5,a
                           1984 ;	genAssign
   04A8 90s00r0A           1985 	mov	dptr,#_snakeBitmapOffset_x_1_1
   04AB E0                 1986 	movx	a,@dptr
   04AC FF                 1987 	mov	r7,a
   04AD A3                 1988 	inc	dptr
   04AE E0                 1989 	movx	a,@dptr
   04AF F8                 1990 	mov	r0,a
                           1991 ;	genMinus
                           1992 ;	genMinusDec
   04B0 1F                 1993 	dec	r7
   04B1 BF FF 01           1994 	cjne	r7,#0xff,00247$
   04B4 18                 1995 	dec	r0
   04B5                    1996 00247$:
                           1997 ;	genCmpEq
                           1998 ;	gencjneshort
   04B5 EC                 1999 	mov	a,r4
                           2000 ;	Peephole 112.b	changed ljmp to sjmp
                           2001 ;	Peephole 197.b	optimized misc jump sequence
   04B6 B5 07 2B           2002 	cjne	a,ar7,00143$
   04B9 ED                 2003 	mov	a,r5
   04BA B5 00 27           2004 	cjne	a,ar0,00143$
                           2005 ;	Peephole 200.b	removed redundant sjmp
                           2006 ;	Peephole 300	removed redundant label 00248$
                           2007 ;	Peephole 300	removed redundant label 00249$
                           2008 ;	genPlus
                           2009 ;     genPlusIncr
   04BD 74 01              2010 	mov	a,#0x01
                           2011 ;	Peephole 236.a	used r6 instead of ar6
   04BF 2E                 2012 	add	a,r6
                           2013 ;	genLeftShift
                           2014 ;	genLeftShiftLiteral
                           2015 ;	genlshOne
                           2016 ;	Peephole 105	removed redundant mov
                           2017 ;	genPlus
                           2018 ;	Peephole 204	removed redundant mov
   04C0 25 E0              2019 	add	a,acc
   04C2 FC                 2020 	mov	r4,a
                           2021 ;	Peephole 177.b	removed redundant mov
   04C3 24r00              2022 	add	a,#_snakeY
   04C5 F5 82              2023 	mov	dpl,a
                           2024 ;	Peephole 181	changed mov to clr
   04C7 E4                 2025 	clr	a
   04C8 34s00              2026 	addc	a,#(_snakeY >> 8)
   04CA F5 83              2027 	mov	dph,a
                           2028 ;	genPointerGet
                           2029 ;	genFarPointerGet
   04CC E0                 2030 	movx	a,@dptr
   04CD FC                 2031 	mov	r4,a
   04CE A3                 2032 	inc	dptr
   04CF E0                 2033 	movx	a,@dptr
   04D0 FD                 2034 	mov	r5,a
                           2035 ;	genPlus
                           2036 ;     genPlusIncr
   04D1 74 01              2037 	mov	a,#0x01
                           2038 ;	Peephole 236.a	used r2 instead of ar2
   04D3 2A                 2039 	add	a,r2
   04D4 FF                 2040 	mov	r7,a
                           2041 ;	Peephole 181	changed mov to clr
   04D5 E4                 2042 	clr	a
                           2043 ;	Peephole 236.b	used r3 instead of ar3
   04D6 3B                 2044 	addc	a,r3
   04D7 F8                 2045 	mov	r0,a
                           2046 ;	genCmpEq
                           2047 ;	gencjneshort
   04D8 EC                 2048 	mov	a,r4
                           2049 ;	Peephole 112.b	changed ljmp to sjmp
                           2050 ;	Peephole 197.b	optimized misc jump sequence
   04D9 B5 07 08           2051 	cjne	a,ar7,00143$
   04DC ED                 2052 	mov	a,r5
   04DD B5 00 04           2053 	cjne	a,ar0,00143$
                           2054 ;	Peephole 200.b	removed redundant sjmp
                           2055 ;	Peephole 300	removed redundant label 00250$
                           2056 ;	Peephole 300	removed redundant label 00251$
                           2057 ;	genRet
                           2058 ;	Peephole 182.b	used 16 bit load of dptr
   04E0 90 00 18           2059 	mov	dptr,#0x0018
                           2060 ;	Peephole 251.a	replaced ljmp to ret with ret
   04E3 22                 2061 	ret
   04E4                    2062 00143$:
                           2063 ;	snake.c:97: if(snakeX[i+1]==x+1 && snakeY[i-1]==y-1) return OFFSET_SNUR;
                           2064 ;	genPlus
                           2065 ;     genPlusIncr
   04E4 74 01              2066 	mov	a,#0x01
                           2067 ;	Peephole 236.a	used r6 instead of ar6
   04E6 2E                 2068 	add	a,r6
                           2069 ;	genLeftShift
                           2070 ;	genLeftShiftLiteral
                           2071 ;	genlshOne
                           2072 ;	Peephole 105	removed redundant mov
                           2073 ;	genPlus
                           2074 ;	Peephole 204	removed redundant mov
   04E7 25 E0              2075 	add	a,acc
   04E9 FC                 2076 	mov	r4,a
                           2077 ;	Peephole 177.b	removed redundant mov
   04EA 24r00              2078 	add	a,#_snakeX
   04EC F5 82              2079 	mov	dpl,a
                           2080 ;	Peephole 181	changed mov to clr
   04EE E4                 2081 	clr	a
   04EF 34s00              2082 	addc	a,#(_snakeX >> 8)
   04F1 F5 83              2083 	mov	dph,a
                           2084 ;	genPointerGet
                           2085 ;	genFarPointerGet
   04F3 E0                 2086 	movx	a,@dptr
   04F4 FC                 2087 	mov	r4,a
   04F5 A3                 2088 	inc	dptr
   04F6 E0                 2089 	movx	a,@dptr
   04F7 FD                 2090 	mov	r5,a
                           2091 ;	genAssign
   04F8 90s00r0A           2092 	mov	dptr,#_snakeBitmapOffset_x_1_1
   04FB E0                 2093 	movx	a,@dptr
   04FC FF                 2094 	mov	r7,a
   04FD A3                 2095 	inc	dptr
   04FE E0                 2096 	movx	a,@dptr
   04FF F8                 2097 	mov	r0,a
                           2098 ;	genPlus
                           2099 ;     genPlusIncr
   0500 0F                 2100 	inc	r7
   0501 BF 00 01           2101 	cjne	r7,#0x00,00252$
   0504 08                 2102 	inc	r0
   0505                    2103 00252$:
                           2104 ;	genCmpEq
                           2105 ;	gencjneshort
   0505 EC                 2106 	mov	a,r4
                           2107 ;	Peephole 112.b	changed ljmp to sjmp
                           2108 ;	Peephole 197.b	optimized misc jump sequence
   0506 B5 07 2B           2109 	cjne	a,ar7,00146$
   0509 ED                 2110 	mov	a,r5
   050A B5 00 27           2111 	cjne	a,ar0,00146$
                           2112 ;	Peephole 200.b	removed redundant sjmp
                           2113 ;	Peephole 300	removed redundant label 00253$
                           2114 ;	Peephole 300	removed redundant label 00254$
                           2115 ;	genMinus
                           2116 ;	genMinusDec
   050D EE                 2117 	mov	a,r6
   050E 14                 2118 	dec	a
                           2119 ;	genLeftShift
                           2120 ;	genLeftShiftLiteral
                           2121 ;	genlshOne
                           2122 ;	Peephole 105	removed redundant mov
                           2123 ;	genPlus
                           2124 ;	Peephole 204	removed redundant mov
   050F 25 E0              2125 	add	a,acc
   0511 FC                 2126 	mov	r4,a
                           2127 ;	Peephole 177.b	removed redundant mov
   0512 24r00              2128 	add	a,#_snakeY
   0514 F5 82              2129 	mov	dpl,a
                           2130 ;	Peephole 181	changed mov to clr
   0516 E4                 2131 	clr	a
   0517 34s00              2132 	addc	a,#(_snakeY >> 8)
   0519 F5 83              2133 	mov	dph,a
                           2134 ;	genPointerGet
                           2135 ;	genFarPointerGet
   051B E0                 2136 	movx	a,@dptr
   051C FC                 2137 	mov	r4,a
   051D A3                 2138 	inc	dptr
   051E E0                 2139 	movx	a,@dptr
   051F FD                 2140 	mov	r5,a
                           2141 ;	genMinus
                           2142 ;	genMinusDec
   0520 EA                 2143 	mov	a,r2
   0521 24 FF              2144 	add	a,#0xff
   0523 FF                 2145 	mov	r7,a
   0524 EB                 2146 	mov	a,r3
   0525 34 FF              2147 	addc	a,#0xff
   0527 F8                 2148 	mov	r0,a
                           2149 ;	genCmpEq
                           2150 ;	gencjneshort
   0528 EC                 2151 	mov	a,r4
                           2152 ;	Peephole 112.b	changed ljmp to sjmp
                           2153 ;	Peephole 197.b	optimized misc jump sequence
   0529 B5 07 08           2154 	cjne	a,ar7,00146$
   052C ED                 2155 	mov	a,r5
   052D B5 00 04           2156 	cjne	a,ar0,00146$
                           2157 ;	Peephole 200.b	removed redundant sjmp
                           2158 ;	Peephole 300	removed redundant label 00255$
                           2159 ;	Peephole 300	removed redundant label 00256$
                           2160 ;	genRet
                           2161 ;	Peephole 182.b	used 16 bit load of dptr
   0530 90 00 28           2162 	mov	dptr,#0x0028
                           2163 ;	Peephole 251.a	replaced ljmp to ret with ret
   0533 22                 2164 	ret
   0534                    2165 00146$:
                           2166 ;	snake.c:98: if(snakeX[i-1]==x+1 && snakeY[i+1]==y-1) return OFFSET_SNUR;
                           2167 ;	genMinus
                           2168 ;	genMinusDec
   0534 EE                 2169 	mov	a,r6
   0535 14                 2170 	dec	a
                           2171 ;	genLeftShift
                           2172 ;	genLeftShiftLiteral
                           2173 ;	genlshOne
                           2174 ;	Peephole 105	removed redundant mov
                           2175 ;	genPlus
                           2176 ;	Peephole 204	removed redundant mov
   0536 25 E0              2177 	add	a,acc
   0538 FC                 2178 	mov	r4,a
                           2179 ;	Peephole 177.b	removed redundant mov
   0539 24r00              2180 	add	a,#_snakeX
   053B F5 82              2181 	mov	dpl,a
                           2182 ;	Peephole 181	changed mov to clr
   053D E4                 2183 	clr	a
   053E 34s00              2184 	addc	a,#(_snakeX >> 8)
   0540 F5 83              2185 	mov	dph,a
                           2186 ;	genPointerGet
                           2187 ;	genFarPointerGet
   0542 E0                 2188 	movx	a,@dptr
   0543 FC                 2189 	mov	r4,a
   0544 A3                 2190 	inc	dptr
   0545 E0                 2191 	movx	a,@dptr
   0546 FD                 2192 	mov	r5,a
                           2193 ;	genAssign
   0547 90s00r0A           2194 	mov	dptr,#_snakeBitmapOffset_x_1_1
   054A E0                 2195 	movx	a,@dptr
   054B FF                 2196 	mov	r7,a
   054C A3                 2197 	inc	dptr
   054D E0                 2198 	movx	a,@dptr
   054E F8                 2199 	mov	r0,a
                           2200 ;	genPlus
                           2201 ;     genPlusIncr
   054F 0F                 2202 	inc	r7
   0550 BF 00 01           2203 	cjne	r7,#0x00,00257$
   0553 08                 2204 	inc	r0
   0554                    2205 00257$:
                           2206 ;	genCmpEq
                           2207 ;	gencjneshort
   0554 EC                 2208 	mov	a,r4
                           2209 ;	Peephole 112.b	changed ljmp to sjmp
                           2210 ;	Peephole 197.b	optimized misc jump sequence
   0555 B5 07 2C           2211 	cjne	a,ar7,00149$
   0558 ED                 2212 	mov	a,r5
   0559 B5 00 28           2213 	cjne	a,ar0,00149$
                           2214 ;	Peephole 200.b	removed redundant sjmp
                           2215 ;	Peephole 300	removed redundant label 00258$
                           2216 ;	Peephole 300	removed redundant label 00259$
                           2217 ;	genPlus
                           2218 ;     genPlusIncr
   055C 74 01              2219 	mov	a,#0x01
                           2220 ;	Peephole 236.a	used r6 instead of ar6
   055E 2E                 2221 	add	a,r6
                           2222 ;	genLeftShift
                           2223 ;	genLeftShiftLiteral
                           2224 ;	genlshOne
                           2225 ;	Peephole 105	removed redundant mov
                           2226 ;	genPlus
                           2227 ;	Peephole 204	removed redundant mov
   055F 25 E0              2228 	add	a,acc
   0561 FC                 2229 	mov	r4,a
                           2230 ;	Peephole 177.b	removed redundant mov
   0562 24r00              2231 	add	a,#_snakeY
   0564 F5 82              2232 	mov	dpl,a
                           2233 ;	Peephole 181	changed mov to clr
   0566 E4                 2234 	clr	a
   0567 34s00              2235 	addc	a,#(_snakeY >> 8)
   0569 F5 83              2236 	mov	dph,a
                           2237 ;	genPointerGet
                           2238 ;	genFarPointerGet
   056B E0                 2239 	movx	a,@dptr
   056C FC                 2240 	mov	r4,a
   056D A3                 2241 	inc	dptr
   056E E0                 2242 	movx	a,@dptr
   056F FD                 2243 	mov	r5,a
                           2244 ;	genMinus
                           2245 ;	genMinusDec
   0570 EA                 2246 	mov	a,r2
   0571 24 FF              2247 	add	a,#0xff
   0573 FF                 2248 	mov	r7,a
   0574 EB                 2249 	mov	a,r3
   0575 34 FF              2250 	addc	a,#0xff
   0577 F8                 2251 	mov	r0,a
                           2252 ;	genCmpEq
                           2253 ;	gencjneshort
   0578 EC                 2254 	mov	a,r4
                           2255 ;	Peephole 112.b	changed ljmp to sjmp
                           2256 ;	Peephole 197.b	optimized misc jump sequence
   0579 B5 07 08           2257 	cjne	a,ar7,00149$
   057C ED                 2258 	mov	a,r5
   057D B5 00 04           2259 	cjne	a,ar0,00149$
                           2260 ;	Peephole 200.b	removed redundant sjmp
                           2261 ;	Peephole 300	removed redundant label 00260$
                           2262 ;	Peephole 300	removed redundant label 00261$
                           2263 ;	genRet
                           2264 ;	Peephole 182.b	used 16 bit load of dptr
   0580 90 00 28           2265 	mov	dptr,#0x0028
                           2266 ;	Peephole 251.a	replaced ljmp to ret with ret
   0583 22                 2267 	ret
   0584                    2268 00149$:
                           2269 ;	snake.c:100: if(snakeX[i+1]==x-1 && snakeY[i-1]==y-1) return OFFSET_SNUL;
                           2270 ;	genPlus
                           2271 ;     genPlusIncr
   0584 74 01              2272 	mov	a,#0x01
                           2273 ;	Peephole 236.a	used r6 instead of ar6
   0586 2E                 2274 	add	a,r6
                           2275 ;	genLeftShift
                           2276 ;	genLeftShiftLiteral
                           2277 ;	genlshOne
                           2278 ;	Peephole 105	removed redundant mov
                           2279 ;	genPlus
                           2280 ;	Peephole 204	removed redundant mov
   0587 25 E0              2281 	add	a,acc
   0589 FC                 2282 	mov	r4,a
                           2283 ;	Peephole 177.b	removed redundant mov
   058A 24r00              2284 	add	a,#_snakeX
   058C F5 82              2285 	mov	dpl,a
                           2286 ;	Peephole 181	changed mov to clr
   058E E4                 2287 	clr	a
   058F 34s00              2288 	addc	a,#(_snakeX >> 8)
   0591 F5 83              2289 	mov	dph,a
                           2290 ;	genPointerGet
                           2291 ;	genFarPointerGet
   0593 E0                 2292 	movx	a,@dptr
   0594 FC                 2293 	mov	r4,a
   0595 A3                 2294 	inc	dptr
   0596 E0                 2295 	movx	a,@dptr
   0597 FD                 2296 	mov	r5,a
                           2297 ;	genAssign
   0598 90s00r0A           2298 	mov	dptr,#_snakeBitmapOffset_x_1_1
   059B E0                 2299 	movx	a,@dptr
   059C FF                 2300 	mov	r7,a
   059D A3                 2301 	inc	dptr
   059E E0                 2302 	movx	a,@dptr
   059F F8                 2303 	mov	r0,a
                           2304 ;	genMinus
                           2305 ;	genMinusDec
   05A0 1F                 2306 	dec	r7
   05A1 BF FF 01           2307 	cjne	r7,#0xff,00262$
   05A4 18                 2308 	dec	r0
   05A5                    2309 00262$:
                           2310 ;	genCmpEq
                           2311 ;	gencjneshort
   05A5 EC                 2312 	mov	a,r4
                           2313 ;	Peephole 112.b	changed ljmp to sjmp
                           2314 ;	Peephole 197.b	optimized misc jump sequence
   05A6 B5 07 2B           2315 	cjne	a,ar7,00152$
   05A9 ED                 2316 	mov	a,r5
   05AA B5 00 27           2317 	cjne	a,ar0,00152$
                           2318 ;	Peephole 200.b	removed redundant sjmp
                           2319 ;	Peephole 300	removed redundant label 00263$
                           2320 ;	Peephole 300	removed redundant label 00264$
                           2321 ;	genMinus
                           2322 ;	genMinusDec
   05AD EE                 2323 	mov	a,r6
   05AE 14                 2324 	dec	a
                           2325 ;	genLeftShift
                           2326 ;	genLeftShiftLiteral
                           2327 ;	genlshOne
                           2328 ;	Peephole 105	removed redundant mov
                           2329 ;	genPlus
                           2330 ;	Peephole 204	removed redundant mov
   05AF 25 E0              2331 	add	a,acc
   05B1 FC                 2332 	mov	r4,a
                           2333 ;	Peephole 177.b	removed redundant mov
   05B2 24r00              2334 	add	a,#_snakeY
   05B4 F5 82              2335 	mov	dpl,a
                           2336 ;	Peephole 181	changed mov to clr
   05B6 E4                 2337 	clr	a
   05B7 34s00              2338 	addc	a,#(_snakeY >> 8)
   05B9 F5 83              2339 	mov	dph,a
                           2340 ;	genPointerGet
                           2341 ;	genFarPointerGet
   05BB E0                 2342 	movx	a,@dptr
   05BC FC                 2343 	mov	r4,a
   05BD A3                 2344 	inc	dptr
   05BE E0                 2345 	movx	a,@dptr
   05BF FD                 2346 	mov	r5,a
                           2347 ;	genMinus
                           2348 ;	genMinusDec
   05C0 EA                 2349 	mov	a,r2
   05C1 24 FF              2350 	add	a,#0xff
   05C3 FF                 2351 	mov	r7,a
   05C4 EB                 2352 	mov	a,r3
   05C5 34 FF              2353 	addc	a,#0xff
   05C7 F8                 2354 	mov	r0,a
                           2355 ;	genCmpEq
                           2356 ;	gencjneshort
   05C8 EC                 2357 	mov	a,r4
                           2358 ;	Peephole 112.b	changed ljmp to sjmp
                           2359 ;	Peephole 197.b	optimized misc jump sequence
   05C9 B5 07 08           2360 	cjne	a,ar7,00152$
   05CC ED                 2361 	mov	a,r5
   05CD B5 00 04           2362 	cjne	a,ar0,00152$
                           2363 ;	Peephole 200.b	removed redundant sjmp
                           2364 ;	Peephole 300	removed redundant label 00265$
                           2365 ;	Peephole 300	removed redundant label 00266$
                           2366 ;	genRet
                           2367 ;	Peephole 182.b	used 16 bit load of dptr
   05D0 90 00 20           2368 	mov	dptr,#0x0020
                           2369 ;	Peephole 112.b	changed ljmp to sjmp
                           2370 ;	Peephole 251.b	replaced sjmp to ret with ret
   05D3 22                 2371 	ret
   05D4                    2372 00152$:
                           2373 ;	snake.c:101: if(snakeX[i-1]==x-1 && snakeY[i+1]==y-1) return OFFSET_SNUL;
                           2374 ;	genMinus
                           2375 ;	genMinusDec
   05D4 EE                 2376 	mov	a,r6
   05D5 14                 2377 	dec	a
                           2378 ;	genLeftShift
                           2379 ;	genLeftShiftLiteral
                           2380 ;	genlshOne
                           2381 ;	Peephole 105	removed redundant mov
                           2382 ;	genPlus
                           2383 ;	Peephole 204	removed redundant mov
   05D6 25 E0              2384 	add	a,acc
   05D8 FC                 2385 	mov	r4,a
                           2386 ;	Peephole 177.b	removed redundant mov
   05D9 24r00              2387 	add	a,#_snakeX
   05DB F5 82              2388 	mov	dpl,a
                           2389 ;	Peephole 181	changed mov to clr
   05DD E4                 2390 	clr	a
   05DE 34s00              2391 	addc	a,#(_snakeX >> 8)
   05E0 F5 83              2392 	mov	dph,a
                           2393 ;	genPointerGet
                           2394 ;	genFarPointerGet
   05E2 E0                 2395 	movx	a,@dptr
   05E3 FC                 2396 	mov	r4,a
   05E4 A3                 2397 	inc	dptr
   05E5 E0                 2398 	movx	a,@dptr
   05E6 FD                 2399 	mov	r5,a
                           2400 ;	genAssign
   05E7 90s00r0A           2401 	mov	dptr,#_snakeBitmapOffset_x_1_1
   05EA E0                 2402 	movx	a,@dptr
   05EB FF                 2403 	mov	r7,a
   05EC A3                 2404 	inc	dptr
   05ED E0                 2405 	movx	a,@dptr
   05EE F8                 2406 	mov	r0,a
                           2407 ;	genMinus
                           2408 ;	genMinusDec
   05EF 1F                 2409 	dec	r7
   05F0 BF FF 01           2410 	cjne	r7,#0xff,00267$
   05F3 18                 2411 	dec	r0
   05F4                    2412 00267$:
                           2413 ;	genCmpEq
                           2414 ;	gencjneshort
   05F4 EC                 2415 	mov	a,r4
                           2416 ;	Peephole 112.b	changed ljmp to sjmp
                           2417 ;	Peephole 197.b	optimized misc jump sequence
   05F5 B5 07 27           2418 	cjne	a,ar7,00155$
   05F8 ED                 2419 	mov	a,r5
   05F9 B5 00 23           2420 	cjne	a,ar0,00155$
                           2421 ;	Peephole 200.b	removed redundant sjmp
                           2422 ;	Peephole 300	removed redundant label 00268$
                           2423 ;	Peephole 300	removed redundant label 00269$
                           2424 ;	genPlus
                           2425 ;     genPlusIncr
   05FC 0E                 2426 	inc	r6
                           2427 ;	genLeftShift
                           2428 ;	genLeftShiftLiteral
                           2429 ;	genlshOne
   05FD EE                 2430 	mov	a,r6
                           2431 ;	Peephole 254	optimized left shift
   05FE 2E                 2432 	add	a,r6
                           2433 ;	genPlus
   05FF FE                 2434 	mov	r6,a
                           2435 ;	Peephole 177.b	removed redundant mov
   0600 24r00              2436 	add	a,#_snakeY
   0602 F5 82              2437 	mov	dpl,a
                           2438 ;	Peephole 181	changed mov to clr
   0604 E4                 2439 	clr	a
   0605 34s00              2440 	addc	a,#(_snakeY >> 8)
   0607 F5 83              2441 	mov	dph,a
                           2442 ;	genPointerGet
                           2443 ;	genFarPointerGet
   0609 E0                 2444 	movx	a,@dptr
   060A FC                 2445 	mov	r4,a
   060B A3                 2446 	inc	dptr
   060C E0                 2447 	movx	a,@dptr
   060D FD                 2448 	mov	r5,a
                           2449 ;	genMinus
                           2450 ;	genMinusDec
   060E 1A                 2451 	dec	r2
   060F BA FF 01           2452 	cjne	r2,#0xff,00270$
   0612 1B                 2453 	dec	r3
   0613                    2454 00270$:
                           2455 ;	genCmpEq
                           2456 ;	gencjneshort
   0613 EC                 2457 	mov	a,r4
                           2458 ;	Peephole 112.b	changed ljmp to sjmp
                           2459 ;	Peephole 197.b	optimized misc jump sequence
   0614 B5 02 08           2460 	cjne	a,ar2,00155$
   0617 ED                 2461 	mov	a,r5
   0618 B5 03 04           2462 	cjne	a,ar3,00155$
                           2463 ;	Peephole 200.b	removed redundant sjmp
                           2464 ;	Peephole 300	removed redundant label 00271$
                           2465 ;	Peephole 300	removed redundant label 00272$
                           2466 ;	genRet
                           2467 ;	Peephole 182.b	used 16 bit load of dptr
   061B 90 00 20           2468 	mov	dptr,#0x0020
                           2469 ;	Peephole 112.b	changed ljmp to sjmp
                           2470 ;	snake.c:103: return OFFSET_SNVE;
                           2471 ;	genRet
                           2472 ;	Peephole 182.b	used 16 bit load of dptr
                           2473 ;	Peephole 237.a	removed sjmp to ret
   061E 22                 2474 	ret
   061F                    2475 00155$:
   061F 90 00 08           2476 	mov	dptr,#0x0008
                           2477 ;	Peephole 300	removed redundant label 00157$
   0622 22                 2478 	ret
                           2479 ;------------------------------------------------------------
                           2480 ;Allocation info for local variables in function 'glcdUpdate'
                           2481 ;------------------------------------------------------------
                           2482 ;sloc0                     Allocated with name '_glcdUpdate_sloc0_1_0'
                           2483 ;sloc1                     Allocated with name '_glcdUpdate_sloc1_1_0'
                           2484 ;sloc2                     Allocated with name '_glcdUpdate_sloc2_1_0'
                           2485 ;x                         Allocated with name '_glcdUpdate_x_1_1'
                           2486 ;y                         Allocated with name '_glcdUpdate_y_1_1'
                           2487 ;code_byte                 Allocated with name '_glcdUpdate_code_byte_1_1'
                           2488 ;i                         Allocated with name '_glcdUpdate_i_1_1'
                           2489 ;bitmapOffset              Allocated with name '_glcdUpdate_bitmapOffset_1_1'
                           2490 ;------------------------------------------------------------
                           2491 ;	snake.c:107: void glcdUpdate() {
                           2492 ;	-----------------------------------------
                           2493 ;	 function glcdUpdate
                           2494 ;	-----------------------------------------
   0623                    2495 _glcdUpdate:
                           2496 ;	snake.c:111: for(y = 0; y < 8; y++) {
                           2497 ;	genAssign
   0623 7A 00              2498 	mov	r2,#0x00
   0625 7B 00              2499 	mov	r3,#0x00
   0627                    2500 00142$:
                           2501 ;	genCmpLt
                           2502 ;	genCmp
   0627 C3                 2503 	clr	c
   0628 EA                 2504 	mov	a,r2
   0629 94 08              2505 	subb	a,#0x08
   062B EB                 2506 	mov	a,r3
   062C 94 00              2507 	subb	a,#0x00
                           2508 ;	genIfxJump
   062E 40 01              2509 	jc	00178$
                           2510 ;	Peephole 251.a	replaced ljmp to ret with ret
   0630 22                 2511 	ret
   0631                    2512 00178$:
                           2513 ;	snake.c:113: lcdcmd1(0x40);
                           2514 ;	genCall
   0631 75 82 40           2515 	mov	dpl,#0x40
   0634 C0 02              2516 	push	ar2
   0636 C0 03              2517 	push	ar3
   0638 12s00r00           2518 	lcall	_lcdcmd1
   063B D0 03              2519 	pop	ar3
   063D D0 02              2520 	pop	ar2
                           2521 ;	snake.c:114: lcdcmd2(0x40);
                           2522 ;	genCall
   063F 75 82 40           2523 	mov	dpl,#0x40
   0642 C0 02              2524 	push	ar2
   0644 C0 03              2525 	push	ar3
   0646 12s00r00           2526 	lcall	_lcdcmd2
   0649 D0 03              2527 	pop	ar3
   064B D0 02              2528 	pop	ar2
                           2529 ;	snake.c:115: lcdcmd1(y|0xB8);
                           2530 ;	genOr
   064D 74 B8              2531 	mov	a,#0xB8
   064F 4A                 2532 	orl	a,r2
   0650 FC                 2533 	mov	r4,a
   0651 8B 05              2534 	mov	ar5,r3
                           2535 ;	genCast
                           2536 ;	genCall
   0653 8C 82              2537 	mov	dpl,r4
   0655 C0 02              2538 	push	ar2
   0657 C0 03              2539 	push	ar3
   0659 C0 04              2540 	push	ar4
   065B 12s00r00           2541 	lcall	_lcdcmd1
   065E D0 04              2542 	pop	ar4
   0660 D0 03              2543 	pop	ar3
   0662 D0 02              2544 	pop	ar2
                           2545 ;	snake.c:116: lcdcmd2(y|0xB8);
                           2546 ;	genCall
   0664 8C 82              2547 	mov	dpl,r4
   0666 C0 02              2548 	push	ar2
   0668 C0 03              2549 	push	ar3
   066A 12s00r00           2550 	lcall	_lcdcmd2
   066D D0 03              2551 	pop	ar3
   066F D0 02              2552 	pop	ar2
                           2553 ;	snake.c:118: for(x=0; x<16; x++)
                           2554 ;	genAssign
   0671 8A 04              2555 	mov	ar4,r2
   0673 8B 05              2556 	mov	ar5,r3
                           2557 ;	genLeftShift
                           2558 ;	genLeftShiftLiteral
                           2559 ;	genlshTwo
   0675 8A*04              2560 	mov	_glcdUpdate_sloc2_1_0,r2
   0677 EB                 2561 	mov	a,r3
   0678 C5*04              2562 	xch	a,_glcdUpdate_sloc2_1_0
   067A 25 E0              2563 	add	a,acc
   067C C5*04              2564 	xch	a,_glcdUpdate_sloc2_1_0
   067E 33                 2565 	rlc	a
   067F F5*05              2566 	mov	(_glcdUpdate_sloc2_1_0 + 1),a
                           2567 ;	genAssign
   0681 78 00              2568 	mov	r0,#0x00
   0683 79 00              2569 	mov	r1,#0x00
   0685                    2570 00138$:
                           2571 ;	genCmpLt
                           2572 ;	genCmp
   0685 C3                 2573 	clr	c
   0686 E8                 2574 	mov	a,r0
   0687 94 10              2575 	subb	a,#0x10
   0689 E9                 2576 	mov	a,r1
   068A 94 00              2577 	subb	a,#0x00
                           2578 ;	genIfxJump
   068C 40 03              2579 	jc	00179$
   068E 02s08rDD           2580 	ljmp	00144$
   0691                    2581 00179$:
                           2582 ;	snake.c:120: code_byte = arena[x][y];
                           2583 ;	genIpush
   0691 C0 04              2584 	push	ar4
   0693 C0 05              2585 	push	ar5
                           2586 ;	genLeftShift
                           2587 ;	genLeftShiftLiteral
                           2588 ;	genlshTwo
   0695 88 04              2589 	mov	ar4,r0
   0697 E9                 2590 	mov	a,r1
   0698 C4                 2591 	swap	a
   0699 54 F0              2592 	anl	a,#0xf0
   069B CC                 2593 	xch	a,r4
   069C C4                 2594 	swap	a
   069D CC                 2595 	xch	a,r4
   069E 6C                 2596 	xrl	a,r4
   069F CC                 2597 	xch	a,r4
   06A0 54 F0              2598 	anl	a,#0xf0
   06A2 CC                 2599 	xch	a,r4
   06A3 6C                 2600 	xrl	a,r4
   06A4 FD                 2601 	mov	r5,a
                           2602 ;	genPlus
                           2603 ;	Peephole 236.g	used r4 instead of ar4
   06A5 EC                 2604 	mov	a,r4
   06A6 24r00              2605 	add	a,#_arena
   06A8 FC                 2606 	mov	r4,a
                           2607 ;	Peephole 236.g	used r5 instead of ar5
   06A9 ED                 2608 	mov	a,r5
   06AA 34s00              2609 	addc	a,#(_arena >> 8)
   06AC FD                 2610 	mov	r5,a
                           2611 ;	genPlus
   06AD E5*04              2612 	mov	a,_glcdUpdate_sloc2_1_0
                           2613 ;	Peephole 236.a	used r4 instead of ar4
   06AF 2C                 2614 	add	a,r4
   06B0 F5 82              2615 	mov	dpl,a
   06B2 E5*05              2616 	mov	a,(_glcdUpdate_sloc2_1_0 + 1)
                           2617 ;	Peephole 236.b	used r5 instead of ar5
   06B4 3D                 2618 	addc	a,r5
   06B5 F5 83              2619 	mov	dph,a
                           2620 ;	genPointerGet
                           2621 ;	genFarPointerGet
   06B7 E0                 2622 	movx	a,@dptr
   06B8 FC                 2623 	mov	r4,a
   06B9 A3                 2624 	inc	dptr
   06BA E0                 2625 	movx	a,@dptr
   06BB FD                 2626 	mov	r5,a
                           2627 ;	genAssign
   06BC 90s00r0C           2628 	mov	dptr,#_glcdUpdate_code_byte_1_1
   06BF EC                 2629 	mov	a,r4
   06C0 F0                 2630 	movx	@dptr,a
   06C1 A3                 2631 	inc	dptr
   06C2 ED                 2632 	mov	a,r5
   06C3 F0                 2633 	movx	@dptr,a
                           2634 ;	snake.c:122: if(code_byte==code_byte_SNAKE) {       //Check if snake body part is present or not
                           2635 ;	genCmpEq
                           2636 ;	gencjne
                           2637 ;	gencjneshort
                           2638 ;	Peephole 241.c	optimized compare
   06C4 E4                 2639 	clr	a
   06C5 BC DB 04           2640 	cjne	r4,#0xDB,00180$
   06C8 BD 00 01           2641 	cjne	r5,#0x00,00180$
   06CB 04                 2642 	inc	a
   06CC                    2643 00180$:
                           2644 ;	Peephole 300	removed redundant label 00181$
                           2645 ;	genIpop
   06CC D0 05              2646 	pop	ar5
   06CE D0 04              2647 	pop	ar4
                           2648 ;	genIfx
                           2649 ;	genIfxJump
   06D0 70 03              2650 	jnz	00182$
   06D2 02s07r9E           2651 	ljmp	00105$
   06D5                    2652 00182$:
                           2653 ;	snake.c:123: bitmapOffset = snakeBitmapOffset(x, y);//If present then check which body part
                           2654 ;	genAssign
   06D5 90s00r08           2655 	mov	dptr,#_snakeBitmapOffset_PARM_2
   06D8 EC                 2656 	mov	a,r4
   06D9 F0                 2657 	movx	@dptr,a
   06DA A3                 2658 	inc	dptr
   06DB ED                 2659 	mov	a,r5
   06DC F0                 2660 	movx	@dptr,a
                           2661 ;	genCall
   06DD 88 82              2662 	mov	dpl,r0
   06DF 89 83              2663 	mov	dph,r1
   06E1 C0 02              2664 	push	ar2
   06E3 C0 03              2665 	push	ar3
   06E5 C0 04              2666 	push	ar4
   06E7 C0 05              2667 	push	ar5
   06E9 C0 00              2668 	push	ar0
   06EB C0 01              2669 	push	ar1
   06ED 12s00rF9           2670 	lcall	_snakeBitmapOffset
   06F0 85 82*00           2671 	mov	_glcdUpdate_sloc0_1_0,dpl
   06F3 85 83*01           2672 	mov	(_glcdUpdate_sloc0_1_0 + 1),dph
   06F6 D0 01              2673 	pop	ar1
   06F8 D0 00              2674 	pop	ar0
   06FA D0 05              2675 	pop	ar5
   06FC D0 04              2676 	pop	ar4
   06FE D0 03              2677 	pop	ar3
   0700 D0 02              2678 	pop	ar2
                           2679 ;	snake.c:125: if(x<8)
                           2680 ;	genCmpLt
                           2681 ;	genCmp
   0702 C3                 2682 	clr	c
   0703 E8                 2683 	mov	a,r0
   0704 94 08              2684 	subb	a,#0x08
   0706 E9                 2685 	mov	a,r1
   0707 94 00              2686 	subb	a,#0x00
                           2687 ;	genIfxJump
                           2688 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0709 50 4B              2689 	jnc	00155$
                           2690 ;	Peephole 300	removed redundant label 00183$
                           2691 ;	snake.c:126: for(i=0; i<8; i++)
                           2692 ;	genAssign
   070B E4                 2693 	clr	a
   070C F5*02              2694 	mov	_glcdUpdate_sloc1_1_0,a
   070E F5*03              2695 	mov	(_glcdUpdate_sloc1_1_0 + 1),a
   0710                    2696 00116$:
                           2697 ;	genCmpLt
                           2698 ;	genCmp
   0710 C3                 2699 	clr	c
   0711 E5*02              2700 	mov	a,_glcdUpdate_sloc1_1_0
   0713 94 08              2701 	subb	a,#0x08
   0715 E5*03              2702 	mov	a,(_glcdUpdate_sloc1_1_0 + 1)
   0717 94 00              2703 	subb	a,#0x00
                           2704 ;	genIfxJump
   0719 40 03              2705 	jc	00184$
   071B 02s07r9E           2706 	ljmp	00105$
   071E                    2707 00184$:
                           2708 ;	snake.c:127: lcddata_b1(BITMAP[bitmapOffset+i]);   //Display that part on GLCD
                           2709 ;	genIpush
                           2710 ;	genCast
   071E AE*00              2711 	mov	r6,_glcdUpdate_sloc0_1_0
                           2712 ;	genCast
                           2713 ;	genPlus
                           2714 ;	Peephole 236.g	used r7 instead of ar7
                           2715 ;	peephole 177.g	optimized mov sequence
   0720 E5*02              2716 	mov	a,_glcdUpdate_sloc1_1_0
   0722 FF                 2717 	mov	r7,a
                           2718 ;	Peephole 236.a	used r6 instead of ar6
   0723 2E                 2719 	add	a,r6
                           2720 ;	genLeftShift
                           2721 ;	genLeftShiftLiteral
                           2722 ;	genlshOne
                           2723 ;	Peephole 105	removed redundant mov
                           2724 ;	genPlus
                           2725 ;	Peephole 204	removed redundant mov
   0724 25 E0              2726 	add	a,acc
                           2727 ;	Peephole 177.b	removed redundant mov
                           2728 ;	Peephole 181	changed mov to clr
                           2729 ;	genPointerGet
                           2730 ;	genCodePointerGet
                           2731 ;	Peephole 186.c	optimized movc sequence
                           2732 ;	Peephole 177.c	removed redundant move
   0726 FE                 2733 	mov	r6,a
   0727 90s00r50           2734 	mov	dptr,#_BITMAP
   072A 93                 2735 	movc	a,@a+dptr
   072B CE                 2736 	xch	a,r6
   072C A3                 2737 	inc	dptr
   072D 93                 2738 	movc	a,@a+dptr
   072E FF                 2739 	mov	r7,a
                           2740 ;	genCast
                           2741 ;	genCall
   072F 8E 82              2742 	mov	dpl,r6
   0731 C0 02              2743 	push	ar2
   0733 C0 03              2744 	push	ar3
   0735 C0 04              2745 	push	ar4
   0737 C0 05              2746 	push	ar5
   0739 C0 00              2747 	push	ar0
   073B C0 01              2748 	push	ar1
   073D 12s00r00           2749 	lcall	_lcddata_b1
   0740 D0 01              2750 	pop	ar1
   0742 D0 00              2751 	pop	ar0
   0744 D0 05              2752 	pop	ar5
   0746 D0 04              2753 	pop	ar4
   0748 D0 03              2754 	pop	ar3
   074A D0 02              2755 	pop	ar2
                           2756 ;	snake.c:126: for(i=0; i<8; i++)
                           2757 ;	genPlus
                           2758 ;     genPlusIncr
   074C 05*02              2759 	inc	_glcdUpdate_sloc1_1_0
   074E E4                 2760 	clr	a
                           2761 ;	genIpop
                           2762 ;	snake.c:129: for(i=0; i<8; i++){
                           2763 ;	Peephole 112.b	changed ljmp to sjmp
                           2764 ;	Peephole 243	avoided branch to sjmp
   074F B5*02 BE           2765 	cjne	a,_glcdUpdate_sloc1_1_0,00116$
   0752 05*03              2766 	inc	(_glcdUpdate_sloc1_1_0 + 1)
                           2767 ;	Peephole 300	removed redundant label 00185$
   0754 80 BA              2768 	sjmp	00116$
   0756                    2769 00155$:
                           2770 ;	genAssign
   0756 E4                 2771 	clr	a
   0757 F5*02              2772 	mov	_glcdUpdate_sloc1_1_0,a
   0759 F5*03              2773 	mov	(_glcdUpdate_sloc1_1_0 + 1),a
   075B                    2774 00120$:
                           2775 ;	genCmpLt
                           2776 ;	genCmp
   075B C3                 2777 	clr	c
   075C E5*02              2778 	mov	a,_glcdUpdate_sloc1_1_0
   075E 94 08              2779 	subb	a,#0x08
   0760 E5*03              2780 	mov	a,(_glcdUpdate_sloc1_1_0 + 1)
   0762 94 00              2781 	subb	a,#0x00
                           2782 ;	genIfxJump
                           2783 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0764 50 38              2784 	jnc	00105$
                           2785 ;	Peephole 300	removed redundant label 00186$
                           2786 ;	snake.c:130: lcddata_b2(BITMAP[bitmapOffset+i]);}
                           2787 ;	genIpush
                           2788 ;	genCast
   0766 AE*00              2789 	mov	r6,_glcdUpdate_sloc0_1_0
                           2790 ;	genCast
                           2791 ;	genPlus
                           2792 ;	Peephole 236.g	used r7 instead of ar7
                           2793 ;	peephole 177.g	optimized mov sequence
   0768 E5*02              2794 	mov	a,_glcdUpdate_sloc1_1_0
   076A FF                 2795 	mov	r7,a
                           2796 ;	Peephole 236.a	used r6 instead of ar6
   076B 2E                 2797 	add	a,r6
                           2798 ;	genLeftShift
                           2799 ;	genLeftShiftLiteral
                           2800 ;	genlshOne
                           2801 ;	Peephole 105	removed redundant mov
                           2802 ;	genPlus
                           2803 ;	Peephole 204	removed redundant mov
   076C 25 E0              2804 	add	a,acc
                           2805 ;	Peephole 177.b	removed redundant mov
                           2806 ;	Peephole 181	changed mov to clr
                           2807 ;	genPointerGet
                           2808 ;	genCodePointerGet
                           2809 ;	Peephole 186.c	optimized movc sequence
                           2810 ;	Peephole 177.c	removed redundant move
   076E FE                 2811 	mov	r6,a
   076F 90s00r50           2812 	mov	dptr,#_BITMAP
   0772 93                 2813 	movc	a,@a+dptr
   0773 CE                 2814 	xch	a,r6
   0774 A3                 2815 	inc	dptr
   0775 93                 2816 	movc	a,@a+dptr
   0776 FF                 2817 	mov	r7,a
                           2818 ;	genCast
                           2819 ;	genCall
   0777 8E 82              2820 	mov	dpl,r6
   0779 C0 02              2821 	push	ar2
   077B C0 03              2822 	push	ar3
   077D C0 04              2823 	push	ar4
   077F C0 05              2824 	push	ar5
   0781 C0 00              2825 	push	ar0
   0783 C0 01              2826 	push	ar1
   0785 12s00r00           2827 	lcall	_lcddata_b2
   0788 D0 01              2828 	pop	ar1
   078A D0 00              2829 	pop	ar0
   078C D0 05              2830 	pop	ar5
   078E D0 04              2831 	pop	ar4
   0790 D0 03              2832 	pop	ar3
   0792 D0 02              2833 	pop	ar2
                           2834 ;	snake.c:129: for(i=0; i<8; i++){
                           2835 ;	genPlus
                           2836 ;     genPlusIncr
   0794 05*02              2837 	inc	_glcdUpdate_sloc1_1_0
   0796 E4                 2838 	clr	a
                           2839 ;	genIpop
                           2840 ;	Peephole 112.b	changed ljmp to sjmp
                           2841 ;	Peephole 243	avoided branch to sjmp
   0797 B5*02 C1           2842 	cjne	a,_glcdUpdate_sloc1_1_0,00120$
   079A 05*03              2843 	inc	(_glcdUpdate_sloc1_1_0 + 1)
                           2844 ;	Peephole 300	removed redundant label 00187$
   079C 80 BD              2845 	sjmp	00120$
   079E                    2846 00105$:
                           2847 ;	snake.c:132: if(code_byte==code_byte_EMPTY) {       //Check if the position in GLCD is empty
                           2848 ;	genAssign
   079E 90s00r0C           2849 	mov	dptr,#_glcdUpdate_code_byte_1_1
   07A1 E0                 2850 	movx	a,@dptr
   07A2 FE                 2851 	mov	r6,a
   07A3 A3                 2852 	inc	dptr
   07A4 E0                 2853 	movx	a,@dptr
                           2854 ;	genIfx
   07A5 FF                 2855 	mov	r7,a
                           2856 ;	Peephole 135	removed redundant mov
   07A6 4E                 2857 	orl	a,r6
                           2858 ;	genIfxJump
                           2859 ;	Peephole 108.b	removed ljmp by inverse jump logic
   07A7 70 71              2860 	jnz	00110$
                           2861 ;	Peephole 300	removed redundant label 00188$
                           2862 ;	snake.c:133: if(x<8)
                           2863 ;	genCmpLt
                           2864 ;	genCmp
   07A9 C3                 2865 	clr	c
   07AA E8                 2866 	mov	a,r0
   07AB 94 08              2867 	subb	a,#0x08
   07AD E9                 2868 	mov	a,r1
   07AE 94 00              2869 	subb	a,#0x00
                           2870 ;	genIfxJump
                           2871 ;	Peephole 108.a	removed ljmp by inverse jump logic
   07B0 50 35              2872 	jnc	00160$
                           2873 ;	Peephole 300	removed redundant label 00189$
                           2874 ;	snake.c:134: for(i=0; i<8; i++)
                           2875 ;	genAssign
   07B2 7E 08              2876 	mov	r6,#0x08
   07B4 7F 00              2877 	mov	r7,#0x00
   07B6                    2878 00126$:
                           2879 ;	snake.c:135: lcddata_b1(0x00);
                           2880 ;	genCall
   07B6 75 82 00           2881 	mov	dpl,#0x00
   07B9 C0 02              2882 	push	ar2
   07BB C0 03              2883 	push	ar3
   07BD C0 04              2884 	push	ar4
   07BF C0 05              2885 	push	ar5
   07C1 C0 06              2886 	push	ar6
   07C3 C0 07              2887 	push	ar7
   07C5 C0 00              2888 	push	ar0
   07C7 C0 01              2889 	push	ar1
   07C9 12s00r00           2890 	lcall	_lcddata_b1
   07CC D0 01              2891 	pop	ar1
   07CE D0 00              2892 	pop	ar0
   07D0 D0 07              2893 	pop	ar7
   07D2 D0 06              2894 	pop	ar6
   07D4 D0 05              2895 	pop	ar5
   07D6 D0 04              2896 	pop	ar4
   07D8 D0 03              2897 	pop	ar3
   07DA D0 02              2898 	pop	ar2
                           2899 ;	genMinus
                           2900 ;	genMinusDec
   07DC 1E                 2901 	dec	r6
   07DD BE FF 01           2902 	cjne	r6,#0xff,00190$
   07E0 1F                 2903 	dec	r7
   07E1                    2904 00190$:
                           2905 ;	snake.c:134: for(i=0; i<8; i++)
                           2906 ;	genIfx
   07E1 EE                 2907 	mov	a,r6
   07E2 4F                 2908 	orl	a,r7
                           2909 ;	genIfxJump
                           2910 ;	Peephole 108.b	removed ljmp by inverse jump logic
   07E3 70 D1              2911 	jnz	00126$
                           2912 ;	Peephole 300	removed redundant label 00191$
                           2913 ;	snake.c:137: for(i=0; i<8; i++)
                           2914 ;	Peephole 112.b	changed ljmp to sjmp
   07E5 80 33              2915 	sjmp	00110$
   07E7                    2916 00160$:
                           2917 ;	genAssign
   07E7 7E 08              2918 	mov	r6,#0x08
   07E9 7F 00              2919 	mov	r7,#0x00
   07EB                    2920 00129$:
                           2921 ;	snake.c:138: lcddata_b2(0x00);
                           2922 ;	genCall
   07EB 75 82 00           2923 	mov	dpl,#0x00
   07EE C0 02              2924 	push	ar2
   07F0 C0 03              2925 	push	ar3
   07F2 C0 04              2926 	push	ar4
   07F4 C0 05              2927 	push	ar5
   07F6 C0 06              2928 	push	ar6
   07F8 C0 07              2929 	push	ar7
   07FA C0 00              2930 	push	ar0
   07FC C0 01              2931 	push	ar1
   07FE 12s00r00           2932 	lcall	_lcddata_b2
   0801 D0 01              2933 	pop	ar1
   0803 D0 00              2934 	pop	ar0
   0805 D0 07              2935 	pop	ar7
   0807 D0 06              2936 	pop	ar6
   0809 D0 05              2937 	pop	ar5
   080B D0 04              2938 	pop	ar4
   080D D0 03              2939 	pop	ar3
   080F D0 02              2940 	pop	ar2
                           2941 ;	genMinus
                           2942 ;	genMinusDec
   0811 1E                 2943 	dec	r6
   0812 BE FF 01           2944 	cjne	r6,#0xff,00192$
   0815 1F                 2945 	dec	r7
   0816                    2946 00192$:
                           2947 ;	snake.c:137: for(i=0; i<8; i++)
                           2948 ;	genIfx
   0816 EE                 2949 	mov	a,r6
   0817 4F                 2950 	orl	a,r7
                           2951 ;	genIfxJump
                           2952 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0818 70 D1              2953 	jnz	00129$
                           2954 ;	Peephole 300	removed redundant label 00193$
   081A                    2955 00110$:
                           2956 ;	snake.c:140: if(code_byte==code_byte_FOOD) {         //Check if snake food is present or not
                           2957 ;	genAssign
   081A 90s00r0C           2958 	mov	dptr,#_glcdUpdate_code_byte_1_1
   081D E0                 2959 	movx	a,@dptr
   081E FE                 2960 	mov	r6,a
   081F A3                 2961 	inc	dptr
   0820 E0                 2962 	movx	a,@dptr
   0821 FF                 2963 	mov	r7,a
                           2964 ;	genCmpEq
                           2965 ;	gencjneshort
   0822 BE 03 05           2966 	cjne	r6,#0x03,00194$
   0825 BF 00 02           2967 	cjne	r7,#0x00,00194$
   0828 80 03              2968 	sjmp	00195$
   082A                    2969 00194$:
   082A 02s08rD5           2970 	ljmp	00140$
   082D                    2971 00195$:
                           2972 ;	snake.c:141: if(x<8)
                           2973 ;	genCmpLt
                           2974 ;	genCmp
   082D C3                 2975 	clr	c
   082E E8                 2976 	mov	a,r0
   082F 94 08              2977 	subb	a,#0x08
   0831 E9                 2978 	mov	a,r1
   0832 94 00              2979 	subb	a,#0x00
                           2980 ;	genIfxJump
                           2981 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0834 50 51              2982 	jnc	00167$
                           2983 ;	Peephole 300	removed redundant label 00196$
                           2984 ;	snake.c:142: for(i=0; i<8; i++)
                           2985 ;	genAssign
   0836 7E 00              2986 	mov	r6,#0x00
   0838 7F 00              2987 	mov	r7,#0x00
   083A                    2988 00130$:
                           2989 ;	genCmpLt
                           2990 ;	genCmp
   083A C3                 2991 	clr	c
   083B EE                 2992 	mov	a,r6
   083C 94 08              2993 	subb	a,#0x08
   083E EF                 2994 	mov	a,r7
   083F 94 00              2995 	subb	a,#0x00
                           2996 ;	genIfxJump
   0841 40 03              2997 	jc	00197$
   0843 02s08rD5           2998 	ljmp	00140$
   0846                    2999 00197$:
                           3000 ;	snake.c:143: lcddata_b1(BITMAP[OFFSET_FOOD+i]);    //If present then display the food
                           3001 ;	genIpush
   0846 C0 04              3002 	push	ar4
   0848 C0 05              3003 	push	ar5
                           3004 ;	genCast
   084A 8E 04              3005 	mov	ar4,r6
                           3006 ;	genLeftShift
                           3007 ;	genLeftShiftLiteral
                           3008 ;	genlshOne
   084C EC                 3009 	mov	a,r4
                           3010 ;	Peephole 254	optimized left shift
   084D 2C                 3011 	add	a,r4
                           3012 ;	genPlus
                           3013 ;	Peephole 177.b	removed redundant mov
                           3014 ;	Peephole 181	changed mov to clr
                           3015 ;	genPointerGet
                           3016 ;	genCodePointerGet
                           3017 ;	Peephole 186.c	optimized movc sequence
                           3018 ;	Peephole 177.c	removed redundant move
   084E FC                 3019 	mov	r4,a
   084F 90s00r50           3020 	mov	dptr,#_BITMAP
   0852 93                 3021 	movc	a,@a+dptr
   0853 CC                 3022 	xch	a,r4
   0854 A3                 3023 	inc	dptr
   0855 93                 3024 	movc	a,@a+dptr
   0856 FD                 3025 	mov	r5,a
                           3026 ;	genCast
                           3027 ;	genCall
   0857 8C 82              3028 	mov	dpl,r4
   0859 C0 02              3029 	push	ar2
   085B C0 03              3030 	push	ar3
   085D C0 04              3031 	push	ar4
   085F C0 05              3032 	push	ar5
   0861 C0 06              3033 	push	ar6
   0863 C0 07              3034 	push	ar7
   0865 C0 00              3035 	push	ar0
   0867 C0 01              3036 	push	ar1
   0869 12s00r00           3037 	lcall	_lcddata_b1
   086C D0 01              3038 	pop	ar1
   086E D0 00              3039 	pop	ar0
   0870 D0 07              3040 	pop	ar7
   0872 D0 06              3041 	pop	ar6
   0874 D0 05              3042 	pop	ar5
   0876 D0 04              3043 	pop	ar4
   0878 D0 03              3044 	pop	ar3
   087A D0 02              3045 	pop	ar2
                           3046 ;	snake.c:142: for(i=0; i<8; i++)
                           3047 ;	genPlus
                           3048 ;     genPlusIncr
   087C 0E                 3049 	inc	r6
   087D BE 00 01           3050 	cjne	r6,#0x00,00198$
   0880 0F                 3051 	inc	r7
   0881                    3052 00198$:
                           3053 ;	genIpop
   0881 D0 05              3054 	pop	ar5
   0883 D0 04              3055 	pop	ar4
                           3056 ;	snake.c:145: for(i=0; i<8; i++)
                           3057 ;	Peephole 112.b	changed ljmp to sjmp
   0885 80 B3              3058 	sjmp	00130$
   0887                    3059 00167$:
                           3060 ;	genAssign
   0887 7E 00              3061 	mov	r6,#0x00
   0889 7F 00              3062 	mov	r7,#0x00
   088B                    3063 00134$:
                           3064 ;	genCmpLt
                           3065 ;	genCmp
   088B C3                 3066 	clr	c
   088C EE                 3067 	mov	a,r6
   088D 94 08              3068 	subb	a,#0x08
   088F EF                 3069 	mov	a,r7
   0890 94 00              3070 	subb	a,#0x00
                           3071 ;	genIfxJump
                           3072 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0892 50 41              3073 	jnc	00140$
                           3074 ;	Peephole 300	removed redundant label 00199$
                           3075 ;	snake.c:146: lcddata_b2(BITMAP[OFFSET_FOOD+i]);
                           3076 ;	genIpush
   0894 C0 04              3077 	push	ar4
   0896 C0 05              3078 	push	ar5
                           3079 ;	genCast
   0898 8E 04              3080 	mov	ar4,r6
                           3081 ;	genLeftShift
                           3082 ;	genLeftShiftLiteral
                           3083 ;	genlshOne
   089A EC                 3084 	mov	a,r4
                           3085 ;	Peephole 254	optimized left shift
   089B 2C                 3086 	add	a,r4
                           3087 ;	genPlus
                           3088 ;	Peephole 177.b	removed redundant mov
                           3089 ;	Peephole 181	changed mov to clr
                           3090 ;	genPointerGet
                           3091 ;	genCodePointerGet
                           3092 ;	Peephole 186.c	optimized movc sequence
                           3093 ;	Peephole 177.c	removed redundant move
   089C FC                 3094 	mov	r4,a
   089D 90s00r50           3095 	mov	dptr,#_BITMAP
   08A0 93                 3096 	movc	a,@a+dptr
   08A1 CC                 3097 	xch	a,r4
   08A2 A3                 3098 	inc	dptr
   08A3 93                 3099 	movc	a,@a+dptr
   08A4 FD                 3100 	mov	r5,a
                           3101 ;	genCast
                           3102 ;	genCall
   08A5 8C 82              3103 	mov	dpl,r4
   08A7 C0 02              3104 	push	ar2
   08A9 C0 03              3105 	push	ar3
   08AB C0 04              3106 	push	ar4
   08AD C0 05              3107 	push	ar5
   08AF C0 06              3108 	push	ar6
   08B1 C0 07              3109 	push	ar7
   08B3 C0 00              3110 	push	ar0
   08B5 C0 01              3111 	push	ar1
   08B7 12s00r00           3112 	lcall	_lcddata_b2
   08BA D0 01              3113 	pop	ar1
   08BC D0 00              3114 	pop	ar0
   08BE D0 07              3115 	pop	ar7
   08C0 D0 06              3116 	pop	ar6
   08C2 D0 05              3117 	pop	ar5
   08C4 D0 04              3118 	pop	ar4
   08C6 D0 03              3119 	pop	ar3
   08C8 D0 02              3120 	pop	ar2
                           3121 ;	snake.c:145: for(i=0; i<8; i++)
                           3122 ;	genPlus
                           3123 ;     genPlusIncr
   08CA 0E                 3124 	inc	r6
   08CB BE 00 01           3125 	cjne	r6,#0x00,00200$
   08CE 0F                 3126 	inc	r7
   08CF                    3127 00200$:
                           3128 ;	genIpop
   08CF D0 05              3129 	pop	ar5
   08D1 D0 04              3130 	pop	ar4
                           3131 ;	Peephole 112.b	changed ljmp to sjmp
   08D3 80 B6              3132 	sjmp	00134$
   08D5                    3133 00140$:
                           3134 ;	snake.c:118: for(x=0; x<16; x++)
                           3135 ;	genPlus
                           3136 ;     genPlusIncr
   08D5 08                 3137 	inc	r0
   08D6 B8 00 01           3138 	cjne	r0,#0x00,00201$
   08D9 09                 3139 	inc	r1
   08DA                    3140 00201$:
   08DA 02s06r85           3141 	ljmp	00138$
   08DD                    3142 00144$:
                           3143 ;	snake.c:111: for(y = 0; y < 8; y++) {
                           3144 ;	genPlus
                           3145 ;     genPlusIncr
   08DD 0A                 3146 	inc	r2
   08DE BA 00 01           3147 	cjne	r2,#0x00,00202$
   08E1 0B                 3148 	inc	r3
   08E2                    3149 00202$:
   08E2 02s06r27           3150 	ljmp	00142$
                           3151 ;	Peephole 259.b	removed redundant label 00146$ and ret
                           3152 ;
                           3153 ;------------------------------------------------------------
                           3154 ;Allocation info for local variables in function 'move_snake'
                           3155 ;------------------------------------------------------------
                           3156 ;tail_x                    Allocated with name '_move_snake_tail_x_1_1'
                           3157 ;tail_y                    Allocated with name '_move_snake_tail_y_1_1'
                           3158 ;head_x                    Allocated with name '_move_snake_head_x_1_1'
                           3159 ;head_y                    Allocated with name '_move_snake_head_y_1_1'
                           3160 ;i                         Allocated with name '_move_snake_i_1_1'
                           3161 ;sloc0                     Allocated with name '_move_snake_sloc0_1_0'
                           3162 ;sloc1                     Allocated with name '_move_snake_sloc1_1_0'
                           3163 ;sloc2                     Allocated with name '_move_snake_sloc2_1_0'
                           3164 ;sloc3                     Allocated with name '_move_snake_sloc3_1_0'
                           3165 ;sloc4                     Allocated with name '_move_snake_sloc4_1_0'
                           3166 ;------------------------------------------------------------
                           3167 ;	snake.c:163: unsigned int move_snake() {
                           3168 ;	-----------------------------------------
                           3169 ;	 function move_snake
                           3170 ;	-----------------------------------------
   08E5                    3171 _move_snake:
                           3172 ;	snake.c:167: tail_x = snakeX[snakeLen-1];    //Storing tail position is Snake arrays
                           3173 ;	genAssign
   08E5 90s00r00           3174 	mov	dptr,#_snakeLen
   08E8 E0                 3175 	movx	a,@dptr
   08E9 FA                 3176 	mov	r2,a
   08EA A3                 3177 	inc	dptr
   08EB E0                 3178 	movx	a,@dptr
   08EC FB                 3179 	mov	r3,a
                           3180 ;	genCast
   08ED 8A 04              3181 	mov	ar4,r2
                           3182 ;	genMinus
                           3183 ;	genMinusDec
   08EF 1C                 3184 	dec	r4
                           3185 ;	genLeftShift
                           3186 ;	genLeftShiftLiteral
                           3187 ;	genlshOne
   08F0 EC                 3188 	mov	a,r4
                           3189 ;	Peephole 254	optimized left shift
   08F1 2C                 3190 	add	a,r4
                           3191 ;	genPlus
   08F2 FC                 3192 	mov	r4,a
                           3193 ;	Peephole 177.b	removed redundant mov
   08F3 24r00              3194 	add	a,#_snakeX
   08F5 F5 82              3195 	mov	dpl,a
                           3196 ;	Peephole 181	changed mov to clr
   08F7 E4                 3197 	clr	a
   08F8 34s00              3198 	addc	a,#(_snakeX >> 8)
   08FA F5 83              3199 	mov	dph,a
                           3200 ;	genPointerGet
                           3201 ;	genFarPointerGet
   08FC E0                 3202 	movx	a,@dptr
   08FD F5*06              3203 	mov	_move_snake_sloc3_1_0,a
   08FF A3                 3204 	inc	dptr
   0900 E0                 3205 	movx	a,@dptr
   0901 F5*07              3206 	mov	(_move_snake_sloc3_1_0 + 1),a
                           3207 ;	snake.c:168: tail_y = snakeY[snakeLen-1];
                           3208 ;	genPlus
                           3209 ;	Peephole 236.g	used r4 instead of ar4
   0903 EC                 3210 	mov	a,r4
   0904 24r00              3211 	add	a,#_snakeY
   0906 F5 82              3212 	mov	dpl,a
                           3213 ;	Peephole 181	changed mov to clr
   0908 E4                 3214 	clr	a
   0909 34s00              3215 	addc	a,#(_snakeY >> 8)
   090B F5 83              3216 	mov	dph,a
                           3217 ;	genPointerGet
                           3218 ;	genFarPointerGet
   090D E0                 3219 	movx	a,@dptr
   090E FC                 3220 	mov	r4,a
   090F A3                 3221 	inc	dptr
   0910 E0                 3222 	movx	a,@dptr
   0911 FF                 3223 	mov	r7,a
                           3224 ;	snake.c:170: for(i=2;i<snakeLen;i++)         //Condition for Collision with itself
                           3225 ;	genPointerGet
                           3226 ;	genFarPointerGet
   0912 90s00r00           3227 	mov	dptr,#_snakeY
   0915 E0                 3228 	movx	a,@dptr
   0916 F8                 3229 	mov	r0,a
   0917 A3                 3230 	inc	dptr
   0918 E0                 3231 	movx	a,@dptr
   0919 F9                 3232 	mov	r1,a
                           3233 ;	genPointerGet
                           3234 ;	genFarPointerGet
   091A 90s00r00           3235 	mov	dptr,#_snakeX
   091D E0                 3236 	movx	a,@dptr
   091E F5*00              3237 	mov	_move_snake_sloc0_1_0,a
   0920 A3                 3238 	inc	dptr
   0921 E0                 3239 	movx	a,@dptr
   0922 F5*01              3240 	mov	(_move_snake_sloc0_1_0 + 1),a
                           3241 ;	genAssign
   0924 75*02 02           3242 	mov	_move_snake_sloc1_1_0,#0x02
   0927 E4                 3243 	clr	a
   0928 F5*03              3244 	mov	(_move_snake_sloc1_1_0 + 1),a
   092A                    3245 00124$:
                           3246 ;	genCmpLt
                           3247 ;	genCmp
   092A C3                 3248 	clr	c
   092B E5*02              3249 	mov	a,_move_snake_sloc1_1_0
   092D 9A                 3250 	subb	a,r2
   092E E5*03              3251 	mov	a,(_move_snake_sloc1_1_0 + 1)
   0930 9B                 3252 	subb	a,r3
                           3253 ;	genIfxJump
                           3254 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0931 50 65              3255 	jnc	00127$
                           3256 ;	Peephole 300	removed redundant label 00162$
                           3257 ;	snake.c:171: if(snakeX[0]==snakeX[i]&&snakeY[0]==snakeY[i])
                           3258 ;	genIpush
   0933 C0 04              3259 	push	ar4
   0935 C0 07              3260 	push	ar7
                           3261 ;	genLeftShift
                           3262 ;	genLeftShiftLiteral
                           3263 ;	genlshTwo
                           3264 ;	Peephole 252	optimized left shift
   0937 E5*02              3265 	mov	a,_move_snake_sloc1_1_0
   0939 25 E0              3266 	add	a,acc
   093B FD                 3267 	mov	r5,a
   093C E5*03              3268 	mov	a,(_move_snake_sloc1_1_0 + 1)
   093E 33                 3269 	rlc	a
   093F FE                 3270 	mov	r6,a
                           3271 ;	genPlus
                           3272 ;	Peephole 236.g	used r5 instead of ar5
   0940 ED                 3273 	mov	a,r5
   0941 24r00              3274 	add	a,#_snakeX
   0943 F5 82              3275 	mov	dpl,a
                           3276 ;	Peephole 236.g	used r6 instead of ar6
   0945 EE                 3277 	mov	a,r6
   0946 34s00              3278 	addc	a,#(_snakeX >> 8)
   0948 F5 83              3279 	mov	dph,a
                           3280 ;	genPointerGet
                           3281 ;	genFarPointerGet
   094A E0                 3282 	movx	a,@dptr
   094B FC                 3283 	mov	r4,a
   094C A3                 3284 	inc	dptr
   094D E0                 3285 	movx	a,@dptr
   094E FF                 3286 	mov	r7,a
                           3287 ;	genCmpEq
                           3288 ;	gencjne
                           3289 ;	gencjneshort
   094F E5*00              3290 	mov	a,_move_snake_sloc0_1_0
   0951 B5 04 09           3291 	cjne	a,ar4,00163$
   0954 E5*01              3292 	mov	a,(_move_snake_sloc0_1_0 + 1)
   0956 B5 07 04           3293 	cjne	a,ar7,00163$
   0959 74 01              3294 	mov	a,#0x01
   095B 80 01              3295 	sjmp	00164$
   095D                    3296 00163$:
   095D E4                 3297 	clr	a
   095E                    3298 00164$:
                           3299 ;	genIpop
   095E D0 07              3300 	pop	ar7
   0960 D0 04              3301 	pop	ar4
                           3302 ;	genIfx
                           3303 ;	genIfxJump
                           3304 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0962 60 2A              3305 	jz	00126$
                           3306 ;	Peephole 300	removed redundant label 00165$
                           3307 ;	genIpush
   0964 C0 04              3308 	push	ar4
   0966 C0 07              3309 	push	ar7
                           3310 ;	genPlus
                           3311 ;	Peephole 236.g	used r5 instead of ar5
   0968 ED                 3312 	mov	a,r5
   0969 24r00              3313 	add	a,#_snakeY
   096B F5 82              3314 	mov	dpl,a
                           3315 ;	Peephole 236.g	used r6 instead of ar6
   096D EE                 3316 	mov	a,r6
   096E 34s00              3317 	addc	a,#(_snakeY >> 8)
   0970 F5 83              3318 	mov	dph,a
                           3319 ;	genPointerGet
                           3320 ;	genFarPointerGet
   0972 E0                 3321 	movx	a,@dptr
   0973 FC                 3322 	mov	r4,a
   0974 A3                 3323 	inc	dptr
   0975 E0                 3324 	movx	a,@dptr
   0976 FF                 3325 	mov	r7,a
                           3326 ;	genCmpEq
                           3327 ;	gencjne
                           3328 ;	gencjneshort
   0977 E8                 3329 	mov	a,r0
   0978 B5 04 08           3330 	cjne	a,ar4,00166$
   097B E9                 3331 	mov	a,r1
   097C B5 07 04           3332 	cjne	a,ar7,00166$
   097F 74 01              3333 	mov	a,#0x01
   0981 80 01              3334 	sjmp	00167$
   0983                    3335 00166$:
   0983 E4                 3336 	clr	a
   0984                    3337 00167$:
                           3338 ;	genIpop
   0984 D0 07              3339 	pop	ar7
   0986 D0 04              3340 	pop	ar4
                           3341 ;	genIfx
                           3342 ;	genIfxJump
                           3343 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0988 60 04              3344 	jz	00126$
                           3345 ;	Peephole 300	removed redundant label 00168$
                           3346 ;	snake.c:172: return -1;
                           3347 ;	genRet
                           3348 ;	Peephole 182.b	used 16 bit load of dptr
   098A 90 FF FF           3349 	mov	dptr,#0xFFFF
                           3350 ;	Peephole 251.a	replaced ljmp to ret with ret
   098D 22                 3351 	ret
   098E                    3352 00126$:
                           3353 ;	snake.c:170: for(i=2;i<snakeLen;i++)         //Condition for Collision with itself
                           3354 ;	genPlus
                           3355 ;     genPlusIncr
   098E 05*02              3356 	inc	_move_snake_sloc1_1_0
   0990 E4                 3357 	clr	a
                           3358 ;	Peephole 112.b	changed ljmp to sjmp
                           3359 ;	Peephole 243	avoided branch to sjmp
   0991 B5*02 96           3360 	cjne	a,_move_snake_sloc1_1_0,00124$
   0994 05*03              3361 	inc	(_move_snake_sloc1_1_0 + 1)
                           3362 ;	Peephole 300	removed redundant label 00169$
   0996 80 92              3363 	sjmp	00124$
   0998                    3364 00127$:
                           3365 ;	snake.c:174: for(i=snakeLen-1; i>0; i--) {
                           3366 ;	genMinus
                           3367 ;	genMinusDec
   0998 EA                 3368 	mov	a,r2
   0999 24 FF              3369 	add	a,#0xff
   099B FD                 3370 	mov	r5,a
   099C EB                 3371 	mov	a,r3
   099D 34 FF              3372 	addc	a,#0xff
   099F FE                 3373 	mov	r6,a
                           3374 ;	genAssign
   09A0 8D*04              3375 	mov	_move_snake_sloc2_1_0,r5
   09A2 8E*05              3376 	mov	(_move_snake_sloc2_1_0 + 1),r6
   09A4                    3377 00128$:
                           3378 ;	genIfx
   09A4 E5*04              3379 	mov	a,_move_snake_sloc2_1_0
   09A6 45*05              3380 	orl	a,(_move_snake_sloc2_1_0 + 1)
                           3381 ;	genIfxJump
                           3382 ;	Peephole 108.c	removed ljmp by inverse jump logic
   09A8 60 04              3383 	jz	00138$
                           3384 ;	Peephole 300	removed redundant label 00170$
                           3385 ;	genAssign
   09AA 7D 01              3386 	mov	r5,#0x01
                           3387 ;	Peephole 112.b	changed ljmp to sjmp
   09AC 80 02              3388 	sjmp	00139$
   09AE                    3389 00138$:
                           3390 ;	genAssign
   09AE 7D 00              3391 	mov	r5,#0x00
   09B0                    3392 00139$:
                           3393 ;	genIfx
   09B0 ED                 3394 	mov	a,r5
                           3395 ;	genIfxJump
                           3396 ;	Peephole 108.c	removed ljmp by inverse jump logic
   09B1 60 69              3397 	jz	00131$
                           3398 ;	Peephole 300	removed redundant label 00171$
                           3399 ;	snake.c:175: snakeX[i] = snakeX[i-1];
                           3400 ;	genIpush
   09B3 C0 04              3401 	push	ar4
   09B5 C0 07              3402 	push	ar7
                           3403 ;	genLeftShift
                           3404 ;	genLeftShiftLiteral
                           3405 ;	genlshTwo
                           3406 ;	Peephole 252	optimized left shift
   09B7 E5*04              3407 	mov	a,_move_snake_sloc2_1_0
   09B9 25 E0              3408 	add	a,acc
   09BB FC                 3409 	mov	r4,a
   09BC E5*05              3410 	mov	a,(_move_snake_sloc2_1_0 + 1)
   09BE 33                 3411 	rlc	a
   09BF FF                 3412 	mov	r7,a
                           3413 ;	genPlus
                           3414 ;	Peephole 236.g	used r4 instead of ar4
   09C0 EC                 3415 	mov	a,r4
   09C1 24r00              3416 	add	a,#_snakeX
   09C3 F5*02              3417 	mov	_move_snake_sloc1_1_0,a
                           3418 ;	Peephole 236.g	used r7 instead of ar7
   09C5 EF                 3419 	mov	a,r7
   09C6 34s00              3420 	addc	a,#(_snakeX >> 8)
   09C8 F5*03              3421 	mov	(_move_snake_sloc1_1_0 + 1),a
                           3422 ;	genCast
   09CA AD*04              3423 	mov	r5,_move_snake_sloc2_1_0
                           3424 ;	genMinus
                           3425 ;	genMinusDec
   09CC 1D                 3426 	dec	r5
                           3427 ;	genLeftShift
                           3428 ;	genLeftShiftLiteral
                           3429 ;	genlshOne
   09CD ED                 3430 	mov	a,r5
                           3431 ;	Peephole 254	optimized left shift
   09CE 2D                 3432 	add	a,r5
   09CF F5*08              3433 	mov	_move_snake_sloc4_1_0,a
                           3434 ;	genPlus
   09D1 E5*08              3435 	mov	a,_move_snake_sloc4_1_0
   09D3 24r00              3436 	add	a,#_snakeX
   09D5 F5 82              3437 	mov	dpl,a
                           3438 ;	Peephole 181	changed mov to clr
   09D7 E4                 3439 	clr	a
   09D8 34s00              3440 	addc	a,#(_snakeX >> 8)
   09DA F5 83              3441 	mov	dph,a
                           3442 ;	genPointerGet
                           3443 ;	genFarPointerGet
   09DC E0                 3444 	movx	a,@dptr
   09DD FE                 3445 	mov	r6,a
   09DE A3                 3446 	inc	dptr
   09DF E0                 3447 	movx	a,@dptr
   09E0 FD                 3448 	mov	r5,a
                           3449 ;	genPointerSet
                           3450 ;     genFarPointerSet
   09E1 85*02 82           3451 	mov	dpl,_move_snake_sloc1_1_0
   09E4 85*03 83           3452 	mov	dph,(_move_snake_sloc1_1_0 + 1)
   09E7 EE                 3453 	mov	a,r6
   09E8 F0                 3454 	movx	@dptr,a
   09E9 A3                 3455 	inc	dptr
   09EA ED                 3456 	mov	a,r5
   09EB F0                 3457 	movx	@dptr,a
                           3458 ;	snake.c:176: snakeY[i] = snakeY[i-1];
                           3459 ;	genPlus
                           3460 ;	Peephole 236.g	used r4 instead of ar4
   09EC EC                 3461 	mov	a,r4
   09ED 24r00              3462 	add	a,#_snakeY
   09EF FC                 3463 	mov	r4,a
                           3464 ;	Peephole 236.g	used r7 instead of ar7
   09F0 EF                 3465 	mov	a,r7
   09F1 34s00              3466 	addc	a,#(_snakeY >> 8)
   09F3 FF                 3467 	mov	r7,a
                           3468 ;	genPlus
   09F4 E5*08              3469 	mov	a,_move_snake_sloc4_1_0
   09F6 24r00              3470 	add	a,#_snakeY
   09F8 F5 82              3471 	mov	dpl,a
                           3472 ;	Peephole 181	changed mov to clr
   09FA E4                 3473 	clr	a
   09FB 34s00              3474 	addc	a,#(_snakeY >> 8)
   09FD F5 83              3475 	mov	dph,a
                           3476 ;	genPointerGet
                           3477 ;	genFarPointerGet
   09FF E0                 3478 	movx	a,@dptr
   0A00 FD                 3479 	mov	r5,a
   0A01 A3                 3480 	inc	dptr
   0A02 E0                 3481 	movx	a,@dptr
   0A03 FE                 3482 	mov	r6,a
                           3483 ;	genPointerSet
                           3484 ;     genFarPointerSet
   0A04 8C 82              3485 	mov	dpl,r4
   0A06 8F 83              3486 	mov	dph,r7
   0A08 ED                 3487 	mov	a,r5
   0A09 F0                 3488 	movx	@dptr,a
   0A0A A3                 3489 	inc	dptr
   0A0B EE                 3490 	mov	a,r6
   0A0C F0                 3491 	movx	@dptr,a
                           3492 ;	snake.c:174: for(i=snakeLen-1; i>0; i--) {
                           3493 ;	genMinus
                           3494 ;	genMinusDec
   0A0D 15*04              3495 	dec	_move_snake_sloc2_1_0
   0A0F 74 FF              3496 	mov	a,#0xff
   0A11 B5*04 02           3497 	cjne	a,_move_snake_sloc2_1_0,00172$
   0A14 15*05              3498 	dec	(_move_snake_sloc2_1_0 + 1)
   0A16                    3499 00172$:
                           3500 ;	genIpop
   0A16 D0 07              3501 	pop	ar7
   0A18 D0 04              3502 	pop	ar4
                           3503 ;	Peephole 112.b	changed ljmp to sjmp
   0A1A 80 88              3504 	sjmp	00128$
   0A1C                    3505 00131$:
                           3506 ;	snake.c:179: head_x = snakeX[0];             //Storing head position in Snake arrays
                           3507 ;	genAssign
   0A1C 90s00r0E           3508 	mov	dptr,#_move_snake_head_x_1_1
   0A1F E5*00              3509 	mov	a,_move_snake_sloc0_1_0
   0A21 F0                 3510 	movx	@dptr,a
   0A22 A3                 3511 	inc	dptr
   0A23 E5*01              3512 	mov	a,(_move_snake_sloc0_1_0 + 1)
   0A25 F0                 3513 	movx	@dptr,a
                           3514 ;	snake.c:180: head_y = snakeY[0];
                           3515 ;	genAssign
   0A26 90s00r10           3516 	mov	dptr,#_move_snake_head_y_1_1
   0A29 E8                 3517 	mov	a,r0
   0A2A F0                 3518 	movx	@dptr,a
   0A2B A3                 3519 	inc	dptr
   0A2C E9                 3520 	mov	a,r1
   0A2D F0                 3521 	movx	@dptr,a
                           3522 ;	snake.c:182: switch(snakeDir) {              //Switch case to check in which direction snake should move
                           3523 ;	genAssign
   0A2E 90s00r00           3524 	mov	dptr,#_snakeDir
   0A31 E0                 3525 	movx	a,@dptr
   0A32 FD                 3526 	mov	r5,a
   0A33 A3                 3527 	inc	dptr
   0A34 E0                 3528 	movx	a,@dptr
   0A35 FE                 3529 	mov	r6,a
                           3530 ;	genCmpEq
                           3531 ;	gencjneshort
   0A36 BD 00 05           3532 	cjne	r5,#0x00,00173$
   0A39 BE 00 02           3533 	cjne	r6,#0x00,00173$
                           3534 ;	Peephole 112.b	changed ljmp to sjmp
   0A3C 80 18              3535 	sjmp	00104$
   0A3E                    3536 00173$:
                           3537 ;	genCmpEq
                           3538 ;	gencjneshort
   0A3E BD 01 05           3539 	cjne	r5,#0x01,00174$
   0A41 BE 00 02           3540 	cjne	r6,#0x00,00174$
                           3541 ;	Peephole 112.b	changed ljmp to sjmp
   0A44 80 22              3542 	sjmp	00105$
   0A46                    3543 00174$:
                           3544 ;	genCmpEq
                           3545 ;	gencjneshort
   0A46 BD 02 05           3546 	cjne	r5,#0x02,00175$
   0A49 BE 00 02           3547 	cjne	r6,#0x00,00175$
                           3548 ;	Peephole 112.b	changed ljmp to sjmp
   0A4C 80 29              3549 	sjmp	00106$
   0A4E                    3550 00175$:
                           3551 ;	genCmpEq
                           3552 ;	gencjneshort
                           3553 ;	Peephole 112.b	changed ljmp to sjmp
                           3554 ;	snake.c:183: case 0: head_y--; break;
                           3555 ;	Peephole 112.b	changed ljmp to sjmp
                           3556 ;	Peephole 198.a	optimized misc jump sequence
   0A4E BD 03 45           3557 	cjne	r5,#0x03,00108$
   0A51 BE 00 42           3558 	cjne	r6,#0x00,00108$
   0A54 80 2E              3559 	sjmp	00107$
                           3560 ;	Peephole 300	removed redundant label 00176$
   0A56                    3561 00104$:
                           3562 ;	genMinus
                           3563 ;	genMinusDec
   0A56 E8                 3564 	mov	a,r0
   0A57 24 FF              3565 	add	a,#0xff
   0A59 FD                 3566 	mov	r5,a
   0A5A E9                 3567 	mov	a,r1
   0A5B 34 FF              3568 	addc	a,#0xff
   0A5D FE                 3569 	mov	r6,a
                           3570 ;	genAssign
   0A5E 90s00r10           3571 	mov	dptr,#_move_snake_head_y_1_1
   0A61 ED                 3572 	mov	a,r5
   0A62 F0                 3573 	movx	@dptr,a
   0A63 A3                 3574 	inc	dptr
   0A64 EE                 3575 	mov	a,r6
   0A65 F0                 3576 	movx	@dptr,a
                           3577 ;	snake.c:184: case 1: head_x++; break;
                           3578 ;	Peephole 112.b	changed ljmp to sjmp
   0A66 80 2E              3579 	sjmp	00108$
   0A68                    3580 00105$:
                           3581 ;	genPlus
   0A68 90s00r0E           3582 	mov	dptr,#_move_snake_head_x_1_1
                           3583 ;     genPlusIncr
   0A6B 74 01              3584 	mov	a,#0x01
   0A6D 25*00              3585 	add	a,_move_snake_sloc0_1_0
   0A6F F0                 3586 	movx	@dptr,a
                           3587 ;	Peephole 181	changed mov to clr
   0A70 E4                 3588 	clr	a
   0A71 35*01              3589 	addc	a,(_move_snake_sloc0_1_0 + 1)
   0A73 A3                 3590 	inc	dptr
   0A74 F0                 3591 	movx	@dptr,a
                           3592 ;	snake.c:185: case 2: head_y++; break;
                           3593 ;	Peephole 112.b	changed ljmp to sjmp
   0A75 80 1F              3594 	sjmp	00108$
   0A77                    3595 00106$:
                           3596 ;	genPlus
   0A77 90s00r10           3597 	mov	dptr,#_move_snake_head_y_1_1
                           3598 ;     genPlusIncr
   0A7A 74 01              3599 	mov	a,#0x01
                           3600 ;	Peephole 236.a	used r0 instead of ar0
   0A7C 28                 3601 	add	a,r0
   0A7D F0                 3602 	movx	@dptr,a
                           3603 ;	Peephole 181	changed mov to clr
   0A7E E4                 3604 	clr	a
                           3605 ;	Peephole 236.b	used r1 instead of ar1
   0A7F 39                 3606 	addc	a,r1
   0A80 A3                 3607 	inc	dptr
   0A81 F0                 3608 	movx	@dptr,a
                           3609 ;	snake.c:186: case 3: head_x--; break;
                           3610 ;	Peephole 112.b	changed ljmp to sjmp
   0A82 80 12              3611 	sjmp	00108$
   0A84                    3612 00107$:
                           3613 ;	genMinus
                           3614 ;	genMinusDec
   0A84 E5*00              3615 	mov	a,_move_snake_sloc0_1_0
   0A86 24 FF              3616 	add	a,#0xff
   0A88 FD                 3617 	mov	r5,a
   0A89 E5*01              3618 	mov	a,(_move_snake_sloc0_1_0 + 1)
   0A8B 34 FF              3619 	addc	a,#0xff
   0A8D FE                 3620 	mov	r6,a
                           3621 ;	genAssign
   0A8E 90s00r0E           3622 	mov	dptr,#_move_snake_head_x_1_1
   0A91 ED                 3623 	mov	a,r5
   0A92 F0                 3624 	movx	@dptr,a
   0A93 A3                 3625 	inc	dptr
   0A94 EE                 3626 	mov	a,r6
   0A95 F0                 3627 	movx	@dptr,a
                           3628 ;	snake.c:187: }
   0A96                    3629 00108$:
                           3630 ;	snake.c:189: snakeX[0] = head_x;
                           3631 ;	genAssign
   0A96 90s00r0E           3632 	mov	dptr,#_move_snake_head_x_1_1
   0A99 E0                 3633 	movx	a,@dptr
   0A9A FD                 3634 	mov	r5,a
   0A9B A3                 3635 	inc	dptr
   0A9C E0                 3636 	movx	a,@dptr
   0A9D FE                 3637 	mov	r6,a
                           3638 ;	genPointerSet
                           3639 ;     genFarPointerSet
   0A9E 90s00r00           3640 	mov	dptr,#_snakeX
   0AA1 ED                 3641 	mov	a,r5
   0AA2 F0                 3642 	movx	@dptr,a
   0AA3 A3                 3643 	inc	dptr
   0AA4 EE                 3644 	mov	a,r6
   0AA5 F0                 3645 	movx	@dptr,a
                           3646 ;	snake.c:190: snakeY[0] = head_y;
                           3647 ;	genAssign
   0AA6 90s00r10           3648 	mov	dptr,#_move_snake_head_y_1_1
   0AA9 E0                 3649 	movx	a,@dptr
   0AAA F8                 3650 	mov	r0,a
   0AAB A3                 3651 	inc	dptr
   0AAC E0                 3652 	movx	a,@dptr
   0AAD F9                 3653 	mov	r1,a
                           3654 ;	genPointerSet
                           3655 ;     genFarPointerSet
   0AAE 90s00r00           3656 	mov	dptr,#_snakeY
   0AB1 E8                 3657 	mov	a,r0
   0AB2 F0                 3658 	movx	@dptr,a
   0AB3 A3                 3659 	inc	dptr
   0AB4 E9                 3660 	mov	a,r1
   0AB5 F0                 3661 	movx	@dptr,a
                           3662 ;	snake.c:192: if(head_x < 0)              //Conditions for collision with wall
                           3663 ;	genCmpLt
                           3664 ;	genCmp
   0AB6 EE                 3665 	mov	a,r6
                           3666 ;	genIfxJump
                           3667 ;	Peephole 108.d	removed ljmp by inverse jump logic
   0AB7 30 E7 04           3668 	jnb	acc.7,00110$
                           3669 ;	Peephole 300	removed redundant label 00177$
                           3670 ;	snake.c:193: return -1;
                           3671 ;	genRet
                           3672 ;	Peephole 182.b	used 16 bit load of dptr
   0ABA 90 FF FF           3673 	mov	dptr,#0xFFFF
                           3674 ;	Peephole 251.a	replaced ljmp to ret with ret
   0ABD 22                 3675 	ret
   0ABE                    3676 00110$:
                           3677 ;	snake.c:195: if(head_y < 0)
                           3678 ;	genCmpLt
                           3679 ;	genCmp
   0ABE E9                 3680 	mov	a,r1
                           3681 ;	genIfxJump
                           3682 ;	Peephole 108.d	removed ljmp by inverse jump logic
   0ABF 30 E7 04           3683 	jnb	acc.7,00112$
                           3684 ;	Peephole 300	removed redundant label 00178$
                           3685 ;	snake.c:196: return -1;
                           3686 ;	genRet
                           3687 ;	Peephole 182.b	used 16 bit load of dptr
   0AC2 90 FF FF           3688 	mov	dptr,#0xFFFF
                           3689 ;	Peephole 251.a	replaced ljmp to ret with ret
   0AC5 22                 3690 	ret
   0AC6                    3691 00112$:
                           3692 ;	snake.c:198: if(head_x >= 16)
                           3693 ;	genCmpLt
                           3694 ;	genCmp
   0AC6 C3                 3695 	clr	c
   0AC7 ED                 3696 	mov	a,r5
   0AC8 94 10              3697 	subb	a,#0x10
   0ACA EE                 3698 	mov	a,r6
   0ACB 64 80              3699 	xrl	a,#0x80
   0ACD 94 80              3700 	subb	a,#0x80
                           3701 ;	genIfxJump
                           3702 ;	Peephole 112.b	changed ljmp to sjmp
                           3703 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0ACF 40 04              3704 	jc	00114$
                           3705 ;	Peephole 300	removed redundant label 00179$
                           3706 ;	snake.c:199: return -1;
                           3707 ;	genRet
                           3708 ;	Peephole 182.b	used 16 bit load of dptr
   0AD1 90 FF FF           3709 	mov	dptr,#0xFFFF
                           3710 ;	Peephole 251.a	replaced ljmp to ret with ret
   0AD4 22                 3711 	ret
   0AD5                    3712 00114$:
                           3713 ;	snake.c:201: if(head_y >= 8)
                           3714 ;	genCmpLt
                           3715 ;	genCmp
   0AD5 C3                 3716 	clr	c
   0AD6 E8                 3717 	mov	a,r0
   0AD7 94 08              3718 	subb	a,#0x08
   0AD9 E9                 3719 	mov	a,r1
   0ADA 64 80              3720 	xrl	a,#0x80
   0ADC 94 80              3721 	subb	a,#0x80
                           3722 ;	genIfxJump
                           3723 ;	Peephole 112.b	changed ljmp to sjmp
                           3724 ;	Peephole 160.a	removed sjmp by inverse jump logic
   0ADE 40 04              3725 	jc	00158$
                           3726 ;	Peephole 300	removed redundant label 00180$
                           3727 ;	snake.c:202: return -1;
                           3728 ;	genRet
                           3729 ;	Peephole 182.b	used 16 bit load of dptr
   0AE0 90 FF FF           3730 	mov	dptr,#0xFFFF
                           3731 ;	Peephole 251.a	replaced ljmp to ret with ret
   0AE3 22                 3732 	ret
                           3733 ;	snake.c:204: for(i=2;i<snakeLen;i++)         //Condition for Collision with itself
   0AE4                    3734 00158$:
                           3735 ;	genAssign
   0AE4 7D 02              3736 	mov	r5,#0x02
   0AE6 7E 00              3737 	mov	r6,#0x00
   0AE8                    3738 00132$:
                           3739 ;	genCmpLt
                           3740 ;	genCmp
   0AE8 C3                 3741 	clr	c
   0AE9 ED                 3742 	mov	a,r5
   0AEA 9A                 3743 	subb	a,r2
   0AEB EE                 3744 	mov	a,r6
   0AEC 9B                 3745 	subb	a,r3
                           3746 ;	genIfxJump
                           3747 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0AED 50 77              3748 	jnc	00135$
                           3749 ;	Peephole 300	removed redundant label 00181$
                           3750 ;	snake.c:205: if(snakeX[0]==snakeX[i]&&snakeY[0]==snakeY[i])
                           3751 ;	genIpush
   0AEF C0 04              3752 	push	ar4
   0AF1 C0 07              3753 	push	ar7
                           3754 ;	genPointerGet
                           3755 ;	genFarPointerGet
   0AF3 90s00r00           3756 	mov	dptr,#_snakeX
   0AF6 E0                 3757 	movx	a,@dptr
   0AF7 F8                 3758 	mov	r0,a
   0AF8 A3                 3759 	inc	dptr
   0AF9 E0                 3760 	movx	a,@dptr
   0AFA F9                 3761 	mov	r1,a
                           3762 ;	genLeftShift
                           3763 ;	genLeftShiftLiteral
                           3764 ;	genlshTwo
   0AFB 8D*04              3765 	mov	_move_snake_sloc2_1_0,r5
   0AFD EE                 3766 	mov	a,r6
   0AFE C5*04              3767 	xch	a,_move_snake_sloc2_1_0
   0B00 25 E0              3768 	add	a,acc
   0B02 C5*04              3769 	xch	a,_move_snake_sloc2_1_0
   0B04 33                 3770 	rlc	a
   0B05 F5*05              3771 	mov	(_move_snake_sloc2_1_0 + 1),a
                           3772 ;	genPlus
   0B07 E5*04              3773 	mov	a,_move_snake_sloc2_1_0
   0B09 24r00              3774 	add	a,#_snakeX
   0B0B F5 82              3775 	mov	dpl,a
   0B0D E5*05              3776 	mov	a,(_move_snake_sloc2_1_0 + 1)
   0B0F 34s00              3777 	addc	a,#(_snakeX >> 8)
   0B11 F5 83              3778 	mov	dph,a
                           3779 ;	genPointerGet
                           3780 ;	genFarPointerGet
   0B13 E0                 3781 	movx	a,@dptr
   0B14 FC                 3782 	mov	r4,a
   0B15 A3                 3783 	inc	dptr
   0B16 E0                 3784 	movx	a,@dptr
   0B17 FF                 3785 	mov	r7,a
                           3786 ;	genCmpEq
                           3787 ;	gencjne
                           3788 ;	gencjneshort
   0B18 E8                 3789 	mov	a,r0
   0B19 B5 04 08           3790 	cjne	a,ar4,00182$
   0B1C E9                 3791 	mov	a,r1
   0B1D B5 07 04           3792 	cjne	a,ar7,00182$
   0B20 74 01              3793 	mov	a,#0x01
   0B22 80 01              3794 	sjmp	00183$
   0B24                    3795 00182$:
   0B24 E4                 3796 	clr	a
   0B25                    3797 00183$:
                           3798 ;	genIpop
   0B25 D0 07              3799 	pop	ar7
   0B27 D0 04              3800 	pop	ar4
                           3801 ;	genIfx
                           3802 ;	genIfxJump
                           3803 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0B29 60 34              3804 	jz	00134$
                           3805 ;	Peephole 300	removed redundant label 00184$
                           3806 ;	genIpush
   0B2B C0 04              3807 	push	ar4
   0B2D C0 07              3808 	push	ar7
                           3809 ;	genPointerGet
                           3810 ;	genFarPointerGet
   0B2F 90s00r00           3811 	mov	dptr,#_snakeY
   0B32 E0                 3812 	movx	a,@dptr
   0B33 F8                 3813 	mov	r0,a
   0B34 A3                 3814 	inc	dptr
   0B35 E0                 3815 	movx	a,@dptr
   0B36 F9                 3816 	mov	r1,a
                           3817 ;	genPlus
   0B37 E5*04              3818 	mov	a,_move_snake_sloc2_1_0
   0B39 24r00              3819 	add	a,#_snakeY
   0B3B F5 82              3820 	mov	dpl,a
   0B3D E5*05              3821 	mov	a,(_move_snake_sloc2_1_0 + 1)
   0B3F 34s00              3822 	addc	a,#(_snakeY >> 8)
   0B41 F5 83              3823 	mov	dph,a
                           3824 ;	genPointerGet
                           3825 ;	genFarPointerGet
   0B43 E0                 3826 	movx	a,@dptr
   0B44 FC                 3827 	mov	r4,a
   0B45 A3                 3828 	inc	dptr
   0B46 E0                 3829 	movx	a,@dptr
   0B47 FF                 3830 	mov	r7,a
                           3831 ;	genCmpEq
                           3832 ;	gencjne
                           3833 ;	gencjneshort
   0B48 E8                 3834 	mov	a,r0
   0B49 B5 04 08           3835 	cjne	a,ar4,00185$
   0B4C E9                 3836 	mov	a,r1
   0B4D B5 07 04           3837 	cjne	a,ar7,00185$
   0B50 74 01              3838 	mov	a,#0x01
   0B52 80 01              3839 	sjmp	00186$
   0B54                    3840 00185$:
   0B54 E4                 3841 	clr	a
   0B55                    3842 00186$:
                           3843 ;	genIpop
   0B55 D0 07              3844 	pop	ar7
   0B57 D0 04              3845 	pop	ar4
                           3846 ;	genIfx
                           3847 ;	genIfxJump
                           3848 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0B59 60 04              3849 	jz	00134$
                           3850 ;	Peephole 300	removed redundant label 00187$
                           3851 ;	snake.c:206: return -1;
                           3852 ;	genRet
                           3853 ;	Peephole 182.b	used 16 bit load of dptr
   0B5B 90 FF FF           3854 	mov	dptr,#0xFFFF
                           3855 ;	Peephole 251.a	replaced ljmp to ret with ret
   0B5E 22                 3856 	ret
   0B5F                    3857 00134$:
                           3858 ;	snake.c:204: for(i=2;i<snakeLen;i++)         //Condition for Collision with itself
                           3859 ;	genPlus
                           3860 ;     genPlusIncr
   0B5F 0D                 3861 	inc	r5
                           3862 ;	Peephole 112.b	changed ljmp to sjmp
                           3863 ;	Peephole 243	avoided branch to sjmp
   0B60 BD 00 85           3864 	cjne	r5,#0x00,00132$
   0B63 0E                 3865 	inc	r6
                           3866 ;	Peephole 300	removed redundant label 00188$
   0B64 80 82              3867 	sjmp	00132$
   0B66                    3868 00135$:
                           3869 ;	snake.c:209: if(arena[head_x][head_y] != code_byte_FOOD) {  // nothing eaten
                           3870 ;	genAssign
   0B66 90s00r0E           3871 	mov	dptr,#_move_snake_head_x_1_1
   0B69 E0                 3872 	movx	a,@dptr
   0B6A FD                 3873 	mov	r5,a
   0B6B A3                 3874 	inc	dptr
   0B6C E0                 3875 	movx	a,@dptr
                           3876 ;	genLeftShift
                           3877 ;	genLeftShiftLiteral
                           3878 ;	genlshTwo
   0B6D FE                 3879 	mov	r6,a
                           3880 ;	Peephole 105	removed redundant mov
   0B6E C4                 3881 	swap	a
   0B6F 54 F0              3882 	anl	a,#0xf0
   0B71 CD                 3883 	xch	a,r5
   0B72 C4                 3884 	swap	a
   0B73 CD                 3885 	xch	a,r5
   0B74 6D                 3886 	xrl	a,r5
   0B75 CD                 3887 	xch	a,r5
   0B76 54 F0              3888 	anl	a,#0xf0
   0B78 CD                 3889 	xch	a,r5
   0B79 6D                 3890 	xrl	a,r5
   0B7A FE                 3891 	mov	r6,a
                           3892 ;	genPlus
                           3893 ;	Peephole 236.g	used r5 instead of ar5
   0B7B ED                 3894 	mov	a,r5
   0B7C 24r00              3895 	add	a,#_arena
   0B7E FD                 3896 	mov	r5,a
                           3897 ;	Peephole 236.g	used r6 instead of ar6
   0B7F EE                 3898 	mov	a,r6
   0B80 34s00              3899 	addc	a,#(_arena >> 8)
   0B82 FE                 3900 	mov	r6,a
                           3901 ;	genAssign
   0B83 90s00r10           3902 	mov	dptr,#_move_snake_head_y_1_1
   0B86 E0                 3903 	movx	a,@dptr
   0B87 F8                 3904 	mov	r0,a
   0B88 A3                 3905 	inc	dptr
   0B89 E0                 3906 	movx	a,@dptr
                           3907 ;	genLeftShift
                           3908 ;	genLeftShiftLiteral
                           3909 ;	genlshTwo
   0B8A F9                 3910 	mov	r1,a
                           3911 ;	Peephole 105	removed redundant mov
   0B8B C8                 3912 	xch	a,r0
   0B8C 25 E0              3913 	add	a,acc
   0B8E C8                 3914 	xch	a,r0
   0B8F 33                 3915 	rlc	a
   0B90 F9                 3916 	mov	r1,a
                           3917 ;	genPlus
                           3918 ;	Peephole 236.g	used r0 instead of ar0
   0B91 E8                 3919 	mov	a,r0
                           3920 ;	Peephole 236.a	used r5 instead of ar5
   0B92 2D                 3921 	add	a,r5
   0B93 F5 82              3922 	mov	dpl,a
                           3923 ;	Peephole 236.g	used r1 instead of ar1
   0B95 E9                 3924 	mov	a,r1
                           3925 ;	Peephole 236.b	used r6 instead of ar6
   0B96 3E                 3926 	addc	a,r6
   0B97 F5 83              3927 	mov	dph,a
                           3928 ;	genPointerGet
                           3929 ;	genFarPointerGet
   0B99 E0                 3930 	movx	a,@dptr
   0B9A FD                 3931 	mov	r5,a
   0B9B A3                 3932 	inc	dptr
   0B9C E0                 3933 	movx	a,@dptr
   0B9D FE                 3934 	mov	r6,a
                           3935 ;	genCmpEq
                           3936 ;	gencjneshort
   0B9E BD 03 05           3937 	cjne	r5,#0x03,00189$
   0BA1 BE 00 02           3938 	cjne	r6,#0x00,00189$
                           3939 ;	Peephole 112.b	changed ljmp to sjmp
   0BA4 80 2E              3940 	sjmp	00121$
   0BA6                    3941 00189$:
                           3942 ;	snake.c:210: arena[tail_x][tail_y] = code_byte_EMPTY;  // cut tail
                           3943 ;	genLeftShift
                           3944 ;	genLeftShiftLiteral
                           3945 ;	genlshTwo
   0BA6 AD*06              3946 	mov	r5,_move_snake_sloc3_1_0
   0BA8 E5*07              3947 	mov	a,(_move_snake_sloc3_1_0 + 1)
   0BAA C4                 3948 	swap	a
   0BAB 54 F0              3949 	anl	a,#0xf0
   0BAD CD                 3950 	xch	a,r5
   0BAE C4                 3951 	swap	a
   0BAF CD                 3952 	xch	a,r5
   0BB0 6D                 3953 	xrl	a,r5
   0BB1 CD                 3954 	xch	a,r5
   0BB2 54 F0              3955 	anl	a,#0xf0
   0BB4 CD                 3956 	xch	a,r5
   0BB5 6D                 3957 	xrl	a,r5
   0BB6 FE                 3958 	mov	r6,a
                           3959 ;	genPlus
                           3960 ;	Peephole 236.g	used r5 instead of ar5
   0BB7 ED                 3961 	mov	a,r5
   0BB8 24r00              3962 	add	a,#_arena
   0BBA FD                 3963 	mov	r5,a
                           3964 ;	Peephole 236.g	used r6 instead of ar6
   0BBB EE                 3965 	mov	a,r6
   0BBC 34s00              3966 	addc	a,#(_arena >> 8)
   0BBE FE                 3967 	mov	r6,a
                           3968 ;	genLeftShift
                           3969 ;	genLeftShiftLiteral
                           3970 ;	genlshTwo
   0BBF 8C 00              3971 	mov	ar0,r4
   0BC1 EF                 3972 	mov	a,r7
   0BC2 C8                 3973 	xch	a,r0
   0BC3 25 E0              3974 	add	a,acc
   0BC5 C8                 3975 	xch	a,r0
   0BC6 33                 3976 	rlc	a
   0BC7 F9                 3977 	mov	r1,a
                           3978 ;	genPlus
                           3979 ;	Peephole 236.g	used r0 instead of ar0
   0BC8 E8                 3980 	mov	a,r0
                           3981 ;	Peephole 236.a	used r5 instead of ar5
   0BC9 2D                 3982 	add	a,r5
   0BCA F5 82              3983 	mov	dpl,a
                           3984 ;	Peephole 236.g	used r1 instead of ar1
   0BCC E9                 3985 	mov	a,r1
                           3986 ;	Peephole 236.b	used r6 instead of ar6
   0BCD 3E                 3987 	addc	a,r6
   0BCE F5 83              3988 	mov	dph,a
                           3989 ;	genPointerSet
                           3990 ;     genFarPointerSet
                           3991 ;	Peephole 181	changed mov to clr
   0BD0 E4                 3992 	clr	a
   0BD1 F0                 3993 	movx	@dptr,a
   0BD2 A3                 3994 	inc	dptr
                           3995 ;	Peephole 101	removed redundant mov
   0BD3 F0                 3996 	movx	@dptr,a
   0BD4                    3997 00121$:
                           3998 ;	snake.c:213: if(arena[head_x][head_y] == code_byte_FOOD) {
                           3999 ;	genIpush
   0BD4 C0 04              4000 	push	ar4
   0BD6 C0 07              4001 	push	ar7
                           4002 ;	genAssign
   0BD8 90s00r0E           4003 	mov	dptr,#_move_snake_head_x_1_1
   0BDB E0                 4004 	movx	a,@dptr
   0BDC FD                 4005 	mov	r5,a
   0BDD A3                 4006 	inc	dptr
   0BDE E0                 4007 	movx	a,@dptr
                           4008 ;	genLeftShift
                           4009 ;	genLeftShiftLiteral
                           4010 ;	genlshTwo
   0BDF FE                 4011 	mov	r6,a
                           4012 ;	Peephole 105	removed redundant mov
   0BE0 C4                 4013 	swap	a
   0BE1 54 F0              4014 	anl	a,#0xf0
   0BE3 CD                 4015 	xch	a,r5
   0BE4 C4                 4016 	swap	a
   0BE5 CD                 4017 	xch	a,r5
   0BE6 6D                 4018 	xrl	a,r5
   0BE7 CD                 4019 	xch	a,r5
   0BE8 54 F0              4020 	anl	a,#0xf0
   0BEA CD                 4021 	xch	a,r5
   0BEB 6D                 4022 	xrl	a,r5
   0BEC FE                 4023 	mov	r6,a
                           4024 ;	genPlus
                           4025 ;	Peephole 236.g	used r5 instead of ar5
   0BED ED                 4026 	mov	a,r5
   0BEE 24r00              4027 	add	a,#_arena
   0BF0 F8                 4028 	mov	r0,a
                           4029 ;	Peephole 236.g	used r6 instead of ar6
   0BF1 EE                 4030 	mov	a,r6
   0BF2 34s00              4031 	addc	a,#(_arena >> 8)
   0BF4 F9                 4032 	mov	r1,a
                           4033 ;	genAssign
   0BF5 90s00r10           4034 	mov	dptr,#_move_snake_head_y_1_1
   0BF8 E0                 4035 	movx	a,@dptr
   0BF9 FC                 4036 	mov	r4,a
   0BFA A3                 4037 	inc	dptr
   0BFB E0                 4038 	movx	a,@dptr
                           4039 ;	genLeftShift
                           4040 ;	genLeftShiftLiteral
                           4041 ;	genlshTwo
   0BFC FF                 4042 	mov	r7,a
   0BFD 8C*04              4043 	mov	_move_snake_sloc2_1_0,r4
                           4044 ;	Peephole 177.d	removed redundant move
   0BFF C5*04              4045 	xch	a,_move_snake_sloc2_1_0
   0C01 25 E0              4046 	add	a,acc
   0C03 C5*04              4047 	xch	a,_move_snake_sloc2_1_0
   0C05 33                 4048 	rlc	a
   0C06 F5*05              4049 	mov	(_move_snake_sloc2_1_0 + 1),a
                           4050 ;	genPlus
   0C08 E5*04              4051 	mov	a,_move_snake_sloc2_1_0
                           4052 ;	Peephole 236.a	used r0 instead of ar0
   0C0A 28                 4053 	add	a,r0
   0C0B F5 82              4054 	mov	dpl,a
   0C0D E5*05              4055 	mov	a,(_move_snake_sloc2_1_0 + 1)
                           4056 ;	Peephole 236.b	used r1 instead of ar1
   0C0F 39                 4057 	addc	a,r1
   0C10 F5 83              4058 	mov	dph,a
                           4059 ;	genPointerGet
                           4060 ;	genFarPointerGet
   0C12 E0                 4061 	movx	a,@dptr
   0C13 FC                 4062 	mov	r4,a
   0C14 A3                 4063 	inc	dptr
   0C15 E0                 4064 	movx	a,@dptr
   0C16 FF                 4065 	mov	r7,a
                           4066 ;	genCmpEq
                           4067 ;	gencjne
                           4068 ;	gencjneshort
                           4069 ;	Peephole 241.c	optimized compare
   0C17 E4                 4070 	clr	a
   0C18 BC 03 04           4071 	cjne	r4,#0x03,00190$
   0C1B BF 00 01           4072 	cjne	r7,#0x00,00190$
   0C1E 04                 4073 	inc	a
   0C1F                    4074 00190$:
                           4075 ;	Peephole 300	removed redundant label 00191$
                           4076 ;	genIpop
   0C1F D0 07              4077 	pop	ar7
   0C21 D0 04              4078 	pop	ar4
                           4079 ;	genIfx
                           4080 ;	genIfxJump
                           4081 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0C23 60 5A              4082 	jz	00123$
                           4083 ;	Peephole 300	removed redundant label 00192$
                           4084 ;	snake.c:214: snakeX[snakeLen] = tail_x;
                           4085 ;	genLeftShift
                           4086 ;	genLeftShiftLiteral
                           4087 ;	genlshTwo
   0C25 8A 00              4088 	mov	ar0,r2
   0C27 EB                 4089 	mov	a,r3
   0C28 C8                 4090 	xch	a,r0
   0C29 25 E0              4091 	add	a,acc
   0C2B C8                 4092 	xch	a,r0
   0C2C 33                 4093 	rlc	a
   0C2D F9                 4094 	mov	r1,a
                           4095 ;	genPlus
                           4096 ;	Peephole 236.g	used r0 instead of ar0
   0C2E E8                 4097 	mov	a,r0
   0C2F 24r00              4098 	add	a,#_snakeX
   0C31 F5 82              4099 	mov	dpl,a
                           4100 ;	Peephole 236.g	used r1 instead of ar1
   0C33 E9                 4101 	mov	a,r1
   0C34 34s00              4102 	addc	a,#(_snakeX >> 8)
   0C36 F5 83              4103 	mov	dph,a
                           4104 ;	genPointerSet
                           4105 ;     genFarPointerSet
   0C38 E5*06              4106 	mov	a,_move_snake_sloc3_1_0
   0C3A F0                 4107 	movx	@dptr,a
   0C3B A3                 4108 	inc	dptr
   0C3C E5*07              4109 	mov	a,(_move_snake_sloc3_1_0 + 1)
   0C3E F0                 4110 	movx	@dptr,a
                           4111 ;	snake.c:215: snakeY[snakeLen] = tail_y;
                           4112 ;	genPlus
                           4113 ;	Peephole 236.g	used r0 instead of ar0
   0C3F E8                 4114 	mov	a,r0
   0C40 24r00              4115 	add	a,#_snakeY
   0C42 F5 82              4116 	mov	dpl,a
                           4117 ;	Peephole 236.g	used r1 instead of ar1
   0C44 E9                 4118 	mov	a,r1
   0C45 34s00              4119 	addc	a,#(_snakeY >> 8)
   0C47 F5 83              4120 	mov	dph,a
                           4121 ;	genPointerSet
                           4122 ;     genFarPointerSet
   0C49 EC                 4123 	mov	a,r4
   0C4A F0                 4124 	movx	@dptr,a
   0C4B A3                 4125 	inc	dptr
   0C4C EF                 4126 	mov	a,r7
   0C4D F0                 4127 	movx	@dptr,a
                           4128 ;	snake.c:216: snakeLen++;         //If snake eats food increase the body length
                           4129 ;	genPlus
   0C4E 90s00r00           4130 	mov	dptr,#_snakeLen
                           4131 ;     genPlusIncr
   0C51 74 01              4132 	mov	a,#0x01
                           4133 ;	Peephole 236.a	used r2 instead of ar2
   0C53 2A                 4134 	add	a,r2
   0C54 F0                 4135 	movx	@dptr,a
                           4136 ;	Peephole 181	changed mov to clr
   0C55 E4                 4137 	clr	a
                           4138 ;	Peephole 236.b	used r3 instead of ar3
   0C56 3B                 4139 	addc	a,r3
   0C57 A3                 4140 	inc	dptr
   0C58 F0                 4141 	movx	@dptr,a
                           4142 ;	snake.c:218: arena[head_x][head_y] =  code_byte_EMPTY;   //remove food
                           4143 ;	genPlus
                           4144 ;	Peephole 236.g	used r5 instead of ar5
   0C59 ED                 4145 	mov	a,r5
   0C5A 24r00              4146 	add	a,#_arena
   0C5C FA                 4147 	mov	r2,a
                           4148 ;	Peephole 236.g	used r6 instead of ar6
   0C5D EE                 4149 	mov	a,r6
   0C5E 34s00              4150 	addc	a,#(_arena >> 8)
   0C60 FB                 4151 	mov	r3,a
                           4152 ;	genPlus
   0C61 E5*04              4153 	mov	a,_move_snake_sloc2_1_0
                           4154 ;	Peephole 236.a	used r2 instead of ar2
   0C63 2A                 4155 	add	a,r2
   0C64 FA                 4156 	mov	r2,a
   0C65 E5*05              4157 	mov	a,(_move_snake_sloc2_1_0 + 1)
                           4158 ;	Peephole 236.b	used r3 instead of ar3
   0C67 3B                 4159 	addc	a,r3
   0C68 FB                 4160 	mov	r3,a
                           4161 ;	genPointerSet
                           4162 ;     genFarPointerSet
   0C69 8A 82              4163 	mov	dpl,r2
   0C6B 8B 83              4164 	mov	dph,r3
                           4165 ;	Peephole 181	changed mov to clr
   0C6D E4                 4166 	clr	a
   0C6E F0                 4167 	movx	@dptr,a
   0C6F A3                 4168 	inc	dptr
                           4169 ;	Peephole 101	removed redundant mov
   0C70 F0                 4170 	movx	@dptr,a
                           4171 ;	snake.c:219: arena[head_x][head_y] = code_byte_SNAKE;  // add head
                           4172 ;	genPointerSet
                           4173 ;     genFarPointerSet
   0C71 8A 82              4174 	mov	dpl,r2
   0C73 8B 83              4175 	mov	dph,r3
   0C75 74 DB              4176 	mov	a,#0xDB
   0C77 F0                 4177 	movx	@dptr,a
   0C78 A3                 4178 	inc	dptr
                           4179 ;	Peephole 181	changed mov to clr
   0C79 E4                 4180 	clr	a
   0C7A F0                 4181 	movx	@dptr,a
                           4182 ;	snake.c:220: return 2;
                           4183 ;	genRet
                           4184 ;	Peephole 182.b	used 16 bit load of dptr
   0C7B 90 00 02           4185 	mov	dptr,#0x0002
                           4186 ;	Peephole 112.b	changed ljmp to sjmp
                           4187 ;	Peephole 251.b	replaced sjmp to ret with ret
   0C7E 22                 4188 	ret
   0C7F                    4189 00123$:
                           4190 ;	snake.c:224: arena[head_x][head_y] = code_byte_SNAKE;  // add head
                           4191 ;	genPlus
                           4192 ;	Peephole 236.g	used r5 instead of ar5
   0C7F ED                 4193 	mov	a,r5
   0C80 24r00              4194 	add	a,#_arena
   0C82 FD                 4195 	mov	r5,a
                           4196 ;	Peephole 236.g	used r6 instead of ar6
   0C83 EE                 4197 	mov	a,r6
   0C84 34s00              4198 	addc	a,#(_arena >> 8)
   0C86 FE                 4199 	mov	r6,a
                           4200 ;	genPlus
   0C87 E5*04              4201 	mov	a,_move_snake_sloc2_1_0
                           4202 ;	Peephole 236.a	used r5 instead of ar5
   0C89 2D                 4203 	add	a,r5
   0C8A F5 82              4204 	mov	dpl,a
   0C8C E5*05              4205 	mov	a,(_move_snake_sloc2_1_0 + 1)
                           4206 ;	Peephole 236.b	used r6 instead of ar6
   0C8E 3E                 4207 	addc	a,r6
   0C8F F5 83              4208 	mov	dph,a
                           4209 ;	genPointerSet
                           4210 ;     genFarPointerSet
   0C91 74 DB              4211 	mov	a,#0xDB
   0C93 F0                 4212 	movx	@dptr,a
   0C94 A3                 4213 	inc	dptr
                           4214 ;	Peephole 181	changed mov to clr
   0C95 E4                 4215 	clr	a
   0C96 F0                 4216 	movx	@dptr,a
                           4217 ;	snake.c:225: return 0;
                           4218 ;	genRet
                           4219 ;	Peephole 182.b	used 16 bit load of dptr
   0C97 90 00 00           4220 	mov	dptr,#0x0000
                           4221 ;	Peephole 300	removed redundant label 00136$
   0C9A 22                 4222 	ret
                           4223 ;------------------------------------------------------------
                           4224 ;Allocation info for local variables in function 'refreshSnakeDir'
                           4225 ;------------------------------------------------------------
                           4226 ;oldDir                    Allocated with name '_refreshSnakeDir_oldDir_1_1'
                           4227 ;------------------------------------------------------------
                           4228 ;	snake.c:230: int refreshSnakeDir() {
                           4229 ;	-----------------------------------------
                           4230 ;	 function refreshSnakeDir
                           4231 ;	-----------------------------------------
   0C9B                    4232 _refreshSnakeDir:
                           4233 ;	snake.c:232: oldDir = snakeDir;
                           4234 ;	genAssign
   0C9B 90s00r00           4235 	mov	dptr,#_snakeDir
   0C9E E0                 4236 	movx	a,@dptr
   0C9F FA                 4237 	mov	r2,a
   0CA0 A3                 4238 	inc	dptr
   0CA1 E0                 4239 	movx	a,@dptr
   0CA2 FB                 4240 	mov	r3,a
                           4241 ;	genAssign
   0CA3 90s00r12           4242 	mov	dptr,#_refreshSnakeDir_oldDir_1_1
   0CA6 EA                 4243 	mov	a,r2
   0CA7 F0                 4244 	movx	@dptr,a
   0CA8 A3                 4245 	inc	dptr
   0CA9 EB                 4246 	mov	a,r3
   0CAA F0                 4247 	movx	@dptr,a
                           4248 ;	genIfx
                           4249 ;	genIfxJump
                           4250 ;	Peephole 108.e	removed ljmp by inverse jump logic
   0CAB 20 B5 07           4251 	jb	_P3_5,00102$
                           4252 ;	Peephole 300	removed redundant label 00119$
                           4253 ;	snake.c:233: if(keyUp==0) snakeDir = 0;
                           4254 ;	genAssign
   0CAE 90s00r00           4255 	mov	dptr,#_snakeDir
   0CB1 E4                 4256 	clr	a
   0CB2 F0                 4257 	movx	@dptr,a
   0CB3 A3                 4258 	inc	dptr
   0CB4 F0                 4259 	movx	@dptr,a
   0CB5                    4260 00102$:
                           4261 ;	genIfx
                           4262 ;	genIfxJump
                           4263 ;	Peephole 108.e	removed ljmp by inverse jump logic
   0CB5 20 B4 09           4264 	jb	_P3_4,00104$
                           4265 ;	Peephole 300	removed redundant label 00120$
                           4266 ;	snake.c:234: if(keyRight==0) snakeDir = 1;
                           4267 ;	genAssign
   0CB8 90s00r00           4268 	mov	dptr,#_snakeDir
   0CBB 74 01              4269 	mov	a,#0x01
   0CBD F0                 4270 	movx	@dptr,a
   0CBE E4                 4271 	clr	a
   0CBF A3                 4272 	inc	dptr
   0CC0 F0                 4273 	movx	@dptr,a
   0CC1                    4274 00104$:
                           4275 ;	genIfx
                           4276 ;	genIfxJump
                           4277 ;	Peephole 108.e	removed ljmp by inverse jump logic
   0CC1 20 92 09           4278 	jb	_P1_2,00106$
                           4279 ;	Peephole 300	removed redundant label 00121$
                           4280 ;	snake.c:235: if(keyDown==0) snakeDir = 2;
                           4281 ;	genAssign
   0CC4 90s00r00           4282 	mov	dptr,#_snakeDir
   0CC7 74 02              4283 	mov	a,#0x02
   0CC9 F0                 4284 	movx	@dptr,a
   0CCA E4                 4285 	clr	a
   0CCB A3                 4286 	inc	dptr
   0CCC F0                 4287 	movx	@dptr,a
   0CCD                    4288 00106$:
                           4289 ;	genIfx
                           4290 ;	genIfxJump
                           4291 ;	Peephole 108.e	removed ljmp by inverse jump logic
   0CCD 20 93 09           4292 	jb	_P1_3,00108$
                           4293 ;	Peephole 300	removed redundant label 00122$
                           4294 ;	snake.c:236: if(keyLeft==0) snakeDir = 3;
                           4295 ;	genAssign
   0CD0 90s00r00           4296 	mov	dptr,#_snakeDir
   0CD3 74 03              4297 	mov	a,#0x03
   0CD5 F0                 4298 	movx	@dptr,a
   0CD6 E4                 4299 	clr	a
   0CD7 A3                 4300 	inc	dptr
   0CD8 F0                 4301 	movx	@dptr,a
   0CD9                    4302 00108$:
                           4303 ;	snake.c:237: if(oldDir!=snakeDir)
                           4304 ;	genAssign
   0CD9 90s00r12           4305 	mov	dptr,#_refreshSnakeDir_oldDir_1_1
   0CDC E0                 4306 	movx	a,@dptr
   0CDD FA                 4307 	mov	r2,a
   0CDE A3                 4308 	inc	dptr
   0CDF E0                 4309 	movx	a,@dptr
   0CE0 FB                 4310 	mov	r3,a
                           4311 ;	genAssign
   0CE1 90s00r00           4312 	mov	dptr,#_snakeDir
   0CE4 E0                 4313 	movx	a,@dptr
   0CE5 FC                 4314 	mov	r4,a
   0CE6 A3                 4315 	inc	dptr
   0CE7 E0                 4316 	movx	a,@dptr
   0CE8 FD                 4317 	mov	r5,a
                           4318 ;	genCmpEq
                           4319 ;	gencjneshort
   0CE9 EA                 4320 	mov	a,r2
   0CEA B5 04 06           4321 	cjne	a,ar4,00123$
   0CED EB                 4322 	mov	a,r3
   0CEE B5 05 02           4323 	cjne	a,ar5,00123$
                           4324 ;	Peephole 112.b	changed ljmp to sjmp
   0CF1 80 04              4325 	sjmp	00110$
   0CF3                    4326 00123$:
                           4327 ;	snake.c:238: return 1;
                           4328 ;	genRet
                           4329 ;	Peephole 182.b	used 16 bit load of dptr
   0CF3 90 00 01           4330 	mov	dptr,#0x0001
                           4331 ;	Peephole 112.b	changed ljmp to sjmp
                           4332 ;	snake.c:240: return 0;
                           4333 ;	genRet
                           4334 ;	Peephole 182.b	used 16 bit load of dptr
                           4335 ;	Peephole 237.a	removed sjmp to ret
   0CF6 22                 4336 	ret
   0CF7                    4337 00110$:
   0CF7 90 00 00           4338 	mov	dptr,#0x0000
                           4339 ;	Peephole 300	removed redundant label 00112$
   0CFA 22                 4340 	ret
                           4341 	.area CSEG    (CODE)
                           4342 	.area CONST   (CODE)
   0000                    4343 _RACING_BITMAP:
   0000 3C 00              4344 	.byte #0x3C,#0x00
   0002 42 00              4345 	.byte #0x42,#0x00
   0004 42 00              4346 	.byte #0x42,#0x00
   0006 3C 00              4347 	.byte #0x3C,#0x00
   0008 3C 00              4348 	.byte #0x3C,#0x00
   000A 24 00              4349 	.byte #0x24,#0x00
   000C 42 00              4350 	.byte #0x42,#0x00
   000E 7E 00              4351 	.byte #0x7E,#0x00
   0010 3C 00              4352 	.byte #0x3C,#0x00
   0012 42 00              4353 	.byte #0x42,#0x00
   0014 42 00              4354 	.byte #0x42,#0x00
   0016 3C 00              4355 	.byte #0x3C,#0x00
   0018 3C 00              4356 	.byte #0x3C,#0x00
   001A 24 00              4357 	.byte #0x24,#0x00
   001C 42 00              4358 	.byte #0x42,#0x00
   001E 7E 00              4359 	.byte #0x7E,#0x00
   0020 F0 00              4360 	.byte #0xF0,#0x00
   0022 F0 00              4361 	.byte #0xF0,#0x00
   0024 F0 00              4362 	.byte #0xF0,#0x00
   0026 F0 00              4363 	.byte #0xF0,#0x00
   0028 00 00              4364 	.byte #0x00,#0x00
   002A 00 00              4365 	.byte #0x00,#0x00
   002C 00 00              4366 	.byte #0x00,#0x00
   002E 00 00              4367 	.byte #0x00,#0x00
   0030 00 00              4368 	.byte #0x00,#0x00
   0032 00 00              4369 	.byte #0x00,#0x00
   0034 00 00              4370 	.byte #0x00,#0x00
   0036 00 00              4371 	.byte #0x00,#0x00
   0038 F0 00              4372 	.byte #0xF0,#0x00
   003A F0 00              4373 	.byte #0xF0,#0x00
   003C F0 00              4374 	.byte #0xF0,#0x00
   003E F0 00              4375 	.byte #0xF0,#0x00
   0040 FF 00              4376 	.byte #0xFF,#0x00
   0042 FF 00              4377 	.byte #0xFF,#0x00
   0044 FF 00              4378 	.byte #0xFF,#0x00
   0046 FF 00              4379 	.byte #0xFF,#0x00
   0048 FF 00              4380 	.byte #0xFF,#0x00
   004A FF 00              4381 	.byte #0xFF,#0x00
   004C FF 00              4382 	.byte #0xFF,#0x00
   004E FF 00              4383 	.byte #0xFF,#0x00
   0050                    4384 _BITMAP:
   0050 3C 00              4385 	.byte #0x3C,#0x00
   0052 24 00              4386 	.byte #0x24,#0x00
   0054 FF 00              4387 	.byte #0xFF,#0x00
   0056 A5 00              4388 	.byte #0xA5,#0x00
   0058 FF 00              4389 	.byte #0xFF,#0x00
   005A 24 00              4390 	.byte #0x24,#0x00
   005C 3C 00              4391 	.byte #0x3C,#0x00
   005E 00 00              4392 	.byte #0x00,#0x00
   0060 00 00              4393 	.byte #0x00,#0x00
   0062 00 00              4394 	.byte #0x00,#0x00
   0064 EE 00              4395 	.byte #0xEE,#0x00
   0066 EE 00              4396 	.byte #0xEE,#0x00
   0068 77 00              4397 	.byte #0x77,#0x00
   006A 77 00              4398 	.byte #0x77,#0x00
   006C 00 00              4399 	.byte #0x00,#0x00
   006E 00 00              4400 	.byte #0x00,#0x00
   0070 0C 00              4401 	.byte #0x0C,#0x00
   0072 3C 00              4402 	.byte #0x3C,#0x00
   0074 3C 00              4403 	.byte #0x3C,#0x00
   0076 30 00              4404 	.byte #0x30,#0x00
   0078 0C 00              4405 	.byte #0x0C,#0x00
   007A 3C 00              4406 	.byte #0x3C,#0x00
   007C 3C 00              4407 	.byte #0x3C,#0x00
   007E 30 00              4408 	.byte #0x30,#0x00
   0080 0C 00              4409 	.byte #0x0C,#0x00
   0082 3C 00              4410 	.byte #0x3C,#0x00
   0084 FC 00              4411 	.byte #0xFC,#0x00
   0086 E8 00              4412 	.byte #0xE8,#0x00
   0088 78 00              4413 	.byte #0x78,#0x00
   008A 60 00              4414 	.byte #0x60,#0x00
   008C 00 00              4415 	.byte #0x00,#0x00
   008E 00 00              4416 	.byte #0x00,#0x00
   0090 0C 00              4417 	.byte #0x0C,#0x00
   0092 3C 00              4418 	.byte #0x3C,#0x00
   0094 3E 00              4419 	.byte #0x3E,#0x00
   0096 16 00              4420 	.byte #0x16,#0x00
   0098 1F 00              4421 	.byte #0x1F,#0x00
   009A 07 00              4422 	.byte #0x07,#0x00
   009C 00 00              4423 	.byte #0x00,#0x00
   009E 00 00              4424 	.byte #0x00,#0x00
   00A0 00 00              4425 	.byte #0x00,#0x00
   00A2 00 00              4426 	.byte #0x00,#0x00
   00A4 06 00              4427 	.byte #0x06,#0x00
   00A6 1E 00              4428 	.byte #0x1E,#0x00
   00A8 17 00              4429 	.byte #0x17,#0x00
   00AA 3F 00              4430 	.byte #0x3F,#0x00
   00AC 3C 00              4431 	.byte #0x3C,#0x00
   00AE 30 00              4432 	.byte #0x30,#0x00
   00B0 00 00              4433 	.byte #0x00,#0x00
   00B2 00 00              4434 	.byte #0x00,#0x00
   00B4 E0 00              4435 	.byte #0xE0,#0x00
   00B6 F8 00              4436 	.byte #0xF8,#0x00
   00B8 68 00              4437 	.byte #0x68,#0x00
   00BA 7C 00              4438 	.byte #0x7C,#0x00
   00BC 3C 00              4439 	.byte #0x3C,#0x00
   00BE 30 00              4440 	.byte #0x30,#0x00
   00C0 00 00              4441 	.byte #0x00,#0x00
   00C2 70 00              4442 	.byte #0x70,#0x00
   00C4 9E 00              4443 	.byte #0x9E,#0x00
   00C6 FE 00              4444 	.byte #0xFE,#0x00
   00C8 FF 00              4445 	.byte #0xFF,#0x00
   00CA 9F 00              4446 	.byte #0x9F,#0x00
   00CC 70 00              4447 	.byte #0x70,#0x00
   00CE 00 00              4448 	.byte #0x00,#0x00
   00D0 3C 00              4449 	.byte #0x3C,#0x00
   00D2 5A 00              4450 	.byte #0x5A,#0x00
   00D4 5A 00              4451 	.byte #0x5A,#0x00
   00D6 7E 00              4452 	.byte #0x7E,#0x00
   00D8 3C 00              4453 	.byte #0x3C,#0x00
   00DA 3C 00              4454 	.byte #0x3C,#0x00
   00DC 3C 00              4455 	.byte #0x3C,#0x00
   00DE 30 00              4456 	.byte #0x30,#0x00
   00E0 00 00              4457 	.byte #0x00,#0x00
   00E2 0E 00              4458 	.byte #0x0E,#0x00
   00E4 F9 00              4459 	.byte #0xF9,#0x00
   00E6 FF 00              4460 	.byte #0xFF,#0x00
   00E8 7F 00              4461 	.byte #0x7F,#0x00
   00EA 79 00              4462 	.byte #0x79,#0x00
   00EC 0E 00              4463 	.byte #0x0E,#0x00
   00EE 00 00              4464 	.byte #0x00,#0x00
   00F0 0C 00              4465 	.byte #0x0C,#0x00
   00F2 3C 00              4466 	.byte #0x3C,#0x00
   00F4 3C 00              4467 	.byte #0x3C,#0x00
   00F6 3C 00              4468 	.byte #0x3C,#0x00
   00F8 7E 00              4469 	.byte #0x7E,#0x00
   00FA 5A 00              4470 	.byte #0x5A,#0x00
   00FC 5A 00              4471 	.byte #0x5A,#0x00
   00FE 3C 00              4472 	.byte #0x3C,#0x00
   0100 00 00              4473 	.byte #0x00,#0x00
   0102 00 00              4474 	.byte #0x00,#0x00
   0104 2E 00              4475 	.byte #0x2E,#0x00
   0106 EE 00              4476 	.byte #0xEE,#0x00
   0108 F7 00              4477 	.byte #0xF7,#0x00
   010A 37 00              4478 	.byte #0x37,#0x00
   010C 00 00              4479 	.byte #0x00,#0x00
   010E 00 00              4480 	.byte #0x00,#0x00
   0110 18 00              4481 	.byte #0x18,#0x00
   0112 18 00              4482 	.byte #0x18,#0x00
   0114 3C 00              4483 	.byte #0x3C,#0x00
   0116 30 00              4484 	.byte #0x30,#0x00
   0118 0C 00              4485 	.byte #0x0C,#0x00
   011A 3C 00              4486 	.byte #0x3C,#0x00
   011C 3C 00              4487 	.byte #0x3C,#0x00
   011E 30 00              4488 	.byte #0x30,#0x00
   0120 00 00              4489 	.byte #0x00,#0x00
   0122 00 00              4490 	.byte #0x00,#0x00
   0124 EC 00              4491 	.byte #0xEC,#0x00
   0126 EF 00              4492 	.byte #0xEF,#0x00
   0128 77 00              4493 	.byte #0x77,#0x00
   012A 74 00              4494 	.byte #0x74,#0x00
   012C 00 00              4495 	.byte #0x00,#0x00
   012E 00 00              4496 	.byte #0x00,#0x00
   0130 0C 00              4497 	.byte #0x0C,#0x00
   0132 3C 00              4498 	.byte #0x3C,#0x00
   0134 3C 00              4499 	.byte #0x3C,#0x00
   0136 30 00              4500 	.byte #0x30,#0x00
   0138 0C 00              4501 	.byte #0x0C,#0x00
   013A 3C 00              4502 	.byte #0x3C,#0x00
   013C 18 00              4503 	.byte #0x18,#0x00
   013E 18 00              4504 	.byte #0x18,#0x00
   0140                    4505 _SCORE:
   0140 FF 00              4506 	.byte #0xFF,#0x00
   0142 81 00              4507 	.byte #0x81,#0x00
   0144 81 00              4508 	.byte #0x81,#0x00
   0146 FF 00              4509 	.byte #0xFF,#0x00
   0148 00 00              4510 	.byte #0x00,#0x00
   014A FF 00              4511 	.byte #0xFF,#0x00
   014C FF 00              4512 	.byte #0xFF,#0x00
   014E 00 00              4513 	.byte #0x00,#0x00
   0150 F1 00              4514 	.byte #0xF1,#0x00
   0152 91 00              4515 	.byte #0x91,#0x00
   0154 91 00              4516 	.byte #0x91,#0x00
   0156 8F 00              4517 	.byte #0x8F,#0x00
   0158 91 00              4518 	.byte #0x91,#0x00
   015A 91 00              4519 	.byte #0x91,#0x00
   015C 91 00              4520 	.byte #0x91,#0x00
   015E FF 00              4521 	.byte #0xFF,#0x00
   0160 0F 00              4522 	.byte #0x0F,#0x00
   0162 08 00              4523 	.byte #0x08,#0x00
   0164 08 00              4524 	.byte #0x08,#0x00
   0166 FF 00              4525 	.byte #0xFF,#0x00
   0168 8F 00              4526 	.byte #0x8F,#0x00
   016A 91 00              4527 	.byte #0x91,#0x00
   016C 91 00              4528 	.byte #0x91,#0x00
   016E F1 00              4529 	.byte #0xF1,#0x00
   0170 FF 00              4530 	.byte #0xFF,#0x00
   0172 99 00              4531 	.byte #0x99,#0x00
   0174 99 00              4532 	.byte #0x99,#0x00
   0176 F9 00              4533 	.byte #0xF9,#0x00
   0178 11 00              4534 	.byte #0x11,#0x00
   017A 11 00              4535 	.byte #0x11,#0x00
   017C 11 00              4536 	.byte #0x11,#0x00
   017E FF 00              4537 	.byte #0xFF,#0x00
   0180 FF 00              4538 	.byte #0xFF,#0x00
   0182 99 00              4539 	.byte #0x99,#0x00
   0184 99 00              4540 	.byte #0x99,#0x00
   0186 FF 00              4541 	.byte #0xFF,#0x00
   0188 1F 00              4542 	.byte #0x1F,#0x00
   018A 91 00              4543 	.byte #0x91,#0x00
   018C 91 00              4544 	.byte #0x91,#0x00
   018E FF 00              4545 	.byte #0xFF,#0x00
                           4546 	.area XINIT   (CODE)
