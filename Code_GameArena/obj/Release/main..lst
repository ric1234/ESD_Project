                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : FreeWare ANSI-C Compiler
                              3 ; Version 2.6.0 #4309 (Jul 28 2006)
                              4 ; This file generated Fri Dec 09 17:15:35 2016
                              5 ;--------------------------------------------------------
                              6 	.module main
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _SCORE
                             13 	.globl _BITMAP
                             14 	.globl _RACING_BITMAP
                             15 	.globl _main
                             16 	.globl __sdcc_external_startup
                             17 	.globl _P5_7
                             18 	.globl _P5_6
                             19 	.globl _P5_5
                             20 	.globl _P5_4
                             21 	.globl _P5_3
                             22 	.globl _P5_2
                             23 	.globl _P5_1
                             24 	.globl _P5_0
                             25 	.globl _P4_7
                             26 	.globl _P4_6
                             27 	.globl _P4_5
                             28 	.globl _P4_4
                             29 	.globl _P4_3
                             30 	.globl _P4_2
                             31 	.globl _P4_1
                             32 	.globl _P4_0
                             33 	.globl _PX0L
                             34 	.globl _PT0L
                             35 	.globl _PX1L
                             36 	.globl _PT1L
                             37 	.globl _PLS
                             38 	.globl _PT2L
                             39 	.globl _PPCL
                             40 	.globl _EC
                             41 	.globl _CCF0
                             42 	.globl _CCF1
                             43 	.globl _CCF2
                             44 	.globl _CCF3
                             45 	.globl _CCF4
                             46 	.globl _CR
                             47 	.globl _CF
                             48 	.globl _TF2
                             49 	.globl _EXF2
                             50 	.globl _RCLK
                             51 	.globl _TCLK
                             52 	.globl _EXEN2
                             53 	.globl _TR2
                             54 	.globl _C_T2
                             55 	.globl _CP_RL2
                             56 	.globl _T2CON_7
                             57 	.globl _T2CON_6
                             58 	.globl _T2CON_5
                             59 	.globl _T2CON_4
                             60 	.globl _T2CON_3
                             61 	.globl _T2CON_2
                             62 	.globl _T2CON_1
                             63 	.globl _T2CON_0
                             64 	.globl _PT2
                             65 	.globl _ET2
                             66 	.globl _CY
                             67 	.globl _AC
                             68 	.globl _F0
                             69 	.globl _RS1
                             70 	.globl _RS0
                             71 	.globl _OV
                             72 	.globl _F1
                             73 	.globl _P
                             74 	.globl _PS
                             75 	.globl _PT1
                             76 	.globl _PX1
                             77 	.globl _PT0
                             78 	.globl _PX0
                             79 	.globl _RD
                             80 	.globl _WR
                             81 	.globl _T1
                             82 	.globl _T0
                             83 	.globl _INT1
                             84 	.globl _INT0
                             85 	.globl _TXD
                             86 	.globl _RXD
                             87 	.globl _P3_7
                             88 	.globl _P3_6
                             89 	.globl _P3_5
                             90 	.globl _P3_4
                             91 	.globl _P3_3
                             92 	.globl _P3_2
                             93 	.globl _P3_1
                             94 	.globl _P3_0
                             95 	.globl _EA
                             96 	.globl _ES
                             97 	.globl _ET1
                             98 	.globl _EX1
                             99 	.globl _ET0
                            100 	.globl _EX0
                            101 	.globl _P2_7
                            102 	.globl _P2_6
                            103 	.globl _P2_5
                            104 	.globl _P2_4
                            105 	.globl _P2_3
                            106 	.globl _P2_2
                            107 	.globl _P2_1
                            108 	.globl _P2_0
                            109 	.globl _SM0
                            110 	.globl _SM1
                            111 	.globl _SM2
                            112 	.globl _REN
                            113 	.globl _TB8
                            114 	.globl _RB8
                            115 	.globl _TI
                            116 	.globl _RI
                            117 	.globl _P1_7
                            118 	.globl _P1_6
                            119 	.globl _P1_5
                            120 	.globl _P1_4
                            121 	.globl _P1_3
                            122 	.globl _P1_2
                            123 	.globl _P1_1
                            124 	.globl _P1_0
                            125 	.globl _TF1
                            126 	.globl _TR1
                            127 	.globl _TF0
                            128 	.globl _TR0
                            129 	.globl _IE1
                            130 	.globl _IT1
                            131 	.globl _IE0
                            132 	.globl _IT0
                            133 	.globl _P0_7
                            134 	.globl _P0_6
                            135 	.globl _P0_5
                            136 	.globl _P0_4
                            137 	.globl _P0_3
                            138 	.globl _P0_2
                            139 	.globl _P0_1
                            140 	.globl _P0_0
                            141 	.globl _EECON
                            142 	.globl _KBF
                            143 	.globl _KBE
                            144 	.globl _KBLS
                            145 	.globl _BRL
                            146 	.globl _BDRCON
                            147 	.globl _T2MOD
                            148 	.globl _SPDAT
                            149 	.globl _SPSTA
                            150 	.globl _SPCON
                            151 	.globl _SADEN
                            152 	.globl _SADDR
                            153 	.globl _WDTPRG
                            154 	.globl _WDTRST
                            155 	.globl _P5
                            156 	.globl _P4
                            157 	.globl _IPH1
                            158 	.globl _IPL1
                            159 	.globl _IPH0
                            160 	.globl _IPL0
                            161 	.globl _IEN1
                            162 	.globl _IEN0
                            163 	.globl _CMOD
                            164 	.globl _CL
                            165 	.globl _CH
                            166 	.globl _CCON
                            167 	.globl _CCAPM4
                            168 	.globl _CCAPM3
                            169 	.globl _CCAPM2
                            170 	.globl _CCAPM1
                            171 	.globl _CCAPM0
                            172 	.globl _CCAP4L
                            173 	.globl _CCAP3L
                            174 	.globl _CCAP2L
                            175 	.globl _CCAP1L
                            176 	.globl _CCAP0L
                            177 	.globl _CCAP4H
                            178 	.globl _CCAP3H
                            179 	.globl _CCAP2H
                            180 	.globl _CCAP1H
                            181 	.globl _CCAP0H
                            182 	.globl _CKCKON1
                            183 	.globl _CKCKON0
                            184 	.globl _CKRL
                            185 	.globl _AUXR1
                            186 	.globl _AUXR
                            187 	.globl _TH2
                            188 	.globl _TL2
                            189 	.globl _RCAP2H
                            190 	.globl _RCAP2L
                            191 	.globl _T2CON
                            192 	.globl _B
                            193 	.globl _ACC
                            194 	.globl _PSW
                            195 	.globl _IP
                            196 	.globl _P3
                            197 	.globl _IE
                            198 	.globl _P2
                            199 	.globl _SBUF
                            200 	.globl _SCON
                            201 	.globl _P1
                            202 	.globl _TH1
                            203 	.globl _TH0
                            204 	.globl _TL1
                            205 	.globl _TL0
                            206 	.globl _TMOD
                            207 	.globl _TCON
                            208 	.globl _PCON
                            209 	.globl _DPH
                            210 	.globl _DPL
                            211 	.globl _SP
                            212 	.globl _P0
                            213 	.globl _arena
                            214 	.globl _blockD
                            215 	.globl _blockC
                            216 	.globl _blockB
                            217 	.globl _blockA
                            218 	.globl _blockY
                            219 	.globl _blockX
                            220 	.globl _car_dir
                            221 	.globl _snakeDir
                            222 	.globl _snakeY
                            223 	.globl _snakeX
                            224 	.globl _snakeLen
                            225 	.globl _putchar
                            226 	.globl _getchar
                            227 ;--------------------------------------------------------
                            228 ; special function registers
                            229 ;--------------------------------------------------------
                            230 	.area RSEG    (DATA)
                    0080    231 _P0	=	0x0080
                    0081    232 _SP	=	0x0081
                    0082    233 _DPL	=	0x0082
                    0083    234 _DPH	=	0x0083
                    0087    235 _PCON	=	0x0087
                    0088    236 _TCON	=	0x0088
                    0089    237 _TMOD	=	0x0089
                    008A    238 _TL0	=	0x008a
                    008B    239 _TL1	=	0x008b
                    008C    240 _TH0	=	0x008c
                    008D    241 _TH1	=	0x008d
                    0090    242 _P1	=	0x0090
                    0098    243 _SCON	=	0x0098
                    0099    244 _SBUF	=	0x0099
                    00A0    245 _P2	=	0x00a0
                    00A8    246 _IE	=	0x00a8
                    00B0    247 _P3	=	0x00b0
                    00B8    248 _IP	=	0x00b8
                    00D0    249 _PSW	=	0x00d0
                    00E0    250 _ACC	=	0x00e0
                    00F0    251 _B	=	0x00f0
                    00C8    252 _T2CON	=	0x00c8
                    00CA    253 _RCAP2L	=	0x00ca
                    00CB    254 _RCAP2H	=	0x00cb
                    00CC    255 _TL2	=	0x00cc
                    00CD    256 _TH2	=	0x00cd
                    008E    257 _AUXR	=	0x008e
                    00A2    258 _AUXR1	=	0x00a2
                    0097    259 _CKRL	=	0x0097
                    008F    260 _CKCKON0	=	0x008f
                    008F    261 _CKCKON1	=	0x008f
                    00FA    262 _CCAP0H	=	0x00fa
                    00FB    263 _CCAP1H	=	0x00fb
                    00FC    264 _CCAP2H	=	0x00fc
                    00FD    265 _CCAP3H	=	0x00fd
                    00FE    266 _CCAP4H	=	0x00fe
                    00EA    267 _CCAP0L	=	0x00ea
                    00EB    268 _CCAP1L	=	0x00eb
                    00EC    269 _CCAP2L	=	0x00ec
                    00ED    270 _CCAP3L	=	0x00ed
                    00EE    271 _CCAP4L	=	0x00ee
                    00DA    272 _CCAPM0	=	0x00da
                    00DB    273 _CCAPM1	=	0x00db
                    00DC    274 _CCAPM2	=	0x00dc
                    00DD    275 _CCAPM3	=	0x00dd
                    00DE    276 _CCAPM4	=	0x00de
                    00D8    277 _CCON	=	0x00d8
                    00F9    278 _CH	=	0x00f9
                    00E9    279 _CL	=	0x00e9
                    00D9    280 _CMOD	=	0x00d9
                    00A8    281 _IEN0	=	0x00a8
                    00B1    282 _IEN1	=	0x00b1
                    00B8    283 _IPL0	=	0x00b8
                    00B7    284 _IPH0	=	0x00b7
                    00B2    285 _IPL1	=	0x00b2
                    00B3    286 _IPH1	=	0x00b3
                    00C0    287 _P4	=	0x00c0
                    00D8    288 _P5	=	0x00d8
                    00A6    289 _WDTRST	=	0x00a6
                    00A7    290 _WDTPRG	=	0x00a7
                    00A9    291 _SADDR	=	0x00a9
                    00B9    292 _SADEN	=	0x00b9
                    00C3    293 _SPCON	=	0x00c3
                    00C4    294 _SPSTA	=	0x00c4
                    00C5    295 _SPDAT	=	0x00c5
                    00C9    296 _T2MOD	=	0x00c9
                    009B    297 _BDRCON	=	0x009b
                    009A    298 _BRL	=	0x009a
                    009C    299 _KBLS	=	0x009c
                    009D    300 _KBE	=	0x009d
                    009E    301 _KBF	=	0x009e
                    00D2    302 _EECON	=	0x00d2
                            303 ;--------------------------------------------------------
                            304 ; special function bits
                            305 ;--------------------------------------------------------
                            306 	.area RSEG    (DATA)
                    0080    307 _P0_0	=	0x0080
                    0081    308 _P0_1	=	0x0081
                    0082    309 _P0_2	=	0x0082
                    0083    310 _P0_3	=	0x0083
                    0084    311 _P0_4	=	0x0084
                    0085    312 _P0_5	=	0x0085
                    0086    313 _P0_6	=	0x0086
                    0087    314 _P0_7	=	0x0087
                    0088    315 _IT0	=	0x0088
                    0089    316 _IE0	=	0x0089
                    008A    317 _IT1	=	0x008a
                    008B    318 _IE1	=	0x008b
                    008C    319 _TR0	=	0x008c
                    008D    320 _TF0	=	0x008d
                    008E    321 _TR1	=	0x008e
                    008F    322 _TF1	=	0x008f
                    0090    323 _P1_0	=	0x0090
                    0091    324 _P1_1	=	0x0091
                    0092    325 _P1_2	=	0x0092
                    0093    326 _P1_3	=	0x0093
                    0094    327 _P1_4	=	0x0094
                    0095    328 _P1_5	=	0x0095
                    0096    329 _P1_6	=	0x0096
                    0097    330 _P1_7	=	0x0097
                    0098    331 _RI	=	0x0098
                    0099    332 _TI	=	0x0099
                    009A    333 _RB8	=	0x009a
                    009B    334 _TB8	=	0x009b
                    009C    335 _REN	=	0x009c
                    009D    336 _SM2	=	0x009d
                    009E    337 _SM1	=	0x009e
                    009F    338 _SM0	=	0x009f
                    00A0    339 _P2_0	=	0x00a0
                    00A1    340 _P2_1	=	0x00a1
                    00A2    341 _P2_2	=	0x00a2
                    00A3    342 _P2_3	=	0x00a3
                    00A4    343 _P2_4	=	0x00a4
                    00A5    344 _P2_5	=	0x00a5
                    00A6    345 _P2_6	=	0x00a6
                    00A7    346 _P2_7	=	0x00a7
                    00A8    347 _EX0	=	0x00a8
                    00A9    348 _ET0	=	0x00a9
                    00AA    349 _EX1	=	0x00aa
                    00AB    350 _ET1	=	0x00ab
                    00AC    351 _ES	=	0x00ac
                    00AF    352 _EA	=	0x00af
                    00B0    353 _P3_0	=	0x00b0
                    00B1    354 _P3_1	=	0x00b1
                    00B2    355 _P3_2	=	0x00b2
                    00B3    356 _P3_3	=	0x00b3
                    00B4    357 _P3_4	=	0x00b4
                    00B5    358 _P3_5	=	0x00b5
                    00B6    359 _P3_6	=	0x00b6
                    00B7    360 _P3_7	=	0x00b7
                    00B0    361 _RXD	=	0x00b0
                    00B1    362 _TXD	=	0x00b1
                    00B2    363 _INT0	=	0x00b2
                    00B3    364 _INT1	=	0x00b3
                    00B4    365 _T0	=	0x00b4
                    00B5    366 _T1	=	0x00b5
                    00B6    367 _WR	=	0x00b6
                    00B7    368 _RD	=	0x00b7
                    00B8    369 _PX0	=	0x00b8
                    00B9    370 _PT0	=	0x00b9
                    00BA    371 _PX1	=	0x00ba
                    00BB    372 _PT1	=	0x00bb
                    00BC    373 _PS	=	0x00bc
                    00D0    374 _P	=	0x00d0
                    00D1    375 _F1	=	0x00d1
                    00D2    376 _OV	=	0x00d2
                    00D3    377 _RS0	=	0x00d3
                    00D4    378 _RS1	=	0x00d4
                    00D5    379 _F0	=	0x00d5
                    00D6    380 _AC	=	0x00d6
                    00D7    381 _CY	=	0x00d7
                    00AD    382 _ET2	=	0x00ad
                    00BD    383 _PT2	=	0x00bd
                    00C8    384 _T2CON_0	=	0x00c8
                    00C9    385 _T2CON_1	=	0x00c9
                    00CA    386 _T2CON_2	=	0x00ca
                    00CB    387 _T2CON_3	=	0x00cb
                    00CC    388 _T2CON_4	=	0x00cc
                    00CD    389 _T2CON_5	=	0x00cd
                    00CE    390 _T2CON_6	=	0x00ce
                    00CF    391 _T2CON_7	=	0x00cf
                    00C8    392 _CP_RL2	=	0x00c8
                    00C9    393 _C_T2	=	0x00c9
                    00CA    394 _TR2	=	0x00ca
                    00CB    395 _EXEN2	=	0x00cb
                    00CC    396 _TCLK	=	0x00cc
                    00CD    397 _RCLK	=	0x00cd
                    00CE    398 _EXF2	=	0x00ce
                    00CF    399 _TF2	=	0x00cf
                    00DF    400 _CF	=	0x00df
                    00DE    401 _CR	=	0x00de
                    00DC    402 _CCF4	=	0x00dc
                    00DB    403 _CCF3	=	0x00db
                    00DA    404 _CCF2	=	0x00da
                    00D9    405 _CCF1	=	0x00d9
                    00D8    406 _CCF0	=	0x00d8
                    00AE    407 _EC	=	0x00ae
                    00BE    408 _PPCL	=	0x00be
                    00BD    409 _PT2L	=	0x00bd
                    00BC    410 _PLS	=	0x00bc
                    00BB    411 _PT1L	=	0x00bb
                    00BA    412 _PX1L	=	0x00ba
                    00B9    413 _PT0L	=	0x00b9
                    00B8    414 _PX0L	=	0x00b8
                    00C0    415 _P4_0	=	0x00c0
                    00C1    416 _P4_1	=	0x00c1
                    00C2    417 _P4_2	=	0x00c2
                    00C3    418 _P4_3	=	0x00c3
                    00C4    419 _P4_4	=	0x00c4
                    00C5    420 _P4_5	=	0x00c5
                    00C6    421 _P4_6	=	0x00c6
                    00C7    422 _P4_7	=	0x00c7
                    00D8    423 _P5_0	=	0x00d8
                    00D9    424 _P5_1	=	0x00d9
                    00DA    425 _P5_2	=	0x00da
                    00DB    426 _P5_3	=	0x00db
                    00DC    427 _P5_4	=	0x00dc
                    00DD    428 _P5_5	=	0x00dd
                    00DE    429 _P5_6	=	0x00de
                    00DF    430 _P5_7	=	0x00df
                            431 ;--------------------------------------------------------
                            432 ; overlayable register banks
                            433 ;--------------------------------------------------------
                            434 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     435 	.ds 8
                            436 ;--------------------------------------------------------
                            437 ; internal ram data
                            438 ;--------------------------------------------------------
                            439 	.area DSEG    (DATA)
                            440 ;--------------------------------------------------------
                            441 ; overlayable items in internal ram 
                            442 ;--------------------------------------------------------
                            443 	.area OSEG    (OVR,DATA)
                            444 ;--------------------------------------------------------
                            445 ; Stack segment in internal ram 
                            446 ;--------------------------------------------------------
                            447 	.area	SSEG	(DATA)
   0000                     448 __start__stack:
   0000                     449 	.ds	1
                            450 
                            451 ;--------------------------------------------------------
                            452 ; indirectly addressable internal ram data
                            453 ;--------------------------------------------------------
                            454 	.area ISEG    (DATA)
                            455 ;--------------------------------------------------------
                            456 ; bit data
                            457 ;--------------------------------------------------------
                            458 	.area BSEG    (BIT)
                            459 ;--------------------------------------------------------
                            460 ; paged external ram data
                            461 ;--------------------------------------------------------
                            462 	.area PSEG    (PAG,XDATA)
                            463 ;--------------------------------------------------------
                            464 ; external ram data
                            465 ;--------------------------------------------------------
                            466 	.area XSEG    (XDATA)
   0000                     467 _snakeLen::
   0000                     468 	.ds 2
   0002                     469 _snakeX::
   0002                     470 	.ds 200
   00CA                     471 _snakeY::
   00CA                     472 	.ds 200
   0192                     473 _snakeDir::
   0192                     474 	.ds 2
   0194                     475 _car_dir::
   0194                     476 	.ds 2
   0196                     477 _blockX::
   0196                     478 	.ds 10
   01A0                     479 _blockY::
   01A0                     480 	.ds 10
   01AA                     481 _blockA::
   01AA                     482 	.ds 10
   01B4                     483 _blockB::
   01B4                     484 	.ds 10
   01BE                     485 _blockC::
   01BE                     486 	.ds 10
   01C8                     487 _blockD::
   01C8                     488 	.ds 10
   01D2                     489 _arena::
   01D2                     490 	.ds 256
   02D2                     491 _i:
   02D2                     492 	.ds 2
   02D4                     493 _j:
   02D4                     494 	.ds 2
   02D6                     495 _putchar_ch_1_1:
   02D6                     496 	.ds 1
   02D7                     497 _main_block3_started_1_1:
   02D7                     498 	.ds 2
   02D9                     499 _main_res_1_1_1:
   02D9                     500 	.ds 2
   02DB                     501 _main_res_2_1_1:
   02DB                     502 	.ds 2
   02DD                     503 _main_res_3_1_1:
   02DD                     504 	.ds 2
   02DF                     505 _main_score1_1_1:
   02DF                     506 	.ds 2
   02E1                     507 _main_score2_1_1:
   02E1                     508 	.ds 2
   02E3                     509 _main_refresh_divider_1_1:
   02E3                     510 	.ds 1
                            511 ;--------------------------------------------------------
                            512 ; external initialized ram data
                            513 ;--------------------------------------------------------
                            514 	.area XISEG   (XDATA)
                            515 	.area HOME    (CODE)
                            516 	.area GSINIT0 (CODE)
                            517 	.area GSINIT1 (CODE)
                            518 	.area GSINIT2 (CODE)
                            519 	.area GSINIT3 (CODE)
                            520 	.area GSINIT4 (CODE)
                            521 	.area GSINIT5 (CODE)
                            522 	.area GSINIT  (CODE)
                            523 	.area GSFINAL (CODE)
                            524 	.area CSEG    (CODE)
                            525 ;--------------------------------------------------------
                            526 ; interrupt vector 
                            527 ;--------------------------------------------------------
                            528 	.area HOME    (CODE)
   0000                     529 __interrupt_vect:
   0000 02s00r00            530 	ljmp	__sdcc_gsinit_startup
                            531 ;--------------------------------------------------------
                            532 ; global & static initialisations
                            533 ;--------------------------------------------------------
                            534 	.area HOME    (CODE)
                            535 	.area GSINIT  (CODE)
                            536 	.area GSFINAL (CODE)
                            537 	.area GSINIT  (CODE)
                            538 	.globl __sdcc_gsinit_startup
                            539 	.globl __sdcc_program_startup
                            540 	.globl __start__stack
                            541 	.globl __mcs51_genXINIT
                            542 	.globl __mcs51_genXRAMCLEAR
                            543 	.globl __mcs51_genRAMCLEAR
                            544 	.area GSFINAL (CODE)
   0000 02s00r00            545 	ljmp	__sdcc_program_startup
                            546 ;--------------------------------------------------------
                            547 ; Home
                            548 ;--------------------------------------------------------
                            549 	.area HOME    (CODE)
                            550 	.area CSEG    (CODE)
   0000                     551 __sdcc_program_startup:
   0000 12s00r35            552 	lcall	_main
                            553 ;	return from main will lock up
   0003 80 FE               554 	sjmp .
                            555 ;--------------------------------------------------------
                            556 ; code
                            557 ;--------------------------------------------------------
                            558 	.area CSEG    (CODE)
                            559 ;------------------------------------------------------------
                            560 ;Allocation info for local variables in function '_sdcc_external_startup'
                            561 ;------------------------------------------------------------
                            562 ;------------------------------------------------------------
                            563 ;	main.c:48: _sdcc_external_startup()
                            564 ;	-----------------------------------------
                            565 ;	 function _sdcc_external_startup
                            566 ;	-----------------------------------------
   0005                     567 __sdcc_external_startup:
                    0002    568 	ar2 = 0x02
                    0003    569 	ar3 = 0x03
                    0004    570 	ar4 = 0x04
                    0005    571 	ar5 = 0x05
                    0006    572 	ar6 = 0x06
                    0007    573 	ar7 = 0x07
                    0000    574 	ar0 = 0x00
                    0001    575 	ar1 = 0x01
                            576 ;	main.c:50: AUXR|=0x0C; //enable 1kb xram
                            577 ;	genOr
   0005 43 8E 0C            578 	orl	_AUXR,#0x0C
                            579 ;	main.c:53: TMOD=0X20;
                            580 ;	genAssign
   0008 75 89 20            581 	mov	_TMOD,#0x20
                            582 ;	main.c:54: TH1=-3;
                            583 ;	genAssign
   000B 75 8D FD            584 	mov	_TH1,#0xFD
                            585 ;	main.c:55: SCON=0X50;
                            586 ;	genAssign
   000E 75 98 50            587 	mov	_SCON,#0x50
                            588 ;	main.c:56: TR1=1;
                            589 ;	genAssign
   0011 D2 8E               590 	setb	_TR1
                            591 ;	main.c:57: return 0;
                            592 ;	genRet
                            593 ;	Peephole 182.b	used 16 bit load of dptr
   0013 90 00 00            594 	mov	dptr,#0x0000
                            595 ;	Peephole 300	removed redundant label 00101$
   0016 22                  596 	ret
                            597 ;------------------------------------------------------------
                            598 ;Allocation info for local variables in function 'putchar'
                            599 ;------------------------------------------------------------
                            600 ;ch                        Allocated with name '_putchar_ch_1_1'
                            601 ;------------------------------------------------------------
                            602 ;	main.c:59: void putchar(char ch)
                            603 ;	-----------------------------------------
                            604 ;	 function putchar
                            605 ;	-----------------------------------------
   0017                     606 _putchar:
                            607 ;	genReceive
   0017 E5 82               608 	mov	a,dpl
   0019 90s02rD6            609 	mov	dptr,#_putchar_ch_1_1
   001C F0                  610 	movx	@dptr,a
                            611 ;	main.c:61: SBUF = ch;  	                // load serial port with transmit value
                            612 ;	genAssign
   001D 90s02rD6            613 	mov	dptr,#_putchar_ch_1_1
   0020 E0                  614 	movx	a,@dptr
   0021 F5 99               615 	mov	_SBUF,a
                            616 ;	main.c:62: while(!TI);				        // compare asm code generated for these three lines
   0023                     617 00101$:
                            618 ;	genIfx
                            619 ;	genIfxJump
                            620 ;	Peephole 108.d	removed ljmp by inverse jump logic
                            621 ;	main.c:63: TI=0;  	                        // clear TI flag
                            622 ;	genAssign
                            623 ;	Peephole 250.a	using atomic test and clear
   0023 10 99 02            624 	jbc	_TI,00108$
   0026 80 FB               625 	sjmp	00101$
   0028                     626 00108$:
                            627 ;	Peephole 300	removed redundant label 00104$
   0028 22                  628 	ret
                            629 ;------------------------------------------------------------
                            630 ;Allocation info for local variables in function 'getchar'
                            631 ;------------------------------------------------------------
                            632 ;------------------------------------------------------------
                            633 ;	main.c:66: char getchar (void)
                            634 ;	-----------------------------------------
                            635 ;	 function getchar
                            636 ;	-----------------------------------------
   0029                     637 _getchar:
                            638 ;	main.c:68: while ((SCON & 0x01) == 0);     // wait for character to be received, spin on RI
   0029                     639 00101$:
                            640 ;	genAnd
   0029 E5 98               641 	mov	a,_SCON
                            642 ;	genIfxJump
                            643 ;	Peephole 108.d	removed ljmp by inverse jump logic
   002B 30 E0 FB            644 	jnb	acc.0,00101$
                            645 ;	Peephole 300	removed redundant label 00108$
                            646 ;	main.c:69: RI = 0;			                // clear RI flag
                            647 ;	genAssign
   002E C2 98               648 	clr	_RI
                            649 ;	main.c:70: return SBUF;  	                // return character from SBUF
                            650 ;	genAssign
   0030 AA 99               651 	mov	r2,_SBUF
                            652 ;	genRet
   0032 8A 82               653 	mov	dpl,r2
                            654 ;	Peephole 300	removed redundant label 00104$
   0034 22                  655 	ret
                            656 ;------------------------------------------------------------
                            657 ;Allocation info for local variables in function 'main'
                            658 ;------------------------------------------------------------
                            659 ;i                         Allocated with name '_main_i_1_1'
                            660 ;j                         Allocated with name '_main_j_1_1'
                            661 ;block3_started            Allocated with name '_main_block3_started_1_1'
                            662 ;game                      Allocated with name '_main_game_1_1'
                            663 ;res                       Allocated with name '_main_res_1_1'
                            664 ;res_1                     Allocated with name '_main_res_1_1_1'
                            665 ;res_2                     Allocated with name '_main_res_2_1_1'
                            666 ;res_3                     Allocated with name '_main_res_3_1_1'
                            667 ;score1                    Allocated with name '_main_score1_1_1'
                            668 ;dirChanged                Allocated with name '_main_dirChanged_1_1'
                            669 ;score2                    Allocated with name '_main_score2_1_1'
                            670 ;col_number                Allocated with name '_main_col_number_1_1'
                            671 ;col_number_1              Allocated with name '_main_col_number_1_1_1'
                            672 ;col_number_3              Allocated with name '_main_col_number_3_1_1'
                            673 ;refresh_divider           Allocated with name '_main_refresh_divider_1_1'
                            674 ;------------------------------------------------------------
                            675 ;	main.c:73: void main(void)
                            676 ;	-----------------------------------------
                            677 ;	 function main
                            678 ;	-----------------------------------------
   0035                     679 _main:
                            680 ;	main.c:78: int score1=0;                                                   //Variable to store final score of the game
                            681 ;	genAssign
   0035 90s02rDF            682 	mov	dptr,#_main_score1_1_1
   0038 E4                  683 	clr	a
   0039 F0                  684 	movx	@dptr,a
   003A A3                  685 	inc	dptr
   003B F0                  686 	movx	@dptr,a
                            687 ;	main.c:80: int score2=0;
                            688 ;	genAssign
   003C 90s02rE1            689 	mov	dptr,#_main_score2_1_1
   003F E4                  690 	clr	a
   0040 F0                  691 	movx	@dptr,a
   0041 A3                  692 	inc	dptr
   0042 F0                  693 	movx	@dptr,a
                            694 ;	main.c:87: introduction();                                                         //Display Project name and Members
                            695 ;	genCall
   0043 12s00r00            696 	lcall	_introduction
                            697 ;	main.c:88: lcd_init();                                                             //Initialize LCD
                            698 ;	genCall
   0046 12s00r00            699 	lcall	_lcd_init
                            700 ;	main.c:93: for(i=0;i<100;i++)
   0049                     701 00185$:
                            702 ;	genAssign
   0049 7A 00               703 	mov	r2,#0x00
   004B 7B 00               704 	mov	r3,#0x00
   004D                     705 00166$:
                            706 ;	genCmpLt
                            707 ;	genCmp
   004D C3                  708 	clr	c
   004E EA                  709 	mov	a,r2
   004F 94 64               710 	subb	a,#0x64
   0051 EB                  711 	mov	a,r3
   0052 64 80               712 	xrl	a,#0x80
   0054 94 80               713 	subb	a,#0x80
                            714 ;	genIfxJump
                            715 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0056 50 2C               716 	jnc	00169$
                            717 ;	Peephole 300	removed redundant label 00233$
                            718 ;	main.c:95: snakeX[i]=0;
                            719 ;	genLeftShift
                            720 ;	genLeftShiftLiteral
                            721 ;	genlshTwo
   0058 8A 04               722 	mov	ar4,r2
   005A EB                  723 	mov	a,r3
   005B CC                  724 	xch	a,r4
   005C 25 E0               725 	add	a,acc
   005E CC                  726 	xch	a,r4
   005F 33                  727 	rlc	a
   0060 FD                  728 	mov	r5,a
                            729 ;	genPlus
                            730 ;	Peephole 236.g	used r4 instead of ar4
   0061 EC                  731 	mov	a,r4
   0062 24r02               732 	add	a,#_snakeX
   0064 F5 82               733 	mov	dpl,a
                            734 ;	Peephole 236.g	used r5 instead of ar5
   0066 ED                  735 	mov	a,r5
   0067 34s00               736 	addc	a,#(_snakeX >> 8)
   0069 F5 83               737 	mov	dph,a
                            738 ;	genPointerSet
                            739 ;     genFarPointerSet
                            740 ;	Peephole 181	changed mov to clr
   006B E4                  741 	clr	a
   006C F0                  742 	movx	@dptr,a
   006D A3                  743 	inc	dptr
                            744 ;	Peephole 101	removed redundant mov
   006E F0                  745 	movx	@dptr,a
                            746 ;	main.c:96: snakeY[i]=0;
                            747 ;	genPlus
                            748 ;	Peephole 236.g	used r4 instead of ar4
   006F EC                  749 	mov	a,r4
   0070 24rCA               750 	add	a,#_snakeY
   0072 F5 82               751 	mov	dpl,a
                            752 ;	Peephole 236.g	used r5 instead of ar5
   0074 ED                  753 	mov	a,r5
   0075 34s00               754 	addc	a,#(_snakeY >> 8)
   0077 F5 83               755 	mov	dph,a
                            756 ;	genPointerSet
                            757 ;     genFarPointerSet
                            758 ;	Peephole 181	changed mov to clr
   0079 E4                  759 	clr	a
   007A F0                  760 	movx	@dptr,a
   007B A3                  761 	inc	dptr
                            762 ;	Peephole 101	removed redundant mov
   007C F0                  763 	movx	@dptr,a
                            764 ;	main.c:93: for(i=0;i<100;i++)
                            765 ;	genPlus
                            766 ;     genPlusIncr
                            767 ;	tail increment optimized (range 8)
   007D 0A                  768 	inc	r2
   007E BA 00 CC            769 	cjne	r2,#0x00,00166$
   0081 0B                  770 	inc	r3
                            771 ;	Peephole 112.b	changed ljmp to sjmp
   0082 80 C9               772 	sjmp	00166$
   0084                     773 00169$:
                            774 ;	main.c:98: for(i=0;i<5;i++)
                            775 ;	genAssign
   0084 7A 00               776 	mov	r2,#0x00
   0086 7B 00               777 	mov	r3,#0x00
   0088                     778 00170$:
                            779 ;	genCmpLt
                            780 ;	genCmp
   0088 C3                  781 	clr	c
   0089 EA                  782 	mov	a,r2
   008A 94 05               783 	subb	a,#0x05
   008C EB                  784 	mov	a,r3
   008D 64 80               785 	xrl	a,#0x80
   008F 94 80               786 	subb	a,#0x80
                            787 ;	genIfxJump
                            788 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0091 50 65               789 	jnc	00173$
                            790 ;	Peephole 300	removed redundant label 00234$
                            791 ;	main.c:100: blockX[i]=0;
                            792 ;	genLeftShift
                            793 ;	genLeftShiftLiteral
                            794 ;	genlshTwo
   0093 8A 04               795 	mov	ar4,r2
   0095 EB                  796 	mov	a,r3
   0096 CC                  797 	xch	a,r4
   0097 25 E0               798 	add	a,acc
   0099 CC                  799 	xch	a,r4
   009A 33                  800 	rlc	a
   009B FD                  801 	mov	r5,a
                            802 ;	genPlus
                            803 ;	Peephole 236.g	used r4 instead of ar4
   009C EC                  804 	mov	a,r4
   009D 24r96               805 	add	a,#_blockX
   009F F5 82               806 	mov	dpl,a
                            807 ;	Peephole 236.g	used r5 instead of ar5
   00A1 ED                  808 	mov	a,r5
   00A2 34s01               809 	addc	a,#(_blockX >> 8)
   00A4 F5 83               810 	mov	dph,a
                            811 ;	genPointerSet
                            812 ;     genFarPointerSet
                            813 ;	Peephole 181	changed mov to clr
   00A6 E4                  814 	clr	a
   00A7 F0                  815 	movx	@dptr,a
   00A8 A3                  816 	inc	dptr
                            817 ;	Peephole 101	removed redundant mov
   00A9 F0                  818 	movx	@dptr,a
                            819 ;	main.c:101: blockY[i]=0;
                            820 ;	genPlus
                            821 ;	Peephole 236.g	used r4 instead of ar4
   00AA EC                  822 	mov	a,r4
   00AB 24rA0               823 	add	a,#_blockY
   00AD F5 82               824 	mov	dpl,a
                            825 ;	Peephole 236.g	used r5 instead of ar5
   00AF ED                  826 	mov	a,r5
   00B0 34s01               827 	addc	a,#(_blockY >> 8)
   00B2 F5 83               828 	mov	dph,a
                            829 ;	genPointerSet
                            830 ;     genFarPointerSet
                            831 ;	Peephole 181	changed mov to clr
   00B4 E4                  832 	clr	a
   00B5 F0                  833 	movx	@dptr,a
   00B6 A3                  834 	inc	dptr
                            835 ;	Peephole 101	removed redundant mov
   00B7 F0                  836 	movx	@dptr,a
                            837 ;	main.c:102: blockA[i]=0;
                            838 ;	genPlus
                            839 ;	Peephole 236.g	used r4 instead of ar4
   00B8 EC                  840 	mov	a,r4
   00B9 24rAA               841 	add	a,#_blockA
   00BB F5 82               842 	mov	dpl,a
                            843 ;	Peephole 236.g	used r5 instead of ar5
   00BD ED                  844 	mov	a,r5
   00BE 34s01               845 	addc	a,#(_blockA >> 8)
   00C0 F5 83               846 	mov	dph,a
                            847 ;	genPointerSet
                            848 ;     genFarPointerSet
                            849 ;	Peephole 181	changed mov to clr
   00C2 E4                  850 	clr	a
   00C3 F0                  851 	movx	@dptr,a
   00C4 A3                  852 	inc	dptr
                            853 ;	Peephole 101	removed redundant mov
   00C5 F0                  854 	movx	@dptr,a
                            855 ;	main.c:103: blockB[i]=0;
                            856 ;	genPlus
                            857 ;	Peephole 236.g	used r4 instead of ar4
   00C6 EC                  858 	mov	a,r4
   00C7 24rB4               859 	add	a,#_blockB
   00C9 F5 82               860 	mov	dpl,a
                            861 ;	Peephole 236.g	used r5 instead of ar5
   00CB ED                  862 	mov	a,r5
   00CC 34s01               863 	addc	a,#(_blockB >> 8)
   00CE F5 83               864 	mov	dph,a
                            865 ;	genPointerSet
                            866 ;     genFarPointerSet
                            867 ;	Peephole 181	changed mov to clr
   00D0 E4                  868 	clr	a
   00D1 F0                  869 	movx	@dptr,a
   00D2 A3                  870 	inc	dptr
                            871 ;	Peephole 101	removed redundant mov
   00D3 F0                  872 	movx	@dptr,a
                            873 ;	main.c:104: blockC[i]=0;
                            874 ;	genPlus
                            875 ;	Peephole 236.g	used r4 instead of ar4
   00D4 EC                  876 	mov	a,r4
   00D5 24rBE               877 	add	a,#_blockC
   00D7 F5 82               878 	mov	dpl,a
                            879 ;	Peephole 236.g	used r5 instead of ar5
   00D9 ED                  880 	mov	a,r5
   00DA 34s01               881 	addc	a,#(_blockC >> 8)
   00DC F5 83               882 	mov	dph,a
                            883 ;	genPointerSet
                            884 ;     genFarPointerSet
                            885 ;	Peephole 181	changed mov to clr
   00DE E4                  886 	clr	a
   00DF F0                  887 	movx	@dptr,a
   00E0 A3                  888 	inc	dptr
                            889 ;	Peephole 101	removed redundant mov
   00E1 F0                  890 	movx	@dptr,a
                            891 ;	main.c:105: blockD[i]=0;
                            892 ;	genPlus
                            893 ;	Peephole 236.g	used r4 instead of ar4
   00E2 EC                  894 	mov	a,r4
   00E3 24rC8               895 	add	a,#_blockD
   00E5 F5 82               896 	mov	dpl,a
                            897 ;	Peephole 236.g	used r5 instead of ar5
   00E7 ED                  898 	mov	a,r5
   00E8 34s01               899 	addc	a,#(_blockD >> 8)
   00EA F5 83               900 	mov	dph,a
                            901 ;	genPointerSet
                            902 ;     genFarPointerSet
                            903 ;	Peephole 181	changed mov to clr
   00EC E4                  904 	clr	a
   00ED F0                  905 	movx	@dptr,a
   00EE A3                  906 	inc	dptr
                            907 ;	Peephole 101	removed redundant mov
   00EF F0                  908 	movx	@dptr,a
                            909 ;	main.c:98: for(i=0;i<5;i++)
                            910 ;	genPlus
                            911 ;     genPlusIncr
   00F0 0A                  912 	inc	r2
   00F1 BA 00 01            913 	cjne	r2,#0x00,00235$
   00F4 0B                  914 	inc	r3
   00F5                     915 00235$:
   00F5 02s00r88            916 	ljmp	00170$
   00F8                     917 00173$:
                            918 ;	main.c:107: for(i=0;i<16;i++)
                            919 ;	genAssign
   00F8 7A 00               920 	mov	r2,#0x00
   00FA 7B 00               921 	mov	r3,#0x00
   00FC                     922 00178$:
                            923 ;	genCmpLt
                            924 ;	genCmp
   00FC C3                  925 	clr	c
   00FD EA                  926 	mov	a,r2
   00FE 94 10               927 	subb	a,#0x10
   0100 EB                  928 	mov	a,r3
   0101 64 80               929 	xrl	a,#0x80
   0103 94 80               930 	subb	a,#0x80
                            931 ;	genIfxJump
                            932 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0105 50 4A               933 	jnc	00181$
                            934 ;	Peephole 300	removed redundant label 00236$
                            935 ;	main.c:108: for(j=0;j<8;j++)
                            936 ;	genLeftShift
                            937 ;	genLeftShiftLiteral
                            938 ;	genlshTwo
   0107 8A 04               939 	mov	ar4,r2
   0109 EB                  940 	mov	a,r3
   010A C4                  941 	swap	a
   010B 54 F0               942 	anl	a,#0xf0
   010D CC                  943 	xch	a,r4
   010E C4                  944 	swap	a
   010F CC                  945 	xch	a,r4
   0110 6C                  946 	xrl	a,r4
   0111 CC                  947 	xch	a,r4
   0112 54 F0               948 	anl	a,#0xf0
   0114 CC                  949 	xch	a,r4
   0115 6C                  950 	xrl	a,r4
   0116 FD                  951 	mov	r5,a
                            952 ;	genPlus
                            953 ;	Peephole 236.g	used r4 instead of ar4
   0117 EC                  954 	mov	a,r4
   0118 24rD2               955 	add	a,#_arena
   011A FC                  956 	mov	r4,a
                            957 ;	Peephole 236.g	used r5 instead of ar5
   011B ED                  958 	mov	a,r5
   011C 34s01               959 	addc	a,#(_arena >> 8)
   011E FD                  960 	mov	r5,a
                            961 ;	genAssign
   011F 7E 00               962 	mov	r6,#0x00
   0121 7F 00               963 	mov	r7,#0x00
   0123                     964 00174$:
                            965 ;	genCmpLt
                            966 ;	genCmp
   0123 C3                  967 	clr	c
   0124 EE                  968 	mov	a,r6
   0125 94 08               969 	subb	a,#0x08
   0127 EF                  970 	mov	a,r7
   0128 64 80               971 	xrl	a,#0x80
   012A 94 80               972 	subb	a,#0x80
                            973 ;	genIfxJump
                            974 ;	Peephole 108.a	removed ljmp by inverse jump logic
   012C 50 1C               975 	jnc	00180$
                            976 ;	Peephole 300	removed redundant label 00237$
                            977 ;	main.c:109: arena[i][j]=0;
                            978 ;	genLeftShift
                            979 ;	genLeftShiftLiteral
                            980 ;	genlshTwo
   012E 8E 00               981 	mov	ar0,r6
   0130 EF                  982 	mov	a,r7
   0131 C8                  983 	xch	a,r0
   0132 25 E0               984 	add	a,acc
   0134 C8                  985 	xch	a,r0
   0135 33                  986 	rlc	a
   0136 F9                  987 	mov	r1,a
                            988 ;	genPlus
                            989 ;	Peephole 236.g	used r0 instead of ar0
   0137 E8                  990 	mov	a,r0
                            991 ;	Peephole 236.a	used r4 instead of ar4
   0138 2C                  992 	add	a,r4
   0139 F5 82               993 	mov	dpl,a
                            994 ;	Peephole 236.g	used r1 instead of ar1
   013B E9                  995 	mov	a,r1
                            996 ;	Peephole 236.b	used r5 instead of ar5
   013C 3D                  997 	addc	a,r5
   013D F5 83               998 	mov	dph,a
                            999 ;	genPointerSet
                           1000 ;     genFarPointerSet
                           1001 ;	Peephole 181	changed mov to clr
   013F E4                 1002 	clr	a
   0140 F0                 1003 	movx	@dptr,a
   0141 A3                 1004 	inc	dptr
                           1005 ;	Peephole 101	removed redundant mov
   0142 F0                 1006 	movx	@dptr,a
                           1007 ;	main.c:108: for(j=0;j<8;j++)
                           1008 ;	genPlus
                           1009 ;     genPlusIncr
                           1010 ;	tail increment optimized (range 6)
   0143 0E                 1011 	inc	r6
   0144 BE 00 DC           1012 	cjne	r6,#0x00,00174$
   0147 0F                 1013 	inc	r7
                           1014 ;	Peephole 112.b	changed ljmp to sjmp
   0148 80 D9              1015 	sjmp	00174$
   014A                    1016 00180$:
                           1017 ;	main.c:107: for(i=0;i<16;i++)
                           1018 ;	genPlus
                           1019 ;     genPlusIncr
   014A 0A                 1020 	inc	r2
                           1021 ;	Peephole 112.b	changed ljmp to sjmp
                           1022 ;	Peephole 243	avoided branch to sjmp
   014B BA 00 AE           1023 	cjne	r2,#0x00,00178$
   014E 0B                 1024 	inc	r3
                           1025 ;	Peephole 300	removed redundant label 00238$
   014F 80 AB              1026 	sjmp	00178$
   0151                    1027 00181$:
                           1028 ;	main.c:111: game=menu();                                                        //Display Menu and select game
                           1029 ;	genCall
   0151 12s00r00           1030 	lcall	_menu
   0154 AA 82              1031 	mov	r2,dpl
   0156 AB 83              1032 	mov	r3,dph
                           1033 ;	main.c:112: lcd_init();
                           1034 ;	genCall
   0158 C0 02              1035 	push	ar2
   015A C0 03              1036 	push	ar3
   015C 12s00r00           1037 	lcall	_lcd_init
   015F D0 03              1038 	pop	ar3
   0161 D0 02              1039 	pop	ar2
                           1040 ;	main.c:114: if(game==1)                                                         //Select Snake
                           1041 ;	genCmpEq
                           1042 ;	gencjneshort
   0163 BA 01 05           1043 	cjne	r2,#0x01,00239$
   0166 BB 00 02           1044 	cjne	r3,#0x00,00239$
   0169 80 03              1045 	sjmp	00240$
   016B                    1046 00239$:
   016B 02s03r67           1047 	ljmp	00121$
   016E                    1048 00240$:
                           1049 ;	main.c:116: snakeDir = 1;
                           1050 ;	genAssign
   016E 90s01r92           1051 	mov	dptr,#_snakeDir
   0171 74 01              1052 	mov	a,#0x01
   0173 F0                 1053 	movx	@dptr,a
   0174 E4                 1054 	clr	a
   0175 A3                 1055 	inc	dptr
   0176 F0                 1056 	movx	@dptr,a
                           1057 ;	main.c:117: snakeLen = 3;
                           1058 ;	genAssign
   0177 90s00r00           1059 	mov	dptr,#_snakeLen
   017A 74 03              1060 	mov	a,#0x03
   017C F0                 1061 	movx	@dptr,a
   017D E4                 1062 	clr	a
   017E A3                 1063 	inc	dptr
   017F F0                 1064 	movx	@dptr,a
                           1065 ;	main.c:120: snakeY[0] = 0;                                                  //Initialize Y coordinates to start from top
                           1066 ;	genPointerSet
                           1067 ;     genFarPointerSet
   0180 90s00rCA           1068 	mov	dptr,#_snakeY
                           1069 ;	Peephole 181	changed mov to clr
   0183 E4                 1070 	clr	a
   0184 F0                 1071 	movx	@dptr,a
   0185 A3                 1072 	inc	dptr
                           1073 ;	Peephole 101	removed redundant mov
   0186 F0                 1074 	movx	@dptr,a
                           1075 ;	main.c:121: snakeY[1] = 0;
                           1076 ;	genPointerSet
                           1077 ;     genFarPointerSet
   0187 90s00rCC           1078 	mov	dptr,#(_snakeY + 0x0002)
                           1079 ;	Peephole 181	changed mov to clr
   018A E4                 1080 	clr	a
   018B F0                 1081 	movx	@dptr,a
   018C A3                 1082 	inc	dptr
                           1083 ;	Peephole 101	removed redundant mov
   018D F0                 1084 	movx	@dptr,a
                           1085 ;	main.c:122: snakeY[2] = 0;
                           1086 ;	genPointerSet
                           1087 ;     genFarPointerSet
   018E 90s00rCE           1088 	mov	dptr,#(_snakeY + 0x0004)
                           1089 ;	Peephole 181	changed mov to clr
   0191 E4                 1090 	clr	a
   0192 F0                 1091 	movx	@dptr,a
   0193 A3                 1092 	inc	dptr
                           1093 ;	Peephole 101	removed redundant mov
   0194 F0                 1094 	movx	@dptr,a
                           1095 ;	main.c:124: snakeX[0] = 2;                                                  //Initialize X coordinates to start from left
                           1096 ;	genPointerSet
                           1097 ;     genFarPointerSet
   0195 90s00r02           1098 	mov	dptr,#_snakeX
   0198 74 02              1099 	mov	a,#0x02
   019A F0                 1100 	movx	@dptr,a
   019B A3                 1101 	inc	dptr
                           1102 ;	Peephole 181	changed mov to clr
   019C E4                 1103 	clr	a
   019D F0                 1104 	movx	@dptr,a
                           1105 ;	main.c:125: snakeX[1] = 1;
                           1106 ;	genPointerSet
                           1107 ;     genFarPointerSet
   019E 90s00r04           1108 	mov	dptr,#(_snakeX + 0x0002)
   01A1 74 01              1109 	mov	a,#0x01
   01A3 F0                 1110 	movx	@dptr,a
   01A4 A3                 1111 	inc	dptr
                           1112 ;	Peephole 181	changed mov to clr
                           1113 ;	main.c:126: snakeX[2] = 0;
                           1114 ;	genPointerSet
                           1115 ;     genFarPointerSet
                           1116 ;	Peephole 181	changed mov to clr
                           1117 ;	Peephole 219.a	removed redundant clear
   01A5 E4                 1118 	clr	a
   01A6 F0                 1119 	movx	@dptr,a
   01A7 90s00r06           1120 	mov	dptr,#(_snakeX + 0x0004)
   01AA F0                 1121 	movx	@dptr,a
   01AB A3                 1122 	inc	dptr
                           1123 ;	Peephole 101	removed redundant mov
   01AC F0                 1124 	movx	@dptr,a
                           1125 ;	main.c:128: arena[0][0] = code_byte_SNAKE;                                  //Initially display the snake with head,body of length 1 and tail
                           1126 ;	genPointerSet
                           1127 ;     genFarPointerSet
   01AD 90s01rD2           1128 	mov	dptr,#_arena
   01B0 74 DB              1129 	mov	a,#0xDB
   01B2 F0                 1130 	movx	@dptr,a
   01B3 A3                 1131 	inc	dptr
                           1132 ;	Peephole 181	changed mov to clr
   01B4 E4                 1133 	clr	a
   01B5 F0                 1134 	movx	@dptr,a
                           1135 ;	main.c:129: arena[1][0] = code_byte_SNAKE;
                           1136 ;	genPointerSet
                           1137 ;     genFarPointerSet
   01B6 90s01rE2           1138 	mov	dptr,#(_arena + 0x0010)
   01B9 74 DB              1139 	mov	a,#0xDB
   01BB F0                 1140 	movx	@dptr,a
   01BC A3                 1141 	inc	dptr
                           1142 ;	Peephole 181	changed mov to clr
   01BD E4                 1143 	clr	a
   01BE F0                 1144 	movx	@dptr,a
                           1145 ;	main.c:130: arena[2][0] = code_byte_SNAKE;
                           1146 ;	genPointerSet
                           1147 ;     genFarPointerSet
   01BF 90s01rF2           1148 	mov	dptr,#(_arena + 0x0020)
   01C2 74 DB              1149 	mov	a,#0xDB
   01C4 F0                 1150 	movx	@dptr,a
   01C5 A3                 1151 	inc	dptr
                           1152 ;	Peephole 181	changed mov to clr
   01C6 E4                 1153 	clr	a
   01C7 F0                 1154 	movx	@dptr,a
                           1155 ;	main.c:132: put_food();
                           1156 ;	genCall
   01C8 C0 02              1157 	push	ar2
   01CA C0 03              1158 	push	ar3
   01CC 12s00r00           1159 	lcall	_put_food
   01CF D0 03              1160 	pop	ar3
   01D1 D0 02              1161 	pop	ar2
                           1162 ;	main.c:133: glcdUpdate();
                           1163 ;	genCall
   01D3 C0 02              1164 	push	ar2
   01D5 C0 03              1165 	push	ar3
   01D7 12s00r00           1166 	lcall	_glcdUpdate
   01DA D0 03              1167 	pop	ar3
   01DC D0 02              1168 	pop	ar2
                           1169 ;	main.c:135: while(1)
                           1170 ;	genAssign
   01DE 90s02rDF           1171 	mov	dptr,#_main_score1_1_1
   01E1 E0                 1172 	movx	a,@dptr
   01E2 FC                 1173 	mov	r4,a
   01E3 A3                 1174 	inc	dptr
   01E4 E0                 1175 	movx	a,@dptr
   01E5 FD                 1176 	mov	r5,a
                           1177 ;	main.c:138: for(i=0; i<16; i++) {					                    //Checking if any key has been pressed
   01E6                    1178 00195$:
                           1179 ;	genAssign
   01E6 7E 00              1180 	mov	r6,#0x00
   01E8 7F 00              1181 	mov	r7,#0x00
   01EA                    1182 00103$:
                           1183 ;	genCmpLt
                           1184 ;	genCmp
   01EA C3                 1185 	clr	c
   01EB EE                 1186 	mov	a,r6
   01EC 94 10              1187 	subb	a,#0x10
   01EE EF                 1188 	mov	a,r7
   01EF 64 80              1189 	xrl	a,#0x80
   01F1 94 80              1190 	subb	a,#0x80
                           1191 ;	genIfxJump
                           1192 ;	Peephole 108.a	removed ljmp by inverse jump logic
   01F3 50 50              1193 	jnc	00106$
                           1194 ;	Peephole 300	removed redundant label 00241$
                           1195 ;	main.c:139: dirChanged = refreshSnakeDir();
                           1196 ;	genCall
   01F5 C0 02              1197 	push	ar2
   01F7 C0 03              1198 	push	ar3
   01F9 C0 04              1199 	push	ar4
   01FB C0 05              1200 	push	ar5
   01FD C0 06              1201 	push	ar6
   01FF C0 07              1202 	push	ar7
   0201 12s00r00           1203 	lcall	_refreshSnakeDir
   0204 A8 82              1204 	mov	r0,dpl
   0206 A9 83              1205 	mov	r1,dph
   0208 D0 07              1206 	pop	ar7
   020A D0 06              1207 	pop	ar6
   020C D0 05              1208 	pop	ar5
   020E D0 04              1209 	pop	ar4
   0210 D0 03              1210 	pop	ar3
   0212 D0 02              1211 	pop	ar2
                           1212 ;	main.c:140: delay(20);
                           1213 ;	genCall
                           1214 ;	Peephole 182.b	used 16 bit load of dptr
   0214 90 00 14           1215 	mov	dptr,#0x0014
   0217 C0 02              1216 	push	ar2
   0219 C0 03              1217 	push	ar3
   021B C0 04              1218 	push	ar4
   021D C0 05              1219 	push	ar5
   021F C0 06              1220 	push	ar6
   0221 C0 07              1221 	push	ar7
   0223 C0 00              1222 	push	ar0
   0225 C0 01              1223 	push	ar1
   0227 12s00r00           1224 	lcall	_delay
   022A D0 01              1225 	pop	ar1
   022C D0 00              1226 	pop	ar0
   022E D0 07              1227 	pop	ar7
   0230 D0 06              1228 	pop	ar6
   0232 D0 05              1229 	pop	ar5
   0234 D0 04              1230 	pop	ar4
   0236 D0 03              1231 	pop	ar3
   0238 D0 02              1232 	pop	ar2
                           1233 ;	main.c:141: if(dirChanged)
                           1234 ;	genIfx
   023A E8                 1235 	mov	a,r0
   023B 49                 1236 	orl	a,r1
                           1237 ;	genIfxJump
                           1238 ;	Peephole 108.b	removed ljmp by inverse jump logic
   023C 70 07              1239 	jnz	00106$
                           1240 ;	Peephole 300	removed redundant label 00242$
                           1241 ;	main.c:138: for(i=0; i<16; i++) {					                    //Checking if any key has been pressed
                           1242 ;	genPlus
                           1243 ;     genPlusIncr
                           1244 ;	tail increment optimized (range 7)
   023E 0E                 1245 	inc	r6
   023F BE 00 A8           1246 	cjne	r6,#0x00,00103$
   0242 0F                 1247 	inc	r7
                           1248 ;	Peephole 112.b	changed ljmp to sjmp
   0243 80 A5              1249 	sjmp	00103$
   0245                    1250 00106$:
                           1251 ;	main.c:145: refreshSnakeDir();
                           1252 ;	genCall
   0245 C0 02              1253 	push	ar2
   0247 C0 03              1254 	push	ar3
   0249 C0 04              1255 	push	ar4
   024B C0 05              1256 	push	ar5
   024D 12s00r00           1257 	lcall	_refreshSnakeDir
   0250 D0 05              1258 	pop	ar5
   0252 D0 04              1259 	pop	ar4
   0254 D0 03              1260 	pop	ar3
   0256 D0 02              1261 	pop	ar2
                           1262 ;	main.c:146: res = move_snake();                                         //Move the snake in that direction
                           1263 ;	genCall
   0258 C0 02              1264 	push	ar2
   025A C0 03              1265 	push	ar3
   025C C0 04              1266 	push	ar4
   025E C0 05              1267 	push	ar5
   0260 12s00r00           1268 	lcall	_move_snake
   0263 AE 82              1269 	mov	r6,dpl
   0265 AF 83              1270 	mov	r7,dph
   0267 D0 05              1271 	pop	ar5
   0269 D0 04              1272 	pop	ar4
   026B D0 03              1273 	pop	ar3
   026D D0 02              1274 	pop	ar2
                           1275 ;	main.c:148: if(res==2) {
                           1276 ;	genCmpEq
                           1277 ;	gencjneshort
                           1278 ;	Peephole 112.b	changed ljmp to sjmp
                           1279 ;	Peephole 198.a	optimized misc jump sequence
   026F BE 02 23           1280 	cjne	r6,#0x02,00108$
   0272 BF 00 20           1281 	cjne	r7,#0x00,00108$
                           1282 ;	Peephole 200.b	removed redundant sjmp
                           1283 ;	Peephole 300	removed redundant label 00243$
                           1284 ;	Peephole 300	removed redundant label 00244$
                           1285 ;	main.c:149: score1++;                                                //If snake eats the food increment the score
                           1286 ;	genPlus
                           1287 ;     genPlusIncr
   0275 0C                 1288 	inc	r4
   0276 BC 00 01           1289 	cjne	r4,#0x00,00245$
   0279 0D                 1290 	inc	r5
   027A                    1291 00245$:
                           1292 ;	main.c:150: put_food();                                             //And again put the food somewhere else
                           1293 ;	genCall
   027A C0 02              1294 	push	ar2
   027C C0 03              1295 	push	ar3
   027E C0 04              1296 	push	ar4
   0280 C0 05              1297 	push	ar5
   0282 C0 06              1298 	push	ar6
   0284 C0 07              1299 	push	ar7
   0286 12s00r00           1300 	lcall	_put_food
   0289 D0 07              1301 	pop	ar7
   028B D0 06              1302 	pop	ar6
   028D D0 05              1303 	pop	ar5
   028F D0 04              1304 	pop	ar4
   0291 D0 03              1305 	pop	ar3
   0293 D0 02              1306 	pop	ar2
   0295                    1307 00108$:
                           1308 ;	main.c:153: if(res==-1) {                                               //If there is collision
                           1309 ;	genCmpEq
                           1310 ;	gencjneshort
                           1311 ;	Peephole 112.b	changed ljmp to sjmp
                           1312 ;	Peephole 198.a	optimized misc jump sequence
   0295 BE FF 5A           1313 	cjne	r6,#0xFF,00200$
   0298 BF FF 57           1314 	cjne	r7,#0xFF,00200$
                           1315 ;	Peephole 200.b	removed redundant sjmp
                           1316 ;	Peephole 300	removed redundant label 00246$
                           1317 ;	Peephole 300	removed redundant label 00247$
                           1318 ;	main.c:154: lcd_init();
                           1319 ;	genCall
   029B C0 02              1320 	push	ar2
   029D C0 03              1321 	push	ar3
   029F C0 04              1322 	push	ar4
   02A1 C0 05              1323 	push	ar5
   02A3 12s00r00           1324 	lcall	_lcd_init
   02A6 D0 05              1325 	pop	ar5
   02A8 D0 04              1326 	pop	ar4
   02AA D0 03              1327 	pop	ar3
   02AC D0 02              1328 	pop	ar2
                           1329 ;	main.c:155: lcd_put_str();                                          //Display Game over
                           1330 ;	genCall
   02AE C0 02              1331 	push	ar2
   02B0 C0 03              1332 	push	ar3
   02B2 C0 04              1333 	push	ar4
   02B4 C0 05              1334 	push	ar5
   02B6 12s00r00           1335 	lcall	_lcd_put_str
   02B9 D0 05              1336 	pop	ar5
   02BB D0 04              1337 	pop	ar4
   02BD D0 03              1338 	pop	ar3
   02BF D0 02              1339 	pop	ar2
                           1340 ;	main.c:156: lcd_put_score(score1);                                   //Display Score
                           1341 ;	genCall
   02C1 8C 82              1342 	mov	dpl,r4
   02C3 8D 83              1343 	mov	dph,r5
   02C5 C0 02              1344 	push	ar2
   02C7 C0 03              1345 	push	ar3
   02C9 12s00r00           1346 	lcall	_lcd_put_score
   02CC D0 03              1347 	pop	ar3
   02CE D0 02              1348 	pop	ar2
                           1349 ;	main.c:157: score1=0;
                           1350 ;	genAssign
   02D0 90s02rDF           1351 	mov	dptr,#_main_score1_1_1
   02D3 E4                 1352 	clr	a
   02D4 F0                 1353 	movx	@dptr,a
   02D5 A3                 1354 	inc	dptr
   02D6 F0                 1355 	movx	@dptr,a
                           1356 ;	main.c:158: delay(1000000000);                                      //Display it for sometime
                           1357 ;	genCall
                           1358 ;	Peephole 182.b	used 16 bit load of dptr
   02D7 90 CA 00           1359 	mov	dptr,#0xCA00
   02DA C0 02              1360 	push	ar2
   02DC C0 03              1361 	push	ar3
   02DE 12s00r00           1362 	lcall	_delay
   02E1 D0 03              1363 	pop	ar3
   02E3 D0 02              1364 	pop	ar2
                           1365 ;	main.c:159: lcd_init();
                           1366 ;	genCall
   02E5 C0 02              1367 	push	ar2
   02E7 C0 03              1368 	push	ar3
   02E9 12s00r00           1369 	lcall	_lcd_init
   02EC D0 03              1370 	pop	ar3
   02EE D0 02              1371 	pop	ar2
                           1372 ;	main.c:160: break;
                           1373 ;	main.c:162: for(i=0; i<16; i++) {					                    //Checking if any key has been pressed
                           1374 ;	Peephole 112.b	changed ljmp to sjmp
   02F0 80 75              1375 	sjmp	00121$
   02F2                    1376 00200$:
                           1377 ;	genAssign
   02F2 7E 00              1378 	mov	r6,#0x00
   02F4 7F 00              1379 	mov	r7,#0x00
   02F6                    1380 00113$:
                           1381 ;	genCmpLt
                           1382 ;	genCmp
   02F6 C3                 1383 	clr	c
   02F7 EE                 1384 	mov	a,r6
   02F8 94 10              1385 	subb	a,#0x10
   02FA EF                 1386 	mov	a,r7
   02FB 64 80              1387 	xrl	a,#0x80
   02FD 94 80              1388 	subb	a,#0x80
                           1389 ;	genIfxJump
                           1390 ;	Peephole 108.a	removed ljmp by inverse jump logic
   02FF 50 50              1391 	jnc	00116$
                           1392 ;	Peephole 300	removed redundant label 00248$
                           1393 ;	main.c:163: dirChanged = refreshSnakeDir();
                           1394 ;	genCall
   0301 C0 02              1395 	push	ar2
   0303 C0 03              1396 	push	ar3
   0305 C0 04              1397 	push	ar4
   0307 C0 05              1398 	push	ar5
   0309 C0 06              1399 	push	ar6
   030B C0 07              1400 	push	ar7
   030D 12s00r00           1401 	lcall	_refreshSnakeDir
   0310 A8 82              1402 	mov	r0,dpl
   0312 A9 83              1403 	mov	r1,dph
   0314 D0 07              1404 	pop	ar7
   0316 D0 06              1405 	pop	ar6
   0318 D0 05              1406 	pop	ar5
   031A D0 04              1407 	pop	ar4
   031C D0 03              1408 	pop	ar3
   031E D0 02              1409 	pop	ar2
                           1410 ;	main.c:164: delay(20);
                           1411 ;	genCall
                           1412 ;	Peephole 182.b	used 16 bit load of dptr
   0320 90 00 14           1413 	mov	dptr,#0x0014
   0323 C0 02              1414 	push	ar2
   0325 C0 03              1415 	push	ar3
   0327 C0 04              1416 	push	ar4
   0329 C0 05              1417 	push	ar5
   032B C0 06              1418 	push	ar6
   032D C0 07              1419 	push	ar7
   032F C0 00              1420 	push	ar0
   0331 C0 01              1421 	push	ar1
   0333 12s00r00           1422 	lcall	_delay
   0336 D0 01              1423 	pop	ar1
   0338 D0 00              1424 	pop	ar0
   033A D0 07              1425 	pop	ar7
   033C D0 06              1426 	pop	ar6
   033E D0 05              1427 	pop	ar5
   0340 D0 04              1428 	pop	ar4
   0342 D0 03              1429 	pop	ar3
   0344 D0 02              1430 	pop	ar2
                           1431 ;	main.c:165: if(dirChanged)
                           1432 ;	genIfx
   0346 E8                 1433 	mov	a,r0
   0347 49                 1434 	orl	a,r1
                           1435 ;	genIfxJump
                           1436 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0348 70 07              1437 	jnz	00116$
                           1438 ;	Peephole 300	removed redundant label 00249$
                           1439 ;	main.c:162: for(i=0; i<16; i++) {					                    //Checking if any key has been pressed
                           1440 ;	genPlus
                           1441 ;     genPlusIncr
                           1442 ;	tail increment optimized (range 7)
   034A 0E                 1443 	inc	r6
   034B BE 00 A8           1444 	cjne	r6,#0x00,00113$
   034E 0F                 1445 	inc	r7
                           1446 ;	Peephole 112.b	changed ljmp to sjmp
   034F 80 A5              1447 	sjmp	00113$
   0351                    1448 00116$:
                           1449 ;	main.c:168: glcdUpdate();                                               //Display the contents on GLCD
                           1450 ;	genCall
   0351 C0 02              1451 	push	ar2
   0353 C0 03              1452 	push	ar3
   0355 C0 04              1453 	push	ar4
   0357 C0 05              1454 	push	ar5
   0359 12s00r00           1455 	lcall	_glcdUpdate
   035C D0 05              1456 	pop	ar5
   035E D0 04              1457 	pop	ar4
   0360 D0 03              1458 	pop	ar3
   0362 D0 02              1459 	pop	ar2
   0364 02s01rE6           1460 	ljmp	00195$
   0367                    1461 00121$:
                           1462 ;	main.c:172: if(game==0)  //Select Racing
                           1463 ;	genIfx
   0367 EA                 1464 	mov	a,r2
   0368 4B                 1465 	orl	a,r3
                           1466 ;	genIfxJump
   0369 60 03              1467 	jz	00250$
   036B 02s00r49           1468 	ljmp	00185$
   036E                    1469 00250$:
                           1470 ;	main.c:174: car_dir = 4;									                //This variable is specifies the position of the car by default
                           1471 ;	genAssign
   036E 90s01r94           1472 	mov	dptr,#_car_dir
   0371 74 04              1473 	mov	a,#0x04
   0373 F0                 1474 	movx	@dptr,a
   0374 E4                 1475 	clr	a
   0375 A3                 1476 	inc	dptr
   0376 F0                 1477 	movx	@dptr,a
                           1478 ;	main.c:178: refresh_divider=1;								                //This variable can be initialized to either 0 or 1
                           1479 ;	genAssign
   0377 90s02rE3           1480 	mov	dptr,#_main_refresh_divider_1_1
   037A 74 01              1481 	mov	a,#0x01
   037C F0                 1482 	movx	@dptr,a
                           1483 ;	main.c:182: res_3=0;
                           1484 ;	genAssign
   037D 90s02rDD           1485 	mov	dptr,#_main_res_3_1_1
   0380 E4                 1486 	clr	a
   0381 F0                 1487 	movx	@dptr,a
   0382 A3                 1488 	inc	dptr
   0383 F0                 1489 	movx	@dptr,a
                           1490 ;	main.c:183: block3_started=0;
                           1491 ;	genAssign
   0384 90s02rD7           1492 	mov	dptr,#_main_block3_started_1_1
   0387 E4                 1493 	clr	a
   0388 F0                 1494 	movx	@dptr,a
   0389 A3                 1495 	inc	dptr
   038A F0                 1496 	movx	@dptr,a
                           1497 ;	main.c:185: while(1)
   038B                    1498 00159$:
                           1499 ;	main.c:187: col_number = generate_random_number();		                //Generate a random number for the column of the obstacle blocks
                           1500 ;	genCall
   038B 12s00r00           1501 	lcall	_generate_random_number
   038E AA 82              1502 	mov	r2,dpl
                           1503 ;	main.c:188: blockY[0] = col_number;              		                //Y coord of Obstacle block
                           1504 ;	genCast
   0390 8A 03              1505 	mov	ar3,r2
   0392 7C 00              1506 	mov	r4,#0x00
                           1507 ;	genPointerSet
                           1508 ;     genFarPointerSet
   0394 90s01rA0           1509 	mov	dptr,#_blockY
   0397 EB                 1510 	mov	a,r3
   0398 F0                 1511 	movx	@dptr,a
   0399 A3                 1512 	inc	dptr
   039A EC                 1513 	mov	a,r4
   039B F0                 1514 	movx	@dptr,a
                           1515 ;	main.c:189: blockX[0] = 0;              				                //X coord of Obstacle block
                           1516 ;	genPointerSet
                           1517 ;     genFarPointerSet
   039C 90s01r96           1518 	mov	dptr,#_blockX
                           1519 ;	Peephole 181	changed mov to clr
   039F E4                 1520 	clr	a
   03A0 F0                 1521 	movx	@dptr,a
   03A1 A3                 1522 	inc	dptr
                           1523 ;	Peephole 101	removed redundant mov
   03A2 F0                 1524 	movx	@dptr,a
                           1525 ;	main.c:190: arena[0][col_number] = code_byte_BLOCK;		                //Write to the map of the glcd that there is a block in this location
                           1526 ;	genLeftShift
                           1527 ;	genLeftShiftLiteral
                           1528 ;	genlshOne
   03A3 EA                 1529 	mov	a,r2
                           1530 ;	Peephole 254	optimized left shift
   03A4 2A                 1531 	add	a,r2
                           1532 ;	genPlus
   03A5 FA                 1533 	mov	r2,a
                           1534 ;	Peephole 177.b	removed redundant mov
   03A6 24rD2              1535 	add	a,#_arena
   03A8 F5 82              1536 	mov	dpl,a
                           1537 ;	Peephole 181	changed mov to clr
   03AA E4                 1538 	clr	a
   03AB 34s01              1539 	addc	a,#(_arena >> 8)
   03AD F5 83              1540 	mov	dph,a
                           1541 ;	genPointerSet
                           1542 ;     genFarPointerSet
   03AF 74 DE              1543 	mov	a,#0xDE
   03B1 F0                 1544 	movx	@dptr,a
   03B2 A3                 1545 	inc	dptr
                           1546 ;	Peephole 181	changed mov to clr
   03B3 E4                 1547 	clr	a
   03B4 F0                 1548 	movx	@dptr,a
                           1549 ;	main.c:192: col_number_1 = generate_random_number();	                //Generate a random number for the column of the obstacle blocks
                           1550 ;	genCall
   03B5 12s00r00           1551 	lcall	_generate_random_number
   03B8 AA 82              1552 	mov	r2,dpl
                           1553 ;	main.c:193: blockB[0] = col_number_1;              		                //Y coord of Obstacle block
                           1554 ;	genCast
   03BA 8A 03              1555 	mov	ar3,r2
   03BC 7C 00              1556 	mov	r4,#0x00
                           1557 ;	genPointerSet
                           1558 ;     genFarPointerSet
   03BE 90s01rB4           1559 	mov	dptr,#_blockB
   03C1 EB                 1560 	mov	a,r3
   03C2 F0                 1561 	movx	@dptr,a
   03C3 A3                 1562 	inc	dptr
   03C4 EC                 1563 	mov	a,r4
   03C5 F0                 1564 	movx	@dptr,a
                           1565 ;	main.c:194: blockA[0] = 0;              				                //X coord of Obstacle block
                           1566 ;	genPointerSet
                           1567 ;     genFarPointerSet
   03C6 90s01rAA           1568 	mov	dptr,#_blockA
                           1569 ;	Peephole 181	changed mov to clr
   03C9 E4                 1570 	clr	a
   03CA F0                 1571 	movx	@dptr,a
   03CB A3                 1572 	inc	dptr
                           1573 ;	Peephole 101	removed redundant mov
   03CC F0                 1574 	movx	@dptr,a
                           1575 ;	main.c:195: arena[0][col_number_1] = code_byte_BLOCK_2;	                //Write to the map of the glcd that there is a block in this location
                           1576 ;	genLeftShift
                           1577 ;	genLeftShiftLiteral
                           1578 ;	genlshOne
   03CD EA                 1579 	mov	a,r2
                           1580 ;	Peephole 254	optimized left shift
   03CE 2A                 1581 	add	a,r2
                           1582 ;	genPlus
   03CF FA                 1583 	mov	r2,a
                           1584 ;	Peephole 177.b	removed redundant mov
   03D0 24rD2              1585 	add	a,#_arena
   03D2 F5 82              1586 	mov	dpl,a
                           1587 ;	Peephole 181	changed mov to clr
   03D4 E4                 1588 	clr	a
   03D5 34s01              1589 	addc	a,#(_arena >> 8)
   03D7 F5 83              1590 	mov	dph,a
                           1591 ;	genPointerSet
                           1592 ;     genFarPointerSet
   03D9 74 DC              1593 	mov	a,#0xDC
   03DB F0                 1594 	movx	@dptr,a
   03DC A3                 1595 	inc	dptr
                           1596 ;	Peephole 181	changed mov to clr
   03DD E4                 1597 	clr	a
   03DE F0                 1598 	movx	@dptr,a
                           1599 ;	main.c:197: build_road_borders();						                //Call function that writes the border roads
                           1600 ;	genCall
   03DF 12s00r00           1601 	lcall	_build_road_borders
                           1602 ;	main.c:203: for(i=0; i<16; i++) {					                //Checking if any key has been pressed
   03E2                    1603 00206$:
                           1604 ;	genAssign
   03E2 7A 00              1605 	mov	r2,#0x00
   03E4 7B 00              1606 	mov	r3,#0x00
   03E6                    1607 00124$:
                           1608 ;	genCmpLt
                           1609 ;	genCmp
   03E6 C3                 1610 	clr	c
   03E7 EA                 1611 	mov	a,r2
   03E8 94 10              1612 	subb	a,#0x10
   03EA EB                 1613 	mov	a,r3
   03EB 64 80              1614 	xrl	a,#0x80
   03ED 94 80              1615 	subb	a,#0x80
                           1616 ;	genIfxJump
                           1617 ;	Peephole 108.a	removed ljmp by inverse jump logic
   03EF 50 30              1618 	jnc	00127$
                           1619 ;	Peephole 300	removed redundant label 00251$
                           1620 ;	main.c:204: dirChanged = refreshCarDir();
                           1621 ;	genCall
   03F1 C0 02              1622 	push	ar2
   03F3 C0 03              1623 	push	ar3
   03F5 12s00r00           1624 	lcall	_refreshCarDir
   03F8 AC 82              1625 	mov	r4,dpl
   03FA AD 83              1626 	mov	r5,dph
   03FC D0 03              1627 	pop	ar3
   03FE D0 02              1628 	pop	ar2
                           1629 ;	main.c:205: delay(20);
                           1630 ;	genCall
                           1631 ;	Peephole 182.b	used 16 bit load of dptr
   0400 90 00 14           1632 	mov	dptr,#0x0014
   0403 C0 02              1633 	push	ar2
   0405 C0 03              1634 	push	ar3
   0407 C0 04              1635 	push	ar4
   0409 C0 05              1636 	push	ar5
   040B 12s00r00           1637 	lcall	_delay
   040E D0 05              1638 	pop	ar5
   0410 D0 04              1639 	pop	ar4
   0412 D0 03              1640 	pop	ar3
   0414 D0 02              1641 	pop	ar2
                           1642 ;	main.c:206: if(dirChanged)
                           1643 ;	genIfx
   0416 EC                 1644 	mov	a,r4
   0417 4D                 1645 	orl	a,r5
                           1646 ;	genIfxJump
                           1647 ;	Peephole 108.b	removed ljmp by inverse jump logic
   0418 70 07              1648 	jnz	00127$
                           1649 ;	Peephole 300	removed redundant label 00252$
                           1650 ;	main.c:203: for(i=0; i<16; i++) {					                //Checking if any key has been pressed
                           1651 ;	genPlus
                           1652 ;     genPlusIncr
                           1653 ;	tail increment optimized (range 7)
   041A 0A                 1654 	inc	r2
   041B BA 00 C8           1655 	cjne	r2,#0x00,00124$
   041E 0B                 1656 	inc	r3
                           1657 ;	Peephole 112.b	changed ljmp to sjmp
   041F 80 C5              1658 	sjmp	00124$
   0421                    1659 00127$:
                           1660 ;	main.c:210: if(refresh_divider==1)					                //The divider alternates from top dark to bottom dark
                           1661 ;	genAssign
   0421 90s02rE3           1662 	mov	dptr,#_main_refresh_divider_1_1
   0424 E0                 1663 	movx	a,@dptr
   0425 FA                 1664 	mov	r2,a
                           1665 ;	genCmpEq
                           1666 ;	gencjneshort
                           1667 ;	Peephole 112.b	changed ljmp to sjmp
                           1668 ;	Peephole 198.b	optimized misc jump sequence
   0426 BA 01 0A           1669 	cjne	r2,#0x01,00129$
                           1670 ;	Peephole 200.b	removed redundant sjmp
                           1671 ;	Peephole 300	removed redundant label 00253$
                           1672 ;	Peephole 300	removed redundant label 00254$
                           1673 ;	main.c:212: refresh_divider=0;
                           1674 ;	genAssign
   0429 90s02rE3           1675 	mov	dptr,#_main_refresh_divider_1_1
                           1676 ;	Peephole 181	changed mov to clr
   042C E4                 1677 	clr	a
   042D F0                 1678 	movx	@dptr,a
                           1679 ;	main.c:213: build_road_divider();				                //The top 8 bits of the divider are darkened
                           1680 ;	genCall
   042E 12s00r00           1681 	lcall	_build_road_divider
                           1682 ;	Peephole 112.b	changed ljmp to sjmp
   0431 80 09              1683 	sjmp	00130$
   0433                    1684 00129$:
                           1685 ;	main.c:217: refresh_divider=1;
                           1686 ;	genAssign
   0433 90s02rE3           1687 	mov	dptr,#_main_refresh_divider_1_1
   0436 74 01              1688 	mov	a,#0x01
   0438 F0                 1689 	movx	@dptr,a
                           1690 ;	main.c:218: build_road_divider_1();				                //the bottom 8 bits of the divider are darkened
                           1691 ;	genCall
   0439 12s00r00           1692 	lcall	_build_road_divider_1
   043C                    1693 00130$:
                           1694 ;	main.c:221: glcdUpdate1();							                //Update the graphics LCD
                           1695 ;	genCall
   043C 12s00r00           1696 	lcall	_glcdUpdate1
                           1697 ;	main.c:223: if(blockX[0]==7)						                //Start the third block when the first block moves 6 units ahead
                           1698 ;	genPointerGet
                           1699 ;	genFarPointerGet
   043F 90s01r96           1700 	mov	dptr,#_blockX
   0442 E0                 1701 	movx	a,@dptr
   0443 FA                 1702 	mov	r2,a
   0444 A3                 1703 	inc	dptr
   0445 E0                 1704 	movx	a,@dptr
   0446 FB                 1705 	mov	r3,a
                           1706 ;	genCmpEq
                           1707 ;	gencjneshort
                           1708 ;	Peephole 112.b	changed ljmp to sjmp
                           1709 ;	Peephole 198.a	optimized misc jump sequence
   0447 BA 07 36           1710 	cjne	r2,#0x07,00132$
   044A BB 00 33           1711 	cjne	r3,#0x00,00132$
                           1712 ;	Peephole 200.b	removed redundant sjmp
                           1713 ;	Peephole 300	removed redundant label 00255$
                           1714 ;	Peephole 300	removed redundant label 00256$
                           1715 ;	main.c:225: col_number_3 = generate_random_number();		    //Generate a random number for the column of the obstacle blocks
                           1716 ;	genCall
   044D 12s00r00           1717 	lcall	_generate_random_number
   0450 AA 82              1718 	mov	r2,dpl
                           1719 ;	main.c:226: blockD[0] = col_number_3;             			    //Y coord of Obstacle block
                           1720 ;	genCast
   0452 8A 03              1721 	mov	ar3,r2
   0454 7C 00              1722 	mov	r4,#0x00
                           1723 ;	genPointerSet
                           1724 ;     genFarPointerSet
   0456 90s01rC8           1725 	mov	dptr,#_blockD
   0459 EB                 1726 	mov	a,r3
   045A F0                 1727 	movx	@dptr,a
   045B A3                 1728 	inc	dptr
   045C EC                 1729 	mov	a,r4
   045D F0                 1730 	movx	@dptr,a
                           1731 ;	main.c:227: blockC[0] = 0;            						    //X coord of Obstacle block
                           1732 ;	genPointerSet
                           1733 ;     genFarPointerSet
   045E 90s01rBE           1734 	mov	dptr,#_blockC
                           1735 ;	Peephole 181	changed mov to clr
   0461 E4                 1736 	clr	a
   0462 F0                 1737 	movx	@dptr,a
   0463 A3                 1738 	inc	dptr
                           1739 ;	Peephole 101	removed redundant mov
   0464 F0                 1740 	movx	@dptr,a
                           1741 ;	main.c:228: arena[0][col_number_3] = code_byte_BLOCK_3;		    //Write to the map of the glcd that there is a block in this location
                           1742 ;	genLeftShift
                           1743 ;	genLeftShiftLiteral
                           1744 ;	genlshOne
   0465 EA                 1745 	mov	a,r2
                           1746 ;	Peephole 254	optimized left shift
   0466 2A                 1747 	add	a,r2
                           1748 ;	genPlus
   0467 FA                 1749 	mov	r2,a
                           1750 ;	Peephole 177.b	removed redundant mov
   0468 24rD2              1751 	add	a,#_arena
   046A F5 82              1752 	mov	dpl,a
                           1753 ;	Peephole 181	changed mov to clr
   046C E4                 1754 	clr	a
   046D 34s01              1755 	addc	a,#(_arena >> 8)
   046F F5 83              1756 	mov	dph,a
                           1757 ;	genPointerSet
                           1758 ;     genFarPointerSet
   0471 74 DD              1759 	mov	a,#0xDD
   0473 F0                 1760 	movx	@dptr,a
   0474 A3                 1761 	inc	dptr
                           1762 ;	Peephole 181	changed mov to clr
   0475 E4                 1763 	clr	a
   0476 F0                 1764 	movx	@dptr,a
                           1765 ;	main.c:229: block3_started=1;
                           1766 ;	genAssign
   0477 90s02rD7           1767 	mov	dptr,#_main_block3_started_1_1
   047A 74 01              1768 	mov	a,#0x01
   047C F0                 1769 	movx	@dptr,a
   047D E4                 1770 	clr	a
   047E A3                 1771 	inc	dptr
   047F F0                 1772 	movx	@dptr,a
   0480                    1773 00132$:
                           1774 ;	main.c:232: res_1 = move_block();								    //Move the first block down
                           1775 ;	genCall
   0480 12s00r00           1776 	lcall	_move_block
   0483 E5 82              1777 	mov	a,dpl
   0485 85 83 F0           1778 	mov	b,dph
                           1779 ;	genAssign
   0488 90s02rD9           1780 	mov	dptr,#_main_res_1_1_1
   048B F0                 1781 	movx	@dptr,a
   048C A3                 1782 	inc	dptr
   048D E5 F0              1783 	mov	a,b
   048F F0                 1784 	movx	@dptr,a
                           1785 ;	main.c:233: res_2 = move_block_other();							    //Move the second block down
                           1786 ;	genCall
   0490 12s00r00           1787 	lcall	_move_block_other
   0493 E5 82              1788 	mov	a,dpl
   0495 85 83 F0           1789 	mov	b,dph
                           1790 ;	genAssign
   0498 90s02rDB           1791 	mov	dptr,#_main_res_2_1_1
   049B F0                 1792 	movx	@dptr,a
   049C A3                 1793 	inc	dptr
   049D E5 F0              1794 	mov	a,b
   049F F0                 1795 	movx	@dptr,a
                           1796 ;	main.c:235: if(block3_started==1)									        //Start block movement only when the block is present
                           1797 ;	genAssign
   04A0 90s02rD7           1798 	mov	dptr,#_main_block3_started_1_1
   04A3 E0                 1799 	movx	a,@dptr
   04A4 FA                 1800 	mov	r2,a
   04A5 A3                 1801 	inc	dptr
   04A6 E0                 1802 	movx	a,@dptr
   04A7 FB                 1803 	mov	r3,a
                           1804 ;	genCmpEq
                           1805 ;	gencjneshort
                           1806 ;	Peephole 112.b	changed ljmp to sjmp
                           1807 ;	Peephole 198.a	optimized misc jump sequence
   04A8 BA 01 13           1808 	cjne	r2,#0x01,00212$
   04AB BB 00 10           1809 	cjne	r3,#0x00,00212$
                           1810 ;	Peephole 200.b	removed redundant sjmp
                           1811 ;	Peephole 300	removed redundant label 00257$
                           1812 ;	Peephole 300	removed redundant label 00258$
                           1813 ;	main.c:237: res_3=move_block_other_1();						    //Move the third block down
                           1814 ;	genCall
   04AE 12s00r00           1815 	lcall	_move_block_other_1
   04B1 E5 82              1816 	mov	a,dpl
   04B3 85 83 F0           1817 	mov	b,dph
                           1818 ;	genAssign
   04B6 90s02rDD           1819 	mov	dptr,#_main_res_3_1_1
   04B9 F0                 1820 	movx	@dptr,a
   04BA A3                 1821 	inc	dptr
   04BB E5 F0              1822 	mov	a,b
   04BD F0                 1823 	movx	@dptr,a
                           1824 ;	main.c:240: for(i=0; i<16; i++) {					                //Checking if any key has been pressed
   04BE                    1825 00212$:
                           1826 ;	genAssign
   04BE 7A 00              1827 	mov	r2,#0x00
   04C0 7B 00              1828 	mov	r3,#0x00
   04C2                    1829 00137$:
                           1830 ;	genCmpLt
                           1831 ;	genCmp
   04C2 C3                 1832 	clr	c
   04C3 EA                 1833 	mov	a,r2
   04C4 94 10              1834 	subb	a,#0x10
   04C6 EB                 1835 	mov	a,r3
   04C7 64 80              1836 	xrl	a,#0x80
   04C9 94 80              1837 	subb	a,#0x80
                           1838 ;	genIfxJump
                           1839 ;	Peephole 108.a	removed ljmp by inverse jump logic
   04CB 50 30              1840 	jnc	00140$
                           1841 ;	Peephole 300	removed redundant label 00259$
                           1842 ;	main.c:241: dirChanged = refreshCarDir();
                           1843 ;	genCall
   04CD C0 02              1844 	push	ar2
   04CF C0 03              1845 	push	ar3
   04D1 12s00r00           1846 	lcall	_refreshCarDir
   04D4 AC 82              1847 	mov	r4,dpl
   04D6 AD 83              1848 	mov	r5,dph
   04D8 D0 03              1849 	pop	ar3
   04DA D0 02              1850 	pop	ar2
                           1851 ;	main.c:242: delay(20);
                           1852 ;	genCall
                           1853 ;	Peephole 182.b	used 16 bit load of dptr
   04DC 90 00 14           1854 	mov	dptr,#0x0014
   04DF C0 02              1855 	push	ar2
   04E1 C0 03              1856 	push	ar3
   04E3 C0 04              1857 	push	ar4
   04E5 C0 05              1858 	push	ar5
   04E7 12s00r00           1859 	lcall	_delay
   04EA D0 05              1860 	pop	ar5
   04EC D0 04              1861 	pop	ar4
   04EE D0 03              1862 	pop	ar3
   04F0 D0 02              1863 	pop	ar2
                           1864 ;	main.c:243: if(dirChanged)
                           1865 ;	genIfx
   04F2 EC                 1866 	mov	a,r4
   04F3 4D                 1867 	orl	a,r5
                           1868 ;	genIfxJump
                           1869 ;	Peephole 108.b	removed ljmp by inverse jump logic
   04F4 70 07              1870 	jnz	00140$
                           1871 ;	Peephole 300	removed redundant label 00260$
                           1872 ;	main.c:240: for(i=0; i<16; i++) {					                //Checking if any key has been pressed
                           1873 ;	genPlus
                           1874 ;     genPlusIncr
                           1875 ;	tail increment optimized (range 7)
   04F6 0A                 1876 	inc	r2
   04F7 BA 00 C8           1877 	cjne	r2,#0x00,00137$
   04FA 0B                 1878 	inc	r3
                           1879 ;	Peephole 112.b	changed ljmp to sjmp
   04FB 80 C5              1880 	sjmp	00137$
   04FD                    1881 00140$:
                           1882 ;	main.c:246: if(res_1==-2) {							            //Condition of reaching the end of the glcd
                           1883 ;	genAssign
   04FD 90s02rD9           1884 	mov	dptr,#_main_res_1_1_1
   0500 E0                 1885 	movx	a,@dptr
   0501 FA                 1886 	mov	r2,a
   0502 A3                 1887 	inc	dptr
   0503 E0                 1888 	movx	a,@dptr
   0504 FB                 1889 	mov	r3,a
                           1890 ;	genCmpEq
                           1891 ;	gencjneshort
                           1892 ;	Peephole 112.b	changed ljmp to sjmp
                           1893 ;	Peephole 198.a	optimized misc jump sequence
   0505 BA FE 1D           1894 	cjne	r2,#0xFE,00142$
   0508 BB FF 1A           1895 	cjne	r3,#0xFF,00142$
                           1896 ;	Peephole 200.b	removed redundant sjmp
                           1897 ;	Peephole 300	removed redundant label 00261$
                           1898 ;	Peephole 300	removed redundant label 00262$
                           1899 ;	main.c:247: res_1=0;
                           1900 ;	genAssign
   050B 90s02rD9           1901 	mov	dptr,#_main_res_1_1_1
   050E E4                 1902 	clr	a
   050F F0                 1903 	movx	@dptr,a
   0510 A3                 1904 	inc	dptr
   0511 F0                 1905 	movx	@dptr,a
                           1906 ;	main.c:248: score2++;										//Increment score by 2 as 2 obstacles aavoided
                           1907 ;	genAssign
   0512 90s02rE1           1908 	mov	dptr,#_main_score2_1_1
   0515 E0                 1909 	movx	a,@dptr
   0516 FA                 1910 	mov	r2,a
   0517 A3                 1911 	inc	dptr
   0518 E0                 1912 	movx	a,@dptr
   0519 FB                 1913 	mov	r3,a
                           1914 ;	genPlus
   051A 90s02rE1           1915 	mov	dptr,#_main_score2_1_1
                           1916 ;     genPlusIncr
   051D 74 01              1917 	mov	a,#0x01
                           1918 ;	Peephole 236.a	used r2 instead of ar2
   051F 2A                 1919 	add	a,r2
   0520 F0                 1920 	movx	@dptr,a
                           1921 ;	Peephole 181	changed mov to clr
   0521 E4                 1922 	clr	a
                           1923 ;	Peephole 236.b	used r3 instead of ar3
   0522 3B                 1924 	addc	a,r3
   0523 A3                 1925 	inc	dptr
   0524 F0                 1926 	movx	@dptr,a
   0525                    1927 00142$:
                           1928 ;	main.c:250: if(res_2==-2) {
                           1929 ;	genAssign
   0525 90s02rDB           1930 	mov	dptr,#_main_res_2_1_1
   0528 E0                 1931 	movx	a,@dptr
   0529 FA                 1932 	mov	r2,a
   052A A3                 1933 	inc	dptr
   052B E0                 1934 	movx	a,@dptr
   052C FB                 1935 	mov	r3,a
                           1936 ;	genCmpEq
                           1937 ;	gencjneshort
                           1938 ;	Peephole 112.b	changed ljmp to sjmp
                           1939 ;	Peephole 198.a	optimized misc jump sequence
   052D BA FE 20           1940 	cjne	r2,#0xFE,00144$
   0530 BB FF 1D           1941 	cjne	r3,#0xFF,00144$
                           1942 ;	Peephole 200.b	removed redundant sjmp
                           1943 ;	Peephole 300	removed redundant label 00263$
                           1944 ;	Peephole 300	removed redundant label 00264$
                           1945 ;	main.c:251: res_2=0;                                            //Condition of reaching the end of the glcd
                           1946 ;	genAssign
   0533 90s02rDB           1947 	mov	dptr,#_main_res_2_1_1
   0536 E4                 1948 	clr	a
   0537 F0                 1949 	movx	@dptr,a
   0538 A3                 1950 	inc	dptr
   0539 F0                 1951 	movx	@dptr,a
                           1952 ;	main.c:252: score2++;
                           1953 ;	genAssign
   053A 90s02rE1           1954 	mov	dptr,#_main_score2_1_1
   053D E0                 1955 	movx	a,@dptr
   053E FA                 1956 	mov	r2,a
   053F A3                 1957 	inc	dptr
   0540 E0                 1958 	movx	a,@dptr
   0541 FB                 1959 	mov	r3,a
                           1960 ;	genPlus
   0542 90s02rE1           1961 	mov	dptr,#_main_score2_1_1
                           1962 ;     genPlusIncr
   0545 74 01              1963 	mov	a,#0x01
                           1964 ;	Peephole 236.a	used r2 instead of ar2
   0547 2A                 1965 	add	a,r2
   0548 F0                 1966 	movx	@dptr,a
                           1967 ;	Peephole 181	changed mov to clr
   0549 E4                 1968 	clr	a
                           1969 ;	Peephole 236.b	used r3 instead of ar3
   054A 3B                 1970 	addc	a,r3
   054B A3                 1971 	inc	dptr
   054C F0                 1972 	movx	@dptr,a
                           1973 ;	main.c:253: break;
   054D 02s05rDA           1974 	ljmp	00153$
   0550                    1975 00144$:
                           1976 ;	main.c:255: if(res_3==-2) {
                           1977 ;	genAssign
   0550 90s02rDD           1978 	mov	dptr,#_main_res_3_1_1
   0553 E0                 1979 	movx	a,@dptr
   0554 FA                 1980 	mov	r2,a
   0555 A3                 1981 	inc	dptr
   0556 E0                 1982 	movx	a,@dptr
   0557 FB                 1983 	mov	r3,a
                           1984 ;	genCmpEq
                           1985 ;	gencjneshort
                           1986 ;	Peephole 112.b	changed ljmp to sjmp
                           1987 ;	Peephole 198.a	optimized misc jump sequence
   0558 BA FE 24           1988 	cjne	r2,#0xFE,00146$
   055B BB FF 21           1989 	cjne	r3,#0xFF,00146$
                           1990 ;	Peephole 200.b	removed redundant sjmp
                           1991 ;	Peephole 300	removed redundant label 00265$
                           1992 ;	Peephole 300	removed redundant label 00266$
                           1993 ;	main.c:256: res_3=0;                                            //Condition of reaching the end of the glcd
                           1994 ;	genAssign
   055E 90s02rDD           1995 	mov	dptr,#_main_res_3_1_1
   0561 E4                 1996 	clr	a
   0562 F0                 1997 	movx	@dptr,a
   0563 A3                 1998 	inc	dptr
   0564 F0                 1999 	movx	@dptr,a
                           2000 ;	main.c:257: score2++;
                           2001 ;	genAssign
   0565 90s02rE1           2002 	mov	dptr,#_main_score2_1_1
   0568 E0                 2003 	movx	a,@dptr
   0569 FA                 2004 	mov	r2,a
   056A A3                 2005 	inc	dptr
   056B E0                 2006 	movx	a,@dptr
   056C FB                 2007 	mov	r3,a
                           2008 ;	genPlus
   056D 90s02rE1           2009 	mov	dptr,#_main_score2_1_1
                           2010 ;     genPlusIncr
   0570 74 01              2011 	mov	a,#0x01
                           2012 ;	Peephole 236.a	used r2 instead of ar2
   0572 2A                 2013 	add	a,r2
   0573 F0                 2014 	movx	@dptr,a
                           2015 ;	Peephole 181	changed mov to clr
   0574 E4                 2016 	clr	a
                           2017 ;	Peephole 236.b	used r3 instead of ar3
   0575 3B                 2018 	addc	a,r3
   0576 A3                 2019 	inc	dptr
   0577 F0                 2020 	movx	@dptr,a
                           2021 ;	main.c:258: block3_started=0;
                           2022 ;	genAssign
   0578 90s02rD7           2023 	mov	dptr,#_main_block3_started_1_1
   057B E4                 2024 	clr	a
   057C F0                 2025 	movx	@dptr,a
   057D A3                 2026 	inc	dptr
   057E F0                 2027 	movx	@dptr,a
   057F                    2028 00146$:
                           2029 ;	main.c:260: if(res_1==-3 ||res_2==-3 || res_3==-3) {                //Game over
                           2030 ;	genAssign
   057F 90s02rD9           2031 	mov	dptr,#_main_res_1_1_1
   0582 E0                 2032 	movx	a,@dptr
   0583 FA                 2033 	mov	r2,a
   0584 A3                 2034 	inc	dptr
   0585 E0                 2035 	movx	a,@dptr
   0586 FB                 2036 	mov	r3,a
                           2037 ;	genCmpEq
                           2038 ;	gencjneshort
   0587 BA FD 05           2039 	cjne	r2,#0xFD,00267$
   058A BB FF 02           2040 	cjne	r3,#0xFF,00267$
                           2041 ;	Peephole 112.b	changed ljmp to sjmp
   058D 80 1E              2042 	sjmp	00147$
   058F                    2043 00267$:
                           2044 ;	genAssign
   058F 90s02rDB           2045 	mov	dptr,#_main_res_2_1_1
   0592 E0                 2046 	movx	a,@dptr
   0593 FA                 2047 	mov	r2,a
   0594 A3                 2048 	inc	dptr
   0595 E0                 2049 	movx	a,@dptr
   0596 FB                 2050 	mov	r3,a
                           2051 ;	genCmpEq
                           2052 ;	gencjneshort
   0597 BA FD 05           2053 	cjne	r2,#0xFD,00268$
   059A BB FF 02           2054 	cjne	r3,#0xFF,00268$
                           2055 ;	Peephole 112.b	changed ljmp to sjmp
   059D 80 0E              2056 	sjmp	00147$
   059F                    2057 00268$:
                           2058 ;	genAssign
   059F 90s02rDD           2059 	mov	dptr,#_main_res_3_1_1
   05A2 E0                 2060 	movx	a,@dptr
   05A3 FA                 2061 	mov	r2,a
   05A4 A3                 2062 	inc	dptr
   05A5 E0                 2063 	movx	a,@dptr
   05A6 FB                 2064 	mov	r3,a
                           2065 ;	genCmpEq
                           2066 ;	gencjneshort
                           2067 ;	Peephole 112.b	changed ljmp to sjmp
                           2068 ;	Peephole 198.a	optimized misc jump sequence
   05A7 BA FD 2A           2069 	cjne	r2,#0xFD,00148$
   05AA BB FF 27           2070 	cjne	r3,#0xFF,00148$
                           2071 ;	Peephole 200.b	removed redundant sjmp
                           2072 ;	Peephole 300	removed redundant label 00269$
                           2073 ;	Peephole 300	removed redundant label 00270$
   05AD                    2074 00147$:
                           2075 ;	main.c:261: lcd_init();											//Clear the screen
                           2076 ;	genCall
   05AD 12s00r00           2077 	lcall	_lcd_init
                           2078 ;	main.c:262: lcd_put_str();										//Display GAME OVER message on screen
                           2079 ;	genCall
   05B0 12s00r00           2080 	lcall	_lcd_put_str
                           2081 ;	main.c:263: lcd_put_score(score2);								//Print the value of score
                           2082 ;	genAssign
   05B3 90s02rE1           2083 	mov	dptr,#_main_score2_1_1
   05B6 E0                 2084 	movx	a,@dptr
   05B7 FA                 2085 	mov	r2,a
   05B8 A3                 2086 	inc	dptr
   05B9 E0                 2087 	movx	a,@dptr
   05BA FB                 2088 	mov	r3,a
                           2089 ;	genCall
   05BB 8A 82              2090 	mov	dpl,r2
   05BD 8B 83              2091 	mov	dph,r3
   05BF 12s00r00           2092 	lcall	_lcd_put_score
                           2093 ;	main.c:264: score2=0;											//reinitialize score to 0 for next game
                           2094 ;	genAssign
   05C2 90s02rE1           2095 	mov	dptr,#_main_score2_1_1
   05C5 E4                 2096 	clr	a
   05C6 F0                 2097 	movx	@dptr,a
   05C7 A3                 2098 	inc	dptr
   05C8 F0                 2099 	movx	@dptr,a
                           2100 ;	main.c:265: delay(1000000000);
                           2101 ;	genCall
                           2102 ;	Peephole 182.b	used 16 bit load of dptr
   05C9 90 CA 00           2103 	mov	dptr,#0xCA00
   05CC 12s00r00           2104 	lcall	_delay
                           2105 ;	main.c:266: lcd_init();											//Clear LCD
                           2106 ;	genCall
   05CF 12s00r00           2107 	lcall	_lcd_init
                           2108 ;	main.c:267: break;
                           2109 ;	Peephole 112.b	changed ljmp to sjmp
   05D2 80 06              2110 	sjmp	00153$
   05D4                    2111 00148$:
                           2112 ;	main.c:269: glcdUpdate1();
                           2113 ;	genCall
   05D4 12s00r00           2114 	lcall	_glcdUpdate1
   05D7 02s03rE2           2115 	ljmp	00206$
   05DA                    2116 00153$:
                           2117 ;	main.c:273: if(res_1==-3 || res_2==-3 || res_3==-3)                      //Game over
                           2118 ;	genAssign
   05DA 90s02rD9           2119 	mov	dptr,#_main_res_1_1_1
   05DD E0                 2120 	movx	a,@dptr
   05DE FA                 2121 	mov	r2,a
   05DF A3                 2122 	inc	dptr
   05E0 E0                 2123 	movx	a,@dptr
   05E1 FB                 2124 	mov	r3,a
                           2125 ;	genCmpEq
                           2126 ;	gencjneshort
   05E2 BA FD 06           2127 	cjne	r2,#0xFD,00271$
   05E5 BB FF 03           2128 	cjne	r3,#0xFF,00271$
   05E8 02s00r49           2129 	ljmp	00185$
   05EB                    2130 00271$:
                           2131 ;	genAssign
   05EB 90s02rDB           2132 	mov	dptr,#_main_res_2_1_1
   05EE E0                 2133 	movx	a,@dptr
   05EF FA                 2134 	mov	r2,a
   05F0 A3                 2135 	inc	dptr
   05F1 E0                 2136 	movx	a,@dptr
   05F2 FB                 2137 	mov	r3,a
                           2138 ;	genCmpEq
                           2139 ;	gencjneshort
   05F3 BA FD 06           2140 	cjne	r2,#0xFD,00272$
   05F6 BB FF 03           2141 	cjne	r3,#0xFF,00272$
   05F9 02s00r49           2142 	ljmp	00185$
   05FC                    2143 00272$:
                           2144 ;	genAssign
   05FC 90s02rDD           2145 	mov	dptr,#_main_res_3_1_1
   05FF E0                 2146 	movx	a,@dptr
   0600 FA                 2147 	mov	r2,a
   0601 A3                 2148 	inc	dptr
   0602 E0                 2149 	movx	a,@dptr
   0603 FB                 2150 	mov	r3,a
                           2151 ;	genCmpEq
                           2152 ;	gencjneshort
   0604 BA FD 05           2153 	cjne	r2,#0xFD,00273$
   0607 BB FF 02           2154 	cjne	r3,#0xFF,00273$
   060A 80 03              2155 	sjmp	00274$
   060C                    2156 00273$:
   060C 02s03r8B           2157 	ljmp	00159$
   060F                    2158 00274$:
                           2159 ;	main.c:274: break;										            //break out of Racing while loop
   060F 02s00r49           2160 	ljmp	00185$
                           2161 ;	Peephole 259.b	removed redundant label 00182$ and ret
                           2162 ;
                           2163 	.area CSEG    (CODE)
                           2164 	.area CONST   (CODE)
   0000                    2165 _RACING_BITMAP:
   0000 3C 00              2166 	.byte #0x3C,#0x00
   0002 42 00              2167 	.byte #0x42,#0x00
   0004 42 00              2168 	.byte #0x42,#0x00
   0006 3C 00              2169 	.byte #0x3C,#0x00
   0008 3C 00              2170 	.byte #0x3C,#0x00
   000A 24 00              2171 	.byte #0x24,#0x00
   000C 42 00              2172 	.byte #0x42,#0x00
   000E 7E 00              2173 	.byte #0x7E,#0x00
   0010 3C 00              2174 	.byte #0x3C,#0x00
   0012 42 00              2175 	.byte #0x42,#0x00
   0014 42 00              2176 	.byte #0x42,#0x00
   0016 3C 00              2177 	.byte #0x3C,#0x00
   0018 3C 00              2178 	.byte #0x3C,#0x00
   001A 24 00              2179 	.byte #0x24,#0x00
   001C 42 00              2180 	.byte #0x42,#0x00
   001E 7E 00              2181 	.byte #0x7E,#0x00
   0020 F0 00              2182 	.byte #0xF0,#0x00
   0022 F0 00              2183 	.byte #0xF0,#0x00
   0024 F0 00              2184 	.byte #0xF0,#0x00
   0026 F0 00              2185 	.byte #0xF0,#0x00
   0028 00 00              2186 	.byte #0x00,#0x00
   002A 00 00              2187 	.byte #0x00,#0x00
   002C 00 00              2188 	.byte #0x00,#0x00
   002E 00 00              2189 	.byte #0x00,#0x00
   0030 00 00              2190 	.byte #0x00,#0x00
   0032 00 00              2191 	.byte #0x00,#0x00
   0034 00 00              2192 	.byte #0x00,#0x00
   0036 00 00              2193 	.byte #0x00,#0x00
   0038 F0 00              2194 	.byte #0xF0,#0x00
   003A F0 00              2195 	.byte #0xF0,#0x00
   003C F0 00              2196 	.byte #0xF0,#0x00
   003E F0 00              2197 	.byte #0xF0,#0x00
   0040 FF 00              2198 	.byte #0xFF,#0x00
   0042 FF 00              2199 	.byte #0xFF,#0x00
   0044 FF 00              2200 	.byte #0xFF,#0x00
   0046 FF 00              2201 	.byte #0xFF,#0x00
   0048 FF 00              2202 	.byte #0xFF,#0x00
   004A FF 00              2203 	.byte #0xFF,#0x00
   004C FF 00              2204 	.byte #0xFF,#0x00
   004E FF 00              2205 	.byte #0xFF,#0x00
   0050                    2206 _BITMAP:
   0050 3C 00              2207 	.byte #0x3C,#0x00
   0052 24 00              2208 	.byte #0x24,#0x00
   0054 FF 00              2209 	.byte #0xFF,#0x00
   0056 A5 00              2210 	.byte #0xA5,#0x00
   0058 FF 00              2211 	.byte #0xFF,#0x00
   005A 24 00              2212 	.byte #0x24,#0x00
   005C 3C 00              2213 	.byte #0x3C,#0x00
   005E 00 00              2214 	.byte #0x00,#0x00
   0060 00 00              2215 	.byte #0x00,#0x00
   0062 00 00              2216 	.byte #0x00,#0x00
   0064 EE 00              2217 	.byte #0xEE,#0x00
   0066 EE 00              2218 	.byte #0xEE,#0x00
   0068 77 00              2219 	.byte #0x77,#0x00
   006A 77 00              2220 	.byte #0x77,#0x00
   006C 00 00              2221 	.byte #0x00,#0x00
   006E 00 00              2222 	.byte #0x00,#0x00
   0070 0C 00              2223 	.byte #0x0C,#0x00
   0072 3C 00              2224 	.byte #0x3C,#0x00
   0074 3C 00              2225 	.byte #0x3C,#0x00
   0076 30 00              2226 	.byte #0x30,#0x00
   0078 0C 00              2227 	.byte #0x0C,#0x00
   007A 3C 00              2228 	.byte #0x3C,#0x00
   007C 3C 00              2229 	.byte #0x3C,#0x00
   007E 30 00              2230 	.byte #0x30,#0x00
   0080 0C 00              2231 	.byte #0x0C,#0x00
   0082 3C 00              2232 	.byte #0x3C,#0x00
   0084 FC 00              2233 	.byte #0xFC,#0x00
   0086 E8 00              2234 	.byte #0xE8,#0x00
   0088 78 00              2235 	.byte #0x78,#0x00
   008A 60 00              2236 	.byte #0x60,#0x00
   008C 00 00              2237 	.byte #0x00,#0x00
   008E 00 00              2238 	.byte #0x00,#0x00
   0090 0C 00              2239 	.byte #0x0C,#0x00
   0092 3C 00              2240 	.byte #0x3C,#0x00
   0094 3E 00              2241 	.byte #0x3E,#0x00
   0096 16 00              2242 	.byte #0x16,#0x00
   0098 1F 00              2243 	.byte #0x1F,#0x00
   009A 07 00              2244 	.byte #0x07,#0x00
   009C 00 00              2245 	.byte #0x00,#0x00
   009E 00 00              2246 	.byte #0x00,#0x00
   00A0 00 00              2247 	.byte #0x00,#0x00
   00A2 00 00              2248 	.byte #0x00,#0x00
   00A4 06 00              2249 	.byte #0x06,#0x00
   00A6 1E 00              2250 	.byte #0x1E,#0x00
   00A8 17 00              2251 	.byte #0x17,#0x00
   00AA 3F 00              2252 	.byte #0x3F,#0x00
   00AC 3C 00              2253 	.byte #0x3C,#0x00
   00AE 30 00              2254 	.byte #0x30,#0x00
   00B0 00 00              2255 	.byte #0x00,#0x00
   00B2 00 00              2256 	.byte #0x00,#0x00
   00B4 E0 00              2257 	.byte #0xE0,#0x00
   00B6 F8 00              2258 	.byte #0xF8,#0x00
   00B8 68 00              2259 	.byte #0x68,#0x00
   00BA 7C 00              2260 	.byte #0x7C,#0x00
   00BC 3C 00              2261 	.byte #0x3C,#0x00
   00BE 30 00              2262 	.byte #0x30,#0x00
   00C0 00 00              2263 	.byte #0x00,#0x00
   00C2 70 00              2264 	.byte #0x70,#0x00
   00C4 9E 00              2265 	.byte #0x9E,#0x00
   00C6 FE 00              2266 	.byte #0xFE,#0x00
   00C8 FF 00              2267 	.byte #0xFF,#0x00
   00CA 9F 00              2268 	.byte #0x9F,#0x00
   00CC 70 00              2269 	.byte #0x70,#0x00
   00CE 00 00              2270 	.byte #0x00,#0x00
   00D0 3C 00              2271 	.byte #0x3C,#0x00
   00D2 5A 00              2272 	.byte #0x5A,#0x00
   00D4 5A 00              2273 	.byte #0x5A,#0x00
   00D6 7E 00              2274 	.byte #0x7E,#0x00
   00D8 3C 00              2275 	.byte #0x3C,#0x00
   00DA 3C 00              2276 	.byte #0x3C,#0x00
   00DC 3C 00              2277 	.byte #0x3C,#0x00
   00DE 30 00              2278 	.byte #0x30,#0x00
   00E0 00 00              2279 	.byte #0x00,#0x00
   00E2 0E 00              2280 	.byte #0x0E,#0x00
   00E4 F9 00              2281 	.byte #0xF9,#0x00
   00E6 FF 00              2282 	.byte #0xFF,#0x00
   00E8 7F 00              2283 	.byte #0x7F,#0x00
   00EA 79 00              2284 	.byte #0x79,#0x00
   00EC 0E 00              2285 	.byte #0x0E,#0x00
   00EE 00 00              2286 	.byte #0x00,#0x00
   00F0 0C 00              2287 	.byte #0x0C,#0x00
   00F2 3C 00              2288 	.byte #0x3C,#0x00
   00F4 3C 00              2289 	.byte #0x3C,#0x00
   00F6 3C 00              2290 	.byte #0x3C,#0x00
   00F8 7E 00              2291 	.byte #0x7E,#0x00
   00FA 5A 00              2292 	.byte #0x5A,#0x00
   00FC 5A 00              2293 	.byte #0x5A,#0x00
   00FE 3C 00              2294 	.byte #0x3C,#0x00
   0100 00 00              2295 	.byte #0x00,#0x00
   0102 00 00              2296 	.byte #0x00,#0x00
   0104 2E 00              2297 	.byte #0x2E,#0x00
   0106 EE 00              2298 	.byte #0xEE,#0x00
   0108 F7 00              2299 	.byte #0xF7,#0x00
   010A 37 00              2300 	.byte #0x37,#0x00
   010C 00 00              2301 	.byte #0x00,#0x00
   010E 00 00              2302 	.byte #0x00,#0x00
   0110 18 00              2303 	.byte #0x18,#0x00
   0112 18 00              2304 	.byte #0x18,#0x00
   0114 3C 00              2305 	.byte #0x3C,#0x00
   0116 30 00              2306 	.byte #0x30,#0x00
   0118 0C 00              2307 	.byte #0x0C,#0x00
   011A 3C 00              2308 	.byte #0x3C,#0x00
   011C 3C 00              2309 	.byte #0x3C,#0x00
   011E 30 00              2310 	.byte #0x30,#0x00
   0120 00 00              2311 	.byte #0x00,#0x00
   0122 00 00              2312 	.byte #0x00,#0x00
   0124 EC 00              2313 	.byte #0xEC,#0x00
   0126 EF 00              2314 	.byte #0xEF,#0x00
   0128 77 00              2315 	.byte #0x77,#0x00
   012A 74 00              2316 	.byte #0x74,#0x00
   012C 00 00              2317 	.byte #0x00,#0x00
   012E 00 00              2318 	.byte #0x00,#0x00
   0130 0C 00              2319 	.byte #0x0C,#0x00
   0132 3C 00              2320 	.byte #0x3C,#0x00
   0134 3C 00              2321 	.byte #0x3C,#0x00
   0136 30 00              2322 	.byte #0x30,#0x00
   0138 0C 00              2323 	.byte #0x0C,#0x00
   013A 3C 00              2324 	.byte #0x3C,#0x00
   013C 18 00              2325 	.byte #0x18,#0x00
   013E 18 00              2326 	.byte #0x18,#0x00
   0140                    2327 _SCORE:
   0140 FF 00              2328 	.byte #0xFF,#0x00
   0142 81 00              2329 	.byte #0x81,#0x00
   0144 81 00              2330 	.byte #0x81,#0x00
   0146 FF 00              2331 	.byte #0xFF,#0x00
   0148 00 00              2332 	.byte #0x00,#0x00
   014A FF 00              2333 	.byte #0xFF,#0x00
   014C FF 00              2334 	.byte #0xFF,#0x00
   014E 00 00              2335 	.byte #0x00,#0x00
   0150 F1 00              2336 	.byte #0xF1,#0x00
   0152 91 00              2337 	.byte #0x91,#0x00
   0154 91 00              2338 	.byte #0x91,#0x00
   0156 8F 00              2339 	.byte #0x8F,#0x00
   0158 91 00              2340 	.byte #0x91,#0x00
   015A 91 00              2341 	.byte #0x91,#0x00
   015C 91 00              2342 	.byte #0x91,#0x00
   015E FF 00              2343 	.byte #0xFF,#0x00
   0160 0F 00              2344 	.byte #0x0F,#0x00
   0162 08 00              2345 	.byte #0x08,#0x00
   0164 08 00              2346 	.byte #0x08,#0x00
   0166 FF 00              2347 	.byte #0xFF,#0x00
   0168 8F 00              2348 	.byte #0x8F,#0x00
   016A 91 00              2349 	.byte #0x91,#0x00
   016C 91 00              2350 	.byte #0x91,#0x00
   016E F1 00              2351 	.byte #0xF1,#0x00
   0170 FF 00              2352 	.byte #0xFF,#0x00
   0172 99 00              2353 	.byte #0x99,#0x00
   0174 99 00              2354 	.byte #0x99,#0x00
   0176 F9 00              2355 	.byte #0xF9,#0x00
   0178 11 00              2356 	.byte #0x11,#0x00
   017A 11 00              2357 	.byte #0x11,#0x00
   017C 11 00              2358 	.byte #0x11,#0x00
   017E FF 00              2359 	.byte #0xFF,#0x00
   0180 FF 00              2360 	.byte #0xFF,#0x00
   0182 99 00              2361 	.byte #0x99,#0x00
   0184 99 00              2362 	.byte #0x99,#0x00
   0186 FF 00              2363 	.byte #0xFF,#0x00
   0188 1F 00              2364 	.byte #0x1F,#0x00
   018A 91 00              2365 	.byte #0x91,#0x00
   018C 91 00              2366 	.byte #0x91,#0x00
   018E FF 00              2367 	.byte #0xFF,#0x00
                           2368 	.area XINIT   (CODE)
