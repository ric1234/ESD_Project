                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : FreeWare ANSI-C Compiler
                              3 ; Version 2.6.0 #4309 (Jul 28 2006)
                              4 ; This file generated Wed Nov 23 14:07:50 2016
                              5 ;--------------------------------------------------------
                              6 	.module main
                              7 	.optsdcc -mmcs51 --model-large
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _block
                             13 	.globl _main
                             14 	.globl _lcd_init
                             15 	.globl _lcddata_b
                             16 	.globl _lcdcmd
                             17 	.globl _lcd_port
                             18 	.globl _delay
                             19 	.globl _TF1
                             20 	.globl _TR1
                             21 	.globl _TF0
                             22 	.globl _TR0
                             23 	.globl _IE1
                             24 	.globl _IT1
                             25 	.globl _IE0
                             26 	.globl _IT0
                             27 	.globl _SM0
                             28 	.globl _SM1
                             29 	.globl _SM2
                             30 	.globl _REN
                             31 	.globl _TB8
                             32 	.globl _RB8
                             33 	.globl _TI
                             34 	.globl _RI
                             35 	.globl _CY
                             36 	.globl _AC
                             37 	.globl _F0
                             38 	.globl _RS1
                             39 	.globl _RS0
                             40 	.globl _OV
                             41 	.globl _F1
                             42 	.globl _P
                             43 	.globl _RD
                             44 	.globl _WR
                             45 	.globl _T1
                             46 	.globl _T0
                             47 	.globl _INT1
                             48 	.globl _INT0
                             49 	.globl _TXD0
                             50 	.globl _TXD
                             51 	.globl _RXD0
                             52 	.globl _RXD
                             53 	.globl _P3_7
                             54 	.globl _P3_6
                             55 	.globl _P3_5
                             56 	.globl _P3_4
                             57 	.globl _P3_3
                             58 	.globl _P3_2
                             59 	.globl _P3_1
                             60 	.globl _P3_0
                             61 	.globl _P2_7
                             62 	.globl _P2_6
                             63 	.globl _P2_5
                             64 	.globl _P2_4
                             65 	.globl _P2_3
                             66 	.globl _P2_2
                             67 	.globl _P2_1
                             68 	.globl _P2_0
                             69 	.globl _P1_7
                             70 	.globl _P1_6
                             71 	.globl _P1_5
                             72 	.globl _P1_4
                             73 	.globl _P1_3
                             74 	.globl _P1_2
                             75 	.globl _P1_1
                             76 	.globl _P1_0
                             77 	.globl _P0_7
                             78 	.globl _P0_6
                             79 	.globl _P0_5
                             80 	.globl _P0_4
                             81 	.globl _P0_3
                             82 	.globl _P0_2
                             83 	.globl _P0_1
                             84 	.globl _P0_0
                             85 	.globl _PS
                             86 	.globl _PT1
                             87 	.globl _PX1
                             88 	.globl _PT0
                             89 	.globl _PX0
                             90 	.globl _EA
                             91 	.globl _ES
                             92 	.globl _ET1
                             93 	.globl _EX1
                             94 	.globl _ET0
                             95 	.globl _EX0
                             96 	.globl _BREG_F7
                             97 	.globl _BREG_F6
                             98 	.globl _BREG_F5
                             99 	.globl _BREG_F4
                            100 	.globl _BREG_F3
                            101 	.globl _BREG_F2
                            102 	.globl _BREG_F1
                            103 	.globl _BREG_F0
                            104 	.globl _P5_7
                            105 	.globl _P5_6
                            106 	.globl _P5_5
                            107 	.globl _P5_4
                            108 	.globl _P5_3
                            109 	.globl _P5_2
                            110 	.globl _P5_1
                            111 	.globl _P5_0
                            112 	.globl _P4_7
                            113 	.globl _P4_6
                            114 	.globl _P4_5
                            115 	.globl _P4_4
                            116 	.globl _P4_3
                            117 	.globl _P4_2
                            118 	.globl _P4_1
                            119 	.globl _P4_0
                            120 	.globl _PX0L
                            121 	.globl _PT0L
                            122 	.globl _PX1L
                            123 	.globl _PT1L
                            124 	.globl _PLS
                            125 	.globl _PT2L
                            126 	.globl _PPCL
                            127 	.globl _EC
                            128 	.globl _CCF0
                            129 	.globl _CCF1
                            130 	.globl _CCF2
                            131 	.globl _CCF3
                            132 	.globl _CCF4
                            133 	.globl _CR
                            134 	.globl _CF
                            135 	.globl _TF2
                            136 	.globl _EXF2
                            137 	.globl _RCLK
                            138 	.globl _TCLK
                            139 	.globl _EXEN2
                            140 	.globl _TR2
                            141 	.globl _C_T2
                            142 	.globl _CP_RL2
                            143 	.globl _T2CON_7
                            144 	.globl _T2CON_6
                            145 	.globl _T2CON_5
                            146 	.globl _T2CON_4
                            147 	.globl _T2CON_3
                            148 	.globl _T2CON_2
                            149 	.globl _T2CON_1
                            150 	.globl _T2CON_0
                            151 	.globl _PT2
                            152 	.globl _ET2
                            153 	.globl _TMOD
                            154 	.globl _TL1
                            155 	.globl _TL0
                            156 	.globl _TH1
                            157 	.globl _TH0
                            158 	.globl _TCON
                            159 	.globl _SP
                            160 	.globl _SCON
                            161 	.globl _SBUF0
                            162 	.globl _SBUF
                            163 	.globl _PSW
                            164 	.globl _PCON
                            165 	.globl _P3
                            166 	.globl _P2
                            167 	.globl _P1
                            168 	.globl _P0
                            169 	.globl _IP
                            170 	.globl _IE
                            171 	.globl _DP0L
                            172 	.globl _DPL
                            173 	.globl _DP0H
                            174 	.globl _DPH
                            175 	.globl _B
                            176 	.globl _ACC
                            177 	.globl _EECON
                            178 	.globl _KBF
                            179 	.globl _KBE
                            180 	.globl _KBLS
                            181 	.globl _BRL
                            182 	.globl _BDRCON
                            183 	.globl _T2MOD
                            184 	.globl _SPDAT
                            185 	.globl _SPSTA
                            186 	.globl _SPCON
                            187 	.globl _SADEN
                            188 	.globl _SADDR
                            189 	.globl _WDTPRG
                            190 	.globl _WDTRST
                            191 	.globl _P5
                            192 	.globl _P4
                            193 	.globl _IPH1
                            194 	.globl _IPL1
                            195 	.globl _IPH0
                            196 	.globl _IPL0
                            197 	.globl _IEN1
                            198 	.globl _IEN0
                            199 	.globl _CMOD
                            200 	.globl _CL
                            201 	.globl _CH
                            202 	.globl _CCON
                            203 	.globl _CCAPM4
                            204 	.globl _CCAPM3
                            205 	.globl _CCAPM2
                            206 	.globl _CCAPM1
                            207 	.globl _CCAPM0
                            208 	.globl _CCAP4L
                            209 	.globl _CCAP3L
                            210 	.globl _CCAP2L
                            211 	.globl _CCAP1L
                            212 	.globl _CCAP0L
                            213 	.globl _CCAP4H
                            214 	.globl _CCAP3H
                            215 	.globl _CCAP2H
                            216 	.globl _CCAP1H
                            217 	.globl _CCAP0H
                            218 	.globl _CKCKON1
                            219 	.globl _CKCKON0
                            220 	.globl _CKRL
                            221 	.globl _AUXR1
                            222 	.globl _AUXR
                            223 	.globl _TH2
                            224 	.globl _TL2
                            225 	.globl _RCAP2H
                            226 	.globl _RCAP2L
                            227 	.globl _T2CON
                            228 	.globl _fixed_blocks
                            229 	.globl _add_y
                            230 	.globl _add_x
                            231 ;--------------------------------------------------------
                            232 ; special function registers
                            233 ;--------------------------------------------------------
                            234 	.area RSEG    (DATA)
                    00C8    235 _T2CON	=	0x00c8
                    00CA    236 _RCAP2L	=	0x00ca
                    00CB    237 _RCAP2H	=	0x00cb
                    00CC    238 _TL2	=	0x00cc
                    00CD    239 _TH2	=	0x00cd
                    008E    240 _AUXR	=	0x008e
                    00A2    241 _AUXR1	=	0x00a2
                    0097    242 _CKRL	=	0x0097
                    008F    243 _CKCKON0	=	0x008f
                    008F    244 _CKCKON1	=	0x008f
                    00FA    245 _CCAP0H	=	0x00fa
                    00FB    246 _CCAP1H	=	0x00fb
                    00FC    247 _CCAP2H	=	0x00fc
                    00FD    248 _CCAP3H	=	0x00fd
                    00FE    249 _CCAP4H	=	0x00fe
                    00EA    250 _CCAP0L	=	0x00ea
                    00EB    251 _CCAP1L	=	0x00eb
                    00EC    252 _CCAP2L	=	0x00ec
                    00ED    253 _CCAP3L	=	0x00ed
                    00EE    254 _CCAP4L	=	0x00ee
                    00DA    255 _CCAPM0	=	0x00da
                    00DB    256 _CCAPM1	=	0x00db
                    00DC    257 _CCAPM2	=	0x00dc
                    00DD    258 _CCAPM3	=	0x00dd
                    00DE    259 _CCAPM4	=	0x00de
                    00D8    260 _CCON	=	0x00d8
                    00F9    261 _CH	=	0x00f9
                    00E9    262 _CL	=	0x00e9
                    00D9    263 _CMOD	=	0x00d9
                    00A8    264 _IEN0	=	0x00a8
                    00B1    265 _IEN1	=	0x00b1
                    00B8    266 _IPL0	=	0x00b8
                    00B7    267 _IPH0	=	0x00b7
                    00B2    268 _IPL1	=	0x00b2
                    00B3    269 _IPH1	=	0x00b3
                    00C0    270 _P4	=	0x00c0
                    00D8    271 _P5	=	0x00d8
                    00A6    272 _WDTRST	=	0x00a6
                    00A7    273 _WDTPRG	=	0x00a7
                    00A9    274 _SADDR	=	0x00a9
                    00B9    275 _SADEN	=	0x00b9
                    00C3    276 _SPCON	=	0x00c3
                    00C4    277 _SPSTA	=	0x00c4
                    00C5    278 _SPDAT	=	0x00c5
                    00C9    279 _T2MOD	=	0x00c9
                    009B    280 _BDRCON	=	0x009b
                    009A    281 _BRL	=	0x009a
                    009C    282 _KBLS	=	0x009c
                    009D    283 _KBE	=	0x009d
                    009E    284 _KBF	=	0x009e
                    00D2    285 _EECON	=	0x00d2
                    00E0    286 _ACC	=	0x00e0
                    00F0    287 _B	=	0x00f0
                    0083    288 _DPH	=	0x0083
                    0083    289 _DP0H	=	0x0083
                    0082    290 _DPL	=	0x0082
                    0082    291 _DP0L	=	0x0082
                    00A8    292 _IE	=	0x00a8
                    00B8    293 _IP	=	0x00b8
                    0080    294 _P0	=	0x0080
                    0090    295 _P1	=	0x0090
                    00A0    296 _P2	=	0x00a0
                    00B0    297 _P3	=	0x00b0
                    0087    298 _PCON	=	0x0087
                    00D0    299 _PSW	=	0x00d0
                    0099    300 _SBUF	=	0x0099
                    0099    301 _SBUF0	=	0x0099
                    0098    302 _SCON	=	0x0098
                    0081    303 _SP	=	0x0081
                    0088    304 _TCON	=	0x0088
                    008C    305 _TH0	=	0x008c
                    008D    306 _TH1	=	0x008d
                    008A    307 _TL0	=	0x008a
                    008B    308 _TL1	=	0x008b
                    0089    309 _TMOD	=	0x0089
                            310 ;--------------------------------------------------------
                            311 ; special function bits
                            312 ;--------------------------------------------------------
                            313 	.area RSEG    (DATA)
                    00AD    314 _ET2	=	0x00ad
                    00BD    315 _PT2	=	0x00bd
                    00C8    316 _T2CON_0	=	0x00c8
                    00C9    317 _T2CON_1	=	0x00c9
                    00CA    318 _T2CON_2	=	0x00ca
                    00CB    319 _T2CON_3	=	0x00cb
                    00CC    320 _T2CON_4	=	0x00cc
                    00CD    321 _T2CON_5	=	0x00cd
                    00CE    322 _T2CON_6	=	0x00ce
                    00CF    323 _T2CON_7	=	0x00cf
                    00C8    324 _CP_RL2	=	0x00c8
                    00C9    325 _C_T2	=	0x00c9
                    00CA    326 _TR2	=	0x00ca
                    00CB    327 _EXEN2	=	0x00cb
                    00CC    328 _TCLK	=	0x00cc
                    00CD    329 _RCLK	=	0x00cd
                    00CE    330 _EXF2	=	0x00ce
                    00CF    331 _TF2	=	0x00cf
                    00DF    332 _CF	=	0x00df
                    00DE    333 _CR	=	0x00de
                    00DC    334 _CCF4	=	0x00dc
                    00DB    335 _CCF3	=	0x00db
                    00DA    336 _CCF2	=	0x00da
                    00D9    337 _CCF1	=	0x00d9
                    00D8    338 _CCF0	=	0x00d8
                    00AE    339 _EC	=	0x00ae
                    00BE    340 _PPCL	=	0x00be
                    00BD    341 _PT2L	=	0x00bd
                    00BC    342 _PLS	=	0x00bc
                    00BB    343 _PT1L	=	0x00bb
                    00BA    344 _PX1L	=	0x00ba
                    00B9    345 _PT0L	=	0x00b9
                    00B8    346 _PX0L	=	0x00b8
                    00C0    347 _P4_0	=	0x00c0
                    00C1    348 _P4_1	=	0x00c1
                    00C2    349 _P4_2	=	0x00c2
                    00C3    350 _P4_3	=	0x00c3
                    00C4    351 _P4_4	=	0x00c4
                    00C5    352 _P4_5	=	0x00c5
                    00C6    353 _P4_6	=	0x00c6
                    00C7    354 _P4_7	=	0x00c7
                    00D8    355 _P5_0	=	0x00d8
                    00D9    356 _P5_1	=	0x00d9
                    00DA    357 _P5_2	=	0x00da
                    00DB    358 _P5_3	=	0x00db
                    00DC    359 _P5_4	=	0x00dc
                    00DD    360 _P5_5	=	0x00dd
                    00DE    361 _P5_6	=	0x00de
                    00DF    362 _P5_7	=	0x00df
                    00F0    363 _BREG_F0	=	0x00f0
                    00F1    364 _BREG_F1	=	0x00f1
                    00F2    365 _BREG_F2	=	0x00f2
                    00F3    366 _BREG_F3	=	0x00f3
                    00F4    367 _BREG_F4	=	0x00f4
                    00F5    368 _BREG_F5	=	0x00f5
                    00F6    369 _BREG_F6	=	0x00f6
                    00F7    370 _BREG_F7	=	0x00f7
                    00A8    371 _EX0	=	0x00a8
                    00A9    372 _ET0	=	0x00a9
                    00AA    373 _EX1	=	0x00aa
                    00AB    374 _ET1	=	0x00ab
                    00AC    375 _ES	=	0x00ac
                    00AF    376 _EA	=	0x00af
                    00B8    377 _PX0	=	0x00b8
                    00B9    378 _PT0	=	0x00b9
                    00BA    379 _PX1	=	0x00ba
                    00BB    380 _PT1	=	0x00bb
                    00BC    381 _PS	=	0x00bc
                    0080    382 _P0_0	=	0x0080
                    0081    383 _P0_1	=	0x0081
                    0082    384 _P0_2	=	0x0082
                    0083    385 _P0_3	=	0x0083
                    0084    386 _P0_4	=	0x0084
                    0085    387 _P0_5	=	0x0085
                    0086    388 _P0_6	=	0x0086
                    0087    389 _P0_7	=	0x0087
                    0090    390 _P1_0	=	0x0090
                    0091    391 _P1_1	=	0x0091
                    0092    392 _P1_2	=	0x0092
                    0093    393 _P1_3	=	0x0093
                    0094    394 _P1_4	=	0x0094
                    0095    395 _P1_5	=	0x0095
                    0096    396 _P1_6	=	0x0096
                    0097    397 _P1_7	=	0x0097
                    00A0    398 _P2_0	=	0x00a0
                    00A1    399 _P2_1	=	0x00a1
                    00A2    400 _P2_2	=	0x00a2
                    00A3    401 _P2_3	=	0x00a3
                    00A4    402 _P2_4	=	0x00a4
                    00A5    403 _P2_5	=	0x00a5
                    00A6    404 _P2_6	=	0x00a6
                    00A7    405 _P2_7	=	0x00a7
                    00B0    406 _P3_0	=	0x00b0
                    00B1    407 _P3_1	=	0x00b1
                    00B2    408 _P3_2	=	0x00b2
                    00B3    409 _P3_3	=	0x00b3
                    00B4    410 _P3_4	=	0x00b4
                    00B5    411 _P3_5	=	0x00b5
                    00B6    412 _P3_6	=	0x00b6
                    00B7    413 _P3_7	=	0x00b7
                    00B0    414 _RXD	=	0x00b0
                    00B0    415 _RXD0	=	0x00b0
                    00B1    416 _TXD	=	0x00b1
                    00B1    417 _TXD0	=	0x00b1
                    00B2    418 _INT0	=	0x00b2
                    00B3    419 _INT1	=	0x00b3
                    00B4    420 _T0	=	0x00b4
                    00B5    421 _T1	=	0x00b5
                    00B6    422 _WR	=	0x00b6
                    00B7    423 _RD	=	0x00b7
                    00D0    424 _P	=	0x00d0
                    00D1    425 _F1	=	0x00d1
                    00D2    426 _OV	=	0x00d2
                    00D3    427 _RS0	=	0x00d3
                    00D4    428 _RS1	=	0x00d4
                    00D5    429 _F0	=	0x00d5
                    00D6    430 _AC	=	0x00d6
                    00D7    431 _CY	=	0x00d7
                    0098    432 _RI	=	0x0098
                    0099    433 _TI	=	0x0099
                    009A    434 _RB8	=	0x009a
                    009B    435 _TB8	=	0x009b
                    009C    436 _REN	=	0x009c
                    009D    437 _SM2	=	0x009d
                    009E    438 _SM1	=	0x009e
                    009F    439 _SM0	=	0x009f
                    0088    440 _IT0	=	0x0088
                    0089    441 _IE0	=	0x0089
                    008A    442 _IT1	=	0x008a
                    008B    443 _IE1	=	0x008b
                    008C    444 _TR0	=	0x008c
                    008D    445 _TF0	=	0x008d
                    008E    446 _TR1	=	0x008e
                    008F    447 _TF1	=	0x008f
                            448 ;--------------------------------------------------------
                            449 ; overlayable register banks
                            450 ;--------------------------------------------------------
                            451 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     452 	.ds 8
                            453 ;--------------------------------------------------------
                            454 ; internal ram data
                            455 ;--------------------------------------------------------
                            456 	.area DSEG    (DATA)
                            457 ;--------------------------------------------------------
                            458 ; overlayable items in internal ram 
                            459 ;--------------------------------------------------------
                            460 	.area OSEG    (OVR,DATA)
                            461 ;--------------------------------------------------------
                            462 ; Stack segment in internal ram 
                            463 ;--------------------------------------------------------
                            464 	.area	SSEG	(DATA)
   0000                     465 __start__stack:
   0000                     466 	.ds	1
                            467 
                            468 ;--------------------------------------------------------
                            469 ; indirectly addressable internal ram data
                            470 ;--------------------------------------------------------
                            471 	.area ISEG    (DATA)
                            472 ;--------------------------------------------------------
                            473 ; bit data
                            474 ;--------------------------------------------------------
                            475 	.area BSEG    (BIT)
                            476 ;--------------------------------------------------------
                            477 ; paged external ram data
                            478 ;--------------------------------------------------------
                            479 	.area PSEG    (PAG,XDATA)
                            480 ;--------------------------------------------------------
                            481 ; external ram data
                            482 ;--------------------------------------------------------
                            483 	.area XSEG    (XDATA)
   0000                     484 _add_x::
   0000                     485 	.ds 1
   0001                     486 _add_y::
   0001                     487 	.ds 1
   0002                     488 _i:
   0002                     489 	.ds 2
   0004                     490 _j:
   0004                     491 	.ds 2
   0006                     492 _k:
   0006                     493 	.ds 2
   0008                     494 _m:
   0008                     495 	.ds 2
   000A                     496 _chip:
   000A                     497 	.ds 2
   000C                     498 _next_block:
   000C                     499 	.ds 2
   000E                     500 _delay_d_1_1:
   000E                     501 	.ds 2
   0010                     502 _lcd_port_a_1_1:
   0010                     503 	.ds 1
   0011                     504 _lcdcmd_a_1_1:
   0011                     505 	.ds 1
   0012                     506 _lcddata_b_a_1_1:
   0012                     507 	.ds 1
                            508 ;--------------------------------------------------------
                            509 ; external initialized ram data
                            510 ;--------------------------------------------------------
                            511 	.area XISEG   (XDATA)
   0000                     512 _fixed_blocks::
   0000                     513 	.ds 64
                            514 	.area HOME    (CODE)
                            515 	.area GSINIT0 (CODE)
                            516 	.area GSINIT1 (CODE)
                            517 	.area GSINIT2 (CODE)
                            518 	.area GSINIT3 (CODE)
                            519 	.area GSINIT4 (CODE)
                            520 	.area GSINIT5 (CODE)
                            521 	.area GSINIT  (CODE)
                            522 	.area GSFINAL (CODE)
                            523 	.area CSEG    (CODE)
                            524 ;--------------------------------------------------------
                            525 ; interrupt vector 
                            526 ;--------------------------------------------------------
                            527 	.area HOME    (CODE)
   0000                     528 __interrupt_vect:
   0000 02s00r00            529 	ljmp	__sdcc_gsinit_startup
                            530 ;--------------------------------------------------------
                            531 ; global & static initialisations
                            532 ;--------------------------------------------------------
                            533 	.area HOME    (CODE)
                            534 	.area GSINIT  (CODE)
                            535 	.area GSFINAL (CODE)
                            536 	.area GSINIT  (CODE)
                            537 	.globl __sdcc_gsinit_startup
                            538 	.globl __sdcc_program_startup
                            539 	.globl __start__stack
                            540 	.globl __mcs51_genXINIT
                            541 	.globl __mcs51_genXRAMCLEAR
                            542 	.globl __mcs51_genRAMCLEAR
                            543 	.area GSFINAL (CODE)
   0000 02s00r00            544 	ljmp	__sdcc_program_startup
                            545 ;--------------------------------------------------------
                            546 ; Home
                            547 ;--------------------------------------------------------
                            548 	.area HOME    (CODE)
                            549 	.area CSEG    (CODE)
   0000                     550 __sdcc_program_startup:
   0000 12s02r0D            551 	lcall	_main
                            552 ;	return from main will lock up
   0003 80 FE               553 	sjmp .
                            554 ;--------------------------------------------------------
                            555 ; code
                            556 ;--------------------------------------------------------
                            557 	.area CSEG    (CODE)
                            558 ;------------------------------------------------------------
                            559 ;Allocation info for local variables in function 'delay'
                            560 ;------------------------------------------------------------
                            561 ;d                         Allocated with name '_delay_d_1_1'
                            562 ;i                         Allocated with name '_delay_i_1_1'
                            563 ;j                         Allocated with name '_delay_j_1_1'
                            564 ;------------------------------------------------------------
                            565 ;	main.c:149: void delay(unsigned int d){
                            566 ;	-----------------------------------------
                            567 ;	 function delay
                            568 ;	-----------------------------------------
   0005                     569 _delay:
                    0002    570 	ar2 = 0x02
                    0003    571 	ar3 = 0x03
                    0004    572 	ar4 = 0x04
                    0005    573 	ar5 = 0x05
                    0006    574 	ar6 = 0x06
                    0007    575 	ar7 = 0x07
                    0000    576 	ar0 = 0x00
                    0001    577 	ar1 = 0x01
                            578 ;	genReceive
   0005 AA 83               579 	mov	r2,dph
   0007 E5 82               580 	mov	a,dpl
   0009 90s00r0E            581 	mov	dptr,#_delay_d_1_1
   000C F0                  582 	movx	@dptr,a
   000D A3                  583 	inc	dptr
   000E EA                  584 	mov	a,r2
   000F F0                  585 	movx	@dptr,a
                            586 ;	main.c:151: for(i=0;i< d;i++)
                            587 ;	genAssign
   0010 90s00r0E            588 	mov	dptr,#_delay_d_1_1
   0013 E0                  589 	movx	a,@dptr
   0014 FA                  590 	mov	r2,a
   0015 A3                  591 	inc	dptr
   0016 E0                  592 	movx	a,@dptr
   0017 FB                  593 	mov	r3,a
                            594 ;	genAssign
   0018 7C 00               595 	mov	r4,#0x00
   001A 7D 00               596 	mov	r5,#0x00
   001C                     597 00104$:
                            598 ;	genCmpLt
                            599 ;	genCmp
   001C C3                  600 	clr	c
   001D EC                  601 	mov	a,r4
   001E 9A                  602 	subb	a,r2
   001F ED                  603 	mov	a,r5
   0020 9B                  604 	subb	a,r3
                            605 ;	genIfxJump
                            606 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0021 50 14               607 	jnc	00108$
                            608 ;	Peephole 300	removed redundant label 00116$
                            609 ;	main.c:152: for(j=0;j<5;j++);
                            610 ;	genAssign
   0023 7E 05               611 	mov	r6,#0x05
   0025 7F 00               612 	mov	r7,#0x00
   0027                     613 00103$:
                            614 ;	genMinus
                            615 ;	genMinusDec
   0027 1E                  616 	dec	r6
   0028 BE FF 01            617 	cjne	r6,#0xff,00117$
   002B 1F                  618 	dec	r7
   002C                     619 00117$:
                            620 ;	genIfx
   002C EE                  621 	mov	a,r6
   002D 4F                  622 	orl	a,r7
                            623 ;	genIfxJump
                            624 ;	Peephole 108.b	removed ljmp by inverse jump logic
   002E 70 F7               625 	jnz	00103$
                            626 ;	Peephole 300	removed redundant label 00118$
                            627 ;	main.c:151: for(i=0;i< d;i++)
                            628 ;	genPlus
                            629 ;     genPlusIncr
                            630 ;	tail increment optimized (range 7)
   0030 0C                  631 	inc	r4
   0031 BC 00 E8            632 	cjne	r4,#0x00,00104$
   0034 0D                  633 	inc	r5
                            634 ;	Peephole 112.b	changed ljmp to sjmp
   0035 80 E5               635 	sjmp	00104$
   0037                     636 00108$:
   0037 22                  637 	ret
                            638 ;------------------------------------------------------------
                            639 ;Allocation info for local variables in function 'lcd_port'
                            640 ;------------------------------------------------------------
                            641 ;a                         Allocated with name '_lcd_port_a_1_1'
                            642 ;------------------------------------------------------------
                            643 ;	main.c:155: void lcd_port(char a)
                            644 ;	-----------------------------------------
                            645 ;	 function lcd_port
                            646 ;	-----------------------------------------
   0038                     647 _lcd_port:
                            648 ;	genReceive
   0038 E5 82               649 	mov	a,dpl
   003A 90s00r10            650 	mov	dptr,#_lcd_port_a_1_1
   003D F0                  651 	movx	@dptr,a
                            652 ;	main.c:157: if(a & 1)
                            653 ;	genAssign
   003E 90s00r10            654 	mov	dptr,#_lcd_port_a_1_1
   0041 E0                  655 	movx	a,@dptr
                            656 ;	genAnd
   0042 FA                  657 	mov	r2,a
                            658 ;	Peephole 105	removed redundant mov
                            659 ;	genIfxJump
                            660 ;	Peephole 108.d	removed ljmp by inverse jump logic
   0043 30 E0 04            661 	jnb	acc.0,00102$
                            662 ;	Peephole 300	removed redundant label 00135$
                            663 ;	main.c:158: D0 = 1;
                            664 ;	genAssign
   0046 D2 A0               665 	setb	_P2_0
                            666 ;	Peephole 112.b	changed ljmp to sjmp
   0048 80 02               667 	sjmp	00103$
   004A                     668 00102$:
                            669 ;	main.c:160: D0 = 0;
                            670 ;	genAssign
   004A C2 A0               671 	clr	_P2_0
   004C                     672 00103$:
                            673 ;	main.c:162: if(a & 2)
                            674 ;	genAssign
   004C 90s00r10            675 	mov	dptr,#_lcd_port_a_1_1
   004F E0                  676 	movx	a,@dptr
                            677 ;	genAnd
   0050 FA                  678 	mov	r2,a
                            679 ;	Peephole 105	removed redundant mov
                            680 ;	genIfxJump
                            681 ;	Peephole 108.d	removed ljmp by inverse jump logic
   0051 30 E1 04            682 	jnb	acc.1,00105$
                            683 ;	Peephole 300	removed redundant label 00136$
                            684 ;	main.c:163: D1 = 1;
                            685 ;	genAssign
   0054 D2 A1               686 	setb	_P2_1
                            687 ;	Peephole 112.b	changed ljmp to sjmp
   0056 80 02               688 	sjmp	00106$
   0058                     689 00105$:
                            690 ;	main.c:165: D1 = 0;
                            691 ;	genAssign
   0058 C2 A1               692 	clr	_P2_1
   005A                     693 00106$:
                            694 ;	main.c:167: if(a & 4)
                            695 ;	genAssign
   005A 90s00r10            696 	mov	dptr,#_lcd_port_a_1_1
   005D E0                  697 	movx	a,@dptr
                            698 ;	genAnd
   005E FA                  699 	mov	r2,a
                            700 ;	Peephole 105	removed redundant mov
                            701 ;	genIfxJump
                            702 ;	Peephole 108.d	removed ljmp by inverse jump logic
   005F 30 E2 04            703 	jnb	acc.2,00108$
                            704 ;	Peephole 300	removed redundant label 00137$
                            705 ;	main.c:168: D2 = 1;
                            706 ;	genAssign
   0062 D2 A2               707 	setb	_P2_2
                            708 ;	Peephole 112.b	changed ljmp to sjmp
   0064 80 02               709 	sjmp	00109$
   0066                     710 00108$:
                            711 ;	main.c:170: D2 = 0;
                            712 ;	genAssign
   0066 C2 A2               713 	clr	_P2_2
   0068                     714 00109$:
                            715 ;	main.c:172: if(a & 8)
                            716 ;	genAssign
   0068 90s00r10            717 	mov	dptr,#_lcd_port_a_1_1
   006B E0                  718 	movx	a,@dptr
                            719 ;	genAnd
   006C FA                  720 	mov	r2,a
                            721 ;	Peephole 105	removed redundant mov
                            722 ;	genIfxJump
                            723 ;	Peephole 108.d	removed ljmp by inverse jump logic
   006D 30 E3 04            724 	jnb	acc.3,00111$
                            725 ;	Peephole 300	removed redundant label 00138$
                            726 ;	main.c:173: D3 = 1;
                            727 ;	genAssign
   0070 D2 A3               728 	setb	_P2_3
                            729 ;	Peephole 112.b	changed ljmp to sjmp
   0072 80 02               730 	sjmp	00112$
   0074                     731 00111$:
                            732 ;	main.c:175: D3 = 0;
                            733 ;	genAssign
   0074 C2 A3               734 	clr	_P2_3
   0076                     735 00112$:
                            736 ;	main.c:177: if(a & 16)
                            737 ;	genAssign
   0076 90s00r10            738 	mov	dptr,#_lcd_port_a_1_1
   0079 E0                  739 	movx	a,@dptr
                            740 ;	genAnd
   007A FA                  741 	mov	r2,a
                            742 ;	Peephole 105	removed redundant mov
                            743 ;	genIfxJump
                            744 ;	Peephole 108.d	removed ljmp by inverse jump logic
   007B 30 E4 04            745 	jnb	acc.4,00114$
                            746 ;	Peephole 300	removed redundant label 00139$
                            747 ;	main.c:178: D4 = 1;
                            748 ;	genAssign
   007E D2 A4               749 	setb	_P2_4
                            750 ;	Peephole 112.b	changed ljmp to sjmp
   0080 80 02               751 	sjmp	00115$
   0082                     752 00114$:
                            753 ;	main.c:180: D4 = 0;
                            754 ;	genAssign
   0082 C2 A4               755 	clr	_P2_4
   0084                     756 00115$:
                            757 ;	main.c:182: if(a & 32)
                            758 ;	genAssign
   0084 90s00r10            759 	mov	dptr,#_lcd_port_a_1_1
   0087 E0                  760 	movx	a,@dptr
                            761 ;	genAnd
   0088 FA                  762 	mov	r2,a
                            763 ;	Peephole 105	removed redundant mov
                            764 ;	genIfxJump
                            765 ;	Peephole 108.d	removed ljmp by inverse jump logic
   0089 30 E5 04            766 	jnb	acc.5,00117$
                            767 ;	Peephole 300	removed redundant label 00140$
                            768 ;	main.c:183: D5 = 1;
                            769 ;	genAssign
   008C D2 A5               770 	setb	_P2_5
                            771 ;	Peephole 112.b	changed ljmp to sjmp
   008E 80 02               772 	sjmp	00118$
   0090                     773 00117$:
                            774 ;	main.c:185: D5 = 0;
                            775 ;	genAssign
   0090 C2 A5               776 	clr	_P2_5
   0092                     777 00118$:
                            778 ;	main.c:187: if(a & 64)
                            779 ;	genAssign
   0092 90s00r10            780 	mov	dptr,#_lcd_port_a_1_1
   0095 E0                  781 	movx	a,@dptr
                            782 ;	genAnd
   0096 FA                  783 	mov	r2,a
                            784 ;	Peephole 105	removed redundant mov
                            785 ;	genIfxJump
                            786 ;	Peephole 108.d	removed ljmp by inverse jump logic
   0097 30 E6 04            787 	jnb	acc.6,00120$
                            788 ;	Peephole 300	removed redundant label 00141$
                            789 ;	main.c:188: D6 = 1;
                            790 ;	genAssign
   009A D2 A6               791 	setb	_P2_6
                            792 ;	Peephole 112.b	changed ljmp to sjmp
   009C 80 02               793 	sjmp	00121$
   009E                     794 00120$:
                            795 ;	main.c:190: D6 = 0;
                            796 ;	genAssign
   009E C2 A6               797 	clr	_P2_6
   00A0                     798 00121$:
                            799 ;	main.c:192: if(a & 128)
                            800 ;	genAssign
   00A0 90s00r10            801 	mov	dptr,#_lcd_port_a_1_1
   00A3 E0                  802 	movx	a,@dptr
                            803 ;	genAnd
   00A4 FA                  804 	mov	r2,a
                            805 ;	Peephole 105	removed redundant mov
                            806 ;	Peephole 108.d	removed ljmp by inverse jump logic
   00A5 30 E7 03            807 	jnb	acc.7,00123$
                            808 ;	Peephole 300	removed redundant label 00142$
                            809 ;	main.c:193: D7 = 1;
                            810 ;	genAssign
   00A8 D2 A7               811 	setb	_P2_7
                            812 ;	Peephole 112.b	changed ljmp to sjmp
                            813 ;	Peephole 251.b	replaced sjmp to ret with ret
   00AA 22                  814 	ret
   00AB                     815 00123$:
                            816 ;	main.c:195: D7 = 0;
                            817 ;	genAssign
   00AB C2 A7               818 	clr	_P2_7
                            819 ;	Peephole 300	removed redundant label 00125$
   00AD 22                  820 	ret
                            821 ;------------------------------------------------------------
                            822 ;Allocation info for local variables in function 'lcdcmd'
                            823 ;------------------------------------------------------------
                            824 ;a                         Allocated with name '_lcdcmd_a_1_1'
                            825 ;------------------------------------------------------------
                            826 ;	main.c:198: void lcdcmd(char a)
                            827 ;	-----------------------------------------
                            828 ;	 function lcdcmd
                            829 ;	-----------------------------------------
   00AE                     830 _lcdcmd:
                            831 ;	genReceive
   00AE E5 82               832 	mov	a,dpl
   00B0 90s00r11            833 	mov	dptr,#_lcdcmd_a_1_1
   00B3 F0                  834 	movx	@dptr,a
                            835 ;	main.c:200: rw=0;                // => Enable Write
                            836 ;	genAssign
   00B4 C2 97               837 	clr	_P1_7
                            838 ;	main.c:201: rs = 0;             // => RS = 0
                            839 ;	genAssign
   00B6 C2 90               840 	clr	_P1_0
                            841 ;	main.c:203: P2=a;
                            842 ;	genAssign
   00B8 90s00r11            843 	mov	dptr,#_lcdcmd_a_1_1
   00BB E0                  844 	movx	a,@dptr
   00BC F5 A0               845 	mov	_P2,a
                            846 ;	main.c:204: en  = 1;             // => E = 1
                            847 ;	genAssign
   00BE D2 91               848 	setb	_P1_1
                            849 ;	main.c:205: delay(5);
                            850 ;	genCall
                            851 ;	Peephole 182.b	used 16 bit load of dptr
   00C0 90 00 05            852 	mov	dptr,#0x0005
   00C3 12s00r05            853 	lcall	_delay
                            854 ;	main.c:206: en  = 0;             // => E = 0
                            855 ;	genAssign
   00C6 C2 91               856 	clr	_P1_1
                            857 ;	Peephole 300	removed redundant label 00101$
   00C8 22                  858 	ret
                            859 ;------------------------------------------------------------
                            860 ;Allocation info for local variables in function 'lcddata_b'
                            861 ;------------------------------------------------------------
                            862 ;a                         Allocated with name '_lcddata_b_a_1_1'
                            863 ;------------------------------------------------------------
                            864 ;	main.c:210: void lcddata_b(char a)
                            865 ;	-----------------------------------------
                            866 ;	 function lcddata_b
                            867 ;	-----------------------------------------
   00C9                     868 _lcddata_b:
                            869 ;	genReceive
   00C9 E5 82               870 	mov	a,dpl
   00CB 90s00r12            871 	mov	dptr,#_lcddata_b_a_1_1
   00CE F0                  872 	movx	@dptr,a
                            873 ;	main.c:214: rw=0;                // => Enable Write
                            874 ;	genAssign
   00CF C2 97               875 	clr	_P1_7
                            876 ;	main.c:215: rs = 1;             // => RS = 1
                            877 ;	genAssign
   00D1 D2 90               878 	setb	_P1_0
                            879 ;	main.c:217: P2=a;
                            880 ;	genAssign
   00D3 90s00r12            881 	mov	dptr,#_lcddata_b_a_1_1
   00D6 E0                  882 	movx	a,@dptr
   00D7 F5 A0               883 	mov	_P2,a
                            884 ;	main.c:218: en  = 1;             // => E = 1
                            885 ;	genAssign
   00D9 D2 91               886 	setb	_P1_1
                            887 ;	main.c:219: delay(5);
                            888 ;	genCall
                            889 ;	Peephole 182.b	used 16 bit load of dptr
   00DB 90 00 05            890 	mov	dptr,#0x0005
   00DE 12s00r05            891 	lcall	_delay
                            892 ;	main.c:220: en  = 0;             // => E = 04
                            893 ;	genAssign
   00E1 C2 91               894 	clr	_P1_1
                            895 ;	Peephole 300	removed redundant label 00101$
   00E3 22                  896 	ret
                            897 ;------------------------------------------------------------
                            898 ;Allocation info for local variables in function 'lcd_init'
                            899 ;------------------------------------------------------------
                            900 ;------------------------------------------------------------
                            901 ;	main.c:224: void lcd_init()
                            902 ;	-----------------------------------------
                            903 ;	 function lcd_init
                            904 ;	-----------------------------------------
   00E4                     905 _lcd_init:
                            906 ;	main.c:226: cs1=1;
                            907 ;	genAssign
   00E4 D2 95               908 	setb	_P1_5
                            909 ;	main.c:227: cs2=0;
                            910 ;	genAssign
   00E6 C2 94               911 	clr	_P1_4
                            912 ;	main.c:228: re=1;
                            913 ;	genAssign
   00E8 D2 96               914 	setb	_P1_6
                            915 ;	main.c:230: lcdcmd(0x3F);    //Display on
                            916 ;	genCall
   00EA 75 82 3F            917 	mov	dpl,#0x3F
   00ED 12s00rAE            918 	lcall	_lcdcmd
                            919 ;	main.c:231: lcdcmd(0x40);    //Setting y-address
                            920 ;	genCall
   00F0 75 82 40            921 	mov	dpl,#0x40
   00F3 12s00rAE            922 	lcall	_lcdcmd
                            923 ;	main.c:232: lcdcmd(0xB8);    //Setting x-address page 1 is selected
                            924 ;	genCall
   00F6 75 82 B8            925 	mov	dpl,#0xB8
   00F9 12s00rAE            926 	lcall	_lcdcmd
                            927 ;	main.c:233: lcdcmd(0xC0);    //start line
                            928 ;	genCall
   00FC 75 82 C0            929 	mov	dpl,#0xC0
   00FF 12s00rAE            930 	lcall	_lcdcmd
                            931 ;	main.c:235: for(i=1;i<9;i++)
                            932 ;	genAssign
   0102 90s00r02            933 	mov	dptr,#_i
   0105 74 01               934 	mov	a,#0x01
   0107 F0                  935 	movx	@dptr,a
   0108 E4                  936 	clr	a
   0109 A3                  937 	inc	dptr
   010A F0                  938 	movx	@dptr,a
   010B                     939 00105$:
                            940 ;	genAssign
   010B 90s00r02            941 	mov	dptr,#_i
   010E E0                  942 	movx	a,@dptr
   010F FA                  943 	mov	r2,a
   0110 A3                  944 	inc	dptr
   0111 E0                  945 	movx	a,@dptr
   0112 FB                  946 	mov	r3,a
                            947 ;	genCmpLt
                            948 ;	genCmp
   0113 C3                  949 	clr	c
   0114 EA                  950 	mov	a,r2
   0115 94 09               951 	subb	a,#0x09
   0117 EB                  952 	mov	a,r3
   0118 64 80               953 	xrl	a,#0x80
   011A 94 80               954 	subb	a,#0x80
                            955 ;	genIfxJump
                            956 ;	Peephole 108.a	removed ljmp by inverse jump logic
   011C 50 5B               957 	jnc	00108$
                            958 ;	Peephole 300	removed redundant label 00127$
                            959 ;	main.c:237: for(j=0;j<64;j++)
                            960 ;	genAssign
   011E 90s00r04            961 	mov	dptr,#_j
   0121 E4                  962 	clr	a
   0122 F0                  963 	movx	@dptr,a
   0123 A3                  964 	inc	dptr
   0124 F0                  965 	movx	@dptr,a
   0125                     966 00101$:
                            967 ;	genAssign
   0125 90s00r04            968 	mov	dptr,#_j
   0128 E0                  969 	movx	a,@dptr
   0129 FA                  970 	mov	r2,a
   012A A3                  971 	inc	dptr
   012B E0                  972 	movx	a,@dptr
   012C FB                  973 	mov	r3,a
                            974 ;	genCmpLt
                            975 ;	genCmp
   012D C3                  976 	clr	c
   012E EA                  977 	mov	a,r2
   012F 94 40               978 	subb	a,#0x40
   0131 EB                  979 	mov	a,r3
   0132 64 80               980 	xrl	a,#0x80
   0134 94 80               981 	subb	a,#0x80
                            982 ;	genIfxJump
                            983 ;	Peephole 108.a	removed ljmp by inverse jump logic
   0136 50 1B               984 	jnc	00104$
                            985 ;	Peephole 300	removed redundant label 00128$
                            986 ;	main.c:238: lcddata_b(0x00);
                            987 ;	genCall
   0138 75 82 00            988 	mov	dpl,#0x00
   013B 12s00rC9            989 	lcall	_lcddata_b
                            990 ;	main.c:237: for(j=0;j<64;j++)
                            991 ;	genAssign
   013E 90s00r04            992 	mov	dptr,#_j
   0141 E0                  993 	movx	a,@dptr
   0142 FA                  994 	mov	r2,a
   0143 A3                  995 	inc	dptr
   0144 E0                  996 	movx	a,@dptr
   0145 FB                  997 	mov	r3,a
                            998 ;	genPlus
   0146 90s00r04            999 	mov	dptr,#_j
                           1000 ;     genPlusIncr
   0149 74 01              1001 	mov	a,#0x01
                           1002 ;	Peephole 236.a	used r2 instead of ar2
   014B 2A                 1003 	add	a,r2
   014C F0                 1004 	movx	@dptr,a
                           1005 ;	Peephole 181	changed mov to clr
   014D E4                 1006 	clr	a
                           1007 ;	Peephole 236.b	used r3 instead of ar3
   014E 3B                 1008 	addc	a,r3
   014F A3                 1009 	inc	dptr
   0150 F0                 1010 	movx	@dptr,a
                           1011 ;	Peephole 112.b	changed ljmp to sjmp
   0151 80 D2              1012 	sjmp	00101$
   0153                    1013 00104$:
                           1014 ;	main.c:239: lcdcmd(0xB8+i);
                           1015 ;	genAssign
   0153 90s00r02           1016 	mov	dptr,#_i
   0156 E0                 1017 	movx	a,@dptr
   0157 FA                 1018 	mov	r2,a
   0158 A3                 1019 	inc	dptr
   0159 E0                 1020 	movx	a,@dptr
   015A FB                 1021 	mov	r3,a
                           1022 ;	genCast
                           1023 ;	genPlus
                           1024 ;     genPlusIncr
   015B 74 B8              1025 	mov	a,#0xB8
                           1026 ;	Peephole 236.a	used r2 instead of ar2
   015D 2A                 1027 	add	a,r2
                           1028 ;	genCall
   015E FA                 1029 	mov	r2,a
                           1030 ;	Peephole 244.c	loading dpl from a instead of r2
   015F F5 82              1031 	mov	dpl,a
   0161 12s00rAE           1032 	lcall	_lcdcmd
                           1033 ;	main.c:235: for(i=1;i<9;i++)
                           1034 ;	genAssign
   0164 90s00r02           1035 	mov	dptr,#_i
   0167 E0                 1036 	movx	a,@dptr
   0168 FA                 1037 	mov	r2,a
   0169 A3                 1038 	inc	dptr
   016A E0                 1039 	movx	a,@dptr
   016B FB                 1040 	mov	r3,a
                           1041 ;	genPlus
   016C 90s00r02           1042 	mov	dptr,#_i
                           1043 ;     genPlusIncr
   016F 74 01              1044 	mov	a,#0x01
                           1045 ;	Peephole 236.a	used r2 instead of ar2
   0171 2A                 1046 	add	a,r2
   0172 F0                 1047 	movx	@dptr,a
                           1048 ;	Peephole 181	changed mov to clr
   0173 E4                 1049 	clr	a
                           1050 ;	Peephole 236.b	used r3 instead of ar3
   0174 3B                 1051 	addc	a,r3
   0175 A3                 1052 	inc	dptr
   0176 F0                 1053 	movx	@dptr,a
                           1054 ;	Peephole 112.b	changed ljmp to sjmp
   0177 80 92              1055 	sjmp	00105$
   0179                    1056 00108$:
                           1057 ;	main.c:241: cs1=0;
                           1058 ;	genAssign
   0179 C2 95              1059 	clr	_P1_5
                           1060 ;	main.c:242: cs2=1;
                           1061 ;	genAssign
   017B D2 94              1062 	setb	_P1_4
                           1063 ;	main.c:244: lcdcmd(0x3F);    //Display on
                           1064 ;	genCall
   017D 75 82 3F           1065 	mov	dpl,#0x3F
   0180 12s00rAE           1066 	lcall	_lcdcmd
                           1067 ;	main.c:245: lcdcmd(0x40);    //Setting y-address
                           1068 ;	genCall
   0183 75 82 40           1069 	mov	dpl,#0x40
   0186 12s00rAE           1070 	lcall	_lcdcmd
                           1071 ;	main.c:246: lcdcmd(0xB8);    //Setting x-address page 1 is selected
                           1072 ;	genCall
   0189 75 82 B8           1073 	mov	dpl,#0xB8
   018C 12s00rAE           1074 	lcall	_lcdcmd
                           1075 ;	main.c:247: lcdcmd(0xC0);    //start line
                           1076 ;	genCall
   018F 75 82 C0           1077 	mov	dpl,#0xC0
   0192 12s00rAE           1078 	lcall	_lcdcmd
                           1079 ;	main.c:249: for(i=1;i<9;i++)
                           1080 ;	genAssign
   0195 90s00r02           1081 	mov	dptr,#_i
   0198 74 01              1082 	mov	a,#0x01
   019A F0                 1083 	movx	@dptr,a
   019B E4                 1084 	clr	a
   019C A3                 1085 	inc	dptr
   019D F0                 1086 	movx	@dptr,a
   019E                    1087 00113$:
                           1088 ;	genAssign
   019E 90s00r02           1089 	mov	dptr,#_i
   01A1 E0                 1090 	movx	a,@dptr
   01A2 FA                 1091 	mov	r2,a
   01A3 A3                 1092 	inc	dptr
   01A4 E0                 1093 	movx	a,@dptr
   01A5 FB                 1094 	mov	r3,a
                           1095 ;	genCmpLt
                           1096 ;	genCmp
   01A6 C3                 1097 	clr	c
   01A7 EA                 1098 	mov	a,r2
   01A8 94 09              1099 	subb	a,#0x09
   01AA EB                 1100 	mov	a,r3
   01AB 64 80              1101 	xrl	a,#0x80
   01AD 94 80              1102 	subb	a,#0x80
                           1103 ;	genIfxJump
                           1104 ;	Peephole 108.a	removed ljmp by inverse jump logic
   01AF 50 5B              1105 	jnc	00117$
                           1106 ;	Peephole 300	removed redundant label 00129$
                           1107 ;	main.c:251: for(j=0;j<64;j++)
                           1108 ;	genAssign
   01B1 90s00r04           1109 	mov	dptr,#_j
   01B4 E4                 1110 	clr	a
   01B5 F0                 1111 	movx	@dptr,a
   01B6 A3                 1112 	inc	dptr
   01B7 F0                 1113 	movx	@dptr,a
   01B8                    1114 00109$:
                           1115 ;	genAssign
   01B8 90s00r04           1116 	mov	dptr,#_j
   01BB E0                 1117 	movx	a,@dptr
   01BC FA                 1118 	mov	r2,a
   01BD A3                 1119 	inc	dptr
   01BE E0                 1120 	movx	a,@dptr
   01BF FB                 1121 	mov	r3,a
                           1122 ;	genCmpLt
                           1123 ;	genCmp
   01C0 C3                 1124 	clr	c
   01C1 EA                 1125 	mov	a,r2
   01C2 94 40              1126 	subb	a,#0x40
   01C4 EB                 1127 	mov	a,r3
   01C5 64 80              1128 	xrl	a,#0x80
   01C7 94 80              1129 	subb	a,#0x80
                           1130 ;	genIfxJump
                           1131 ;	Peephole 108.a	removed ljmp by inverse jump logic
   01C9 50 1B              1132 	jnc	00112$
                           1133 ;	Peephole 300	removed redundant label 00130$
                           1134 ;	main.c:252: lcddata_b(0x00);
                           1135 ;	genCall
   01CB 75 82 00           1136 	mov	dpl,#0x00
   01CE 12s00rC9           1137 	lcall	_lcddata_b
                           1138 ;	main.c:251: for(j=0;j<64;j++)
                           1139 ;	genAssign
   01D1 90s00r04           1140 	mov	dptr,#_j
   01D4 E0                 1141 	movx	a,@dptr
   01D5 FA                 1142 	mov	r2,a
   01D6 A3                 1143 	inc	dptr
   01D7 E0                 1144 	movx	a,@dptr
   01D8 FB                 1145 	mov	r3,a
                           1146 ;	genPlus
   01D9 90s00r04           1147 	mov	dptr,#_j
                           1148 ;     genPlusIncr
   01DC 74 01              1149 	mov	a,#0x01
                           1150 ;	Peephole 236.a	used r2 instead of ar2
   01DE 2A                 1151 	add	a,r2
   01DF F0                 1152 	movx	@dptr,a
                           1153 ;	Peephole 181	changed mov to clr
   01E0 E4                 1154 	clr	a
                           1155 ;	Peephole 236.b	used r3 instead of ar3
   01E1 3B                 1156 	addc	a,r3
   01E2 A3                 1157 	inc	dptr
   01E3 F0                 1158 	movx	@dptr,a
                           1159 ;	Peephole 112.b	changed ljmp to sjmp
   01E4 80 D2              1160 	sjmp	00109$
   01E6                    1161 00112$:
                           1162 ;	main.c:253: lcdcmd(0xB8+i);
                           1163 ;	genAssign
   01E6 90s00r02           1164 	mov	dptr,#_i
   01E9 E0                 1165 	movx	a,@dptr
   01EA FA                 1166 	mov	r2,a
   01EB A3                 1167 	inc	dptr
   01EC E0                 1168 	movx	a,@dptr
   01ED FB                 1169 	mov	r3,a
                           1170 ;	genCast
                           1171 ;	genPlus
                           1172 ;     genPlusIncr
   01EE 74 B8              1173 	mov	a,#0xB8
                           1174 ;	Peephole 236.a	used r2 instead of ar2
   01F0 2A                 1175 	add	a,r2
                           1176 ;	genCall
   01F1 FA                 1177 	mov	r2,a
                           1178 ;	Peephole 244.c	loading dpl from a instead of r2
   01F2 F5 82              1179 	mov	dpl,a
   01F4 12s00rAE           1180 	lcall	_lcdcmd
                           1181 ;	main.c:249: for(i=1;i<9;i++)
                           1182 ;	genAssign
   01F7 90s00r02           1183 	mov	dptr,#_i
   01FA E0                 1184 	movx	a,@dptr
   01FB FA                 1185 	mov	r2,a
   01FC A3                 1186 	inc	dptr
   01FD E0                 1187 	movx	a,@dptr
   01FE FB                 1188 	mov	r3,a
                           1189 ;	genPlus
   01FF 90s00r02           1190 	mov	dptr,#_i
                           1191 ;     genPlusIncr
   0202 74 01              1192 	mov	a,#0x01
                           1193 ;	Peephole 236.a	used r2 instead of ar2
   0204 2A                 1194 	add	a,r2
   0205 F0                 1195 	movx	@dptr,a
                           1196 ;	Peephole 181	changed mov to clr
   0206 E4                 1197 	clr	a
                           1198 ;	Peephole 236.b	used r3 instead of ar3
   0207 3B                 1199 	addc	a,r3
   0208 A3                 1200 	inc	dptr
   0209 F0                 1201 	movx	@dptr,a
                           1202 ;	Peephole 112.b	changed ljmp to sjmp
   020A 80 92              1203 	sjmp	00113$
   020C                    1204 00117$:
   020C 22                 1205 	ret
                           1206 ;------------------------------------------------------------
                           1207 ;Allocation info for local variables in function 'main'
                           1208 ;------------------------------------------------------------
                           1209 ;------------------------------------------------------------
                           1210 ;	main.c:258: void main(void)
                           1211 ;	-----------------------------------------
                           1212 ;	 function main
                           1213 ;	-----------------------------------------
   020D                    1214 _main:
                           1215 ;	main.c:260: lcd_init();
                           1216 ;	genCall
   020D 12s00rE4           1217 	lcall	_lcd_init
                           1218 ;	main.c:263: cs1=1;
                           1219 ;	genAssign
   0210 D2 95              1220 	setb	_P1_5
                           1221 ;	main.c:264: cs2=0;
                           1222 ;	genAssign
   0212 C2 94              1223 	clr	_P1_4
                           1224 ;	main.c:265: lcdcmd(0x3F);    //Display on
                           1225 ;	genCall
   0214 75 82 3F           1226 	mov	dpl,#0x3F
   0217 12s00rAE           1227 	lcall	_lcdcmd
                           1228 ;	main.c:266: while(1)
   021A                    1229 00111$:
                           1230 ;	main.c:268: next_block=3;
                           1231 ;	genAssign
   021A 90s00r0C           1232 	mov	dptr,#_next_block
   021D 74 03              1233 	mov	a,#0x03
   021F F0                 1234 	movx	@dptr,a
   0220 E4                 1235 	clr	a
   0221 A3                 1236 	inc	dptr
   0222 F0                 1237 	movx	@dptr,a
                           1238 ;	main.c:271: lcdcmd(0x3F);    //Display on
                           1239 ;	genCall
   0223 75 82 3F           1240 	mov	dpl,#0x3F
   0226 12s00rAE           1241 	lcall	_lcdcmd
                           1242 ;	main.c:272: cs1=1;
                           1243 ;	genAssign
   0229 D2 95              1244 	setb	_P1_5
                           1245 ;	main.c:273: cs2=0;
                           1246 ;	genAssign
   022B C2 94              1247 	clr	_P1_4
                           1248 ;	main.c:275: for(chip=0;chip<2;chip++)
                           1249 ;	genAssign
   022D 90s00r0A           1250 	mov	dptr,#_chip
   0230 E4                 1251 	clr	a
   0231 F0                 1252 	movx	@dptr,a
   0232 A3                 1253 	inc	dptr
   0233 F0                 1254 	movx	@dptr,a
   0234                    1255 00129$:
                           1256 ;	genAssign
   0234 90s00r0A           1257 	mov	dptr,#_chip
   0237 E0                 1258 	movx	a,@dptr
   0238 FA                 1259 	mov	r2,a
   0239 A3                 1260 	inc	dptr
   023A E0                 1261 	movx	a,@dptr
   023B FB                 1262 	mov	r3,a
                           1263 ;	genCmpLt
                           1264 ;	genCmp
   023C C3                 1265 	clr	c
   023D EA                 1266 	mov	a,r2
   023E 94 02              1267 	subb	a,#0x02
   0240 EB                 1268 	mov	a,r3
   0241 64 80              1269 	xrl	a,#0x80
   0243 94 80              1270 	subb	a,#0x80
                           1271 ;	genIfxJump
   0245 40 03              1272 	jc	00174$
   0247 02s04r9D           1273 	ljmp	00132$
   024A                    1274 00174$:
                           1275 ;	main.c:277: for(k=0x7F;k>=0x40;k=k-8)
                           1276 ;	genAssign
   024A 90s00r06           1277 	mov	dptr,#_k
   024D 74 7F              1278 	mov	a,#0x7F
   024F F0                 1279 	movx	@dptr,a
   0250 E4                 1280 	clr	a
   0251 A3                 1281 	inc	dptr
   0252 F0                 1282 	movx	@dptr,a
   0253                    1283 00125$:
                           1284 ;	genAssign
   0253 90s00r06           1285 	mov	dptr,#_k
   0256 E0                 1286 	movx	a,@dptr
   0257 FA                 1287 	mov	r2,a
   0258 A3                 1288 	inc	dptr
   0259 E0                 1289 	movx	a,@dptr
   025A FB                 1290 	mov	r3,a
                           1291 ;	genCmpLt
                           1292 ;	genCmp
   025B C3                 1293 	clr	c
   025C EA                 1294 	mov	a,r2
   025D 94 40              1295 	subb	a,#0x40
   025F EB                 1296 	mov	a,r3
   0260 64 80              1297 	xrl	a,#0x80
   0262 94 80              1298 	subb	a,#0x80
                           1299 ;	genIfxJump
   0264 50 03              1300 	jnc	00175$
   0266 02s04r72           1301 	ljmp	00128$
   0269                    1302 00175$:
                           1303 ;	main.c:279: for(j=0xBD;j>=0xBA;j--)     //Individual colum part
                           1304 ;	genAssign
   0269 90s00r04           1305 	mov	dptr,#_j
   026C 74 BD              1306 	mov	a,#0xBD
   026E F0                 1307 	movx	@dptr,a
   026F E4                 1308 	clr	a
   0270 A3                 1309 	inc	dptr
   0271 F0                 1310 	movx	@dptr,a
   0272                    1311 00113$:
                           1312 ;	genAssign
   0272 90s00r04           1313 	mov	dptr,#_j
   0275 E0                 1314 	movx	a,@dptr
   0276 FA                 1315 	mov	r2,a
   0277 A3                 1316 	inc	dptr
   0278 E0                 1317 	movx	a,@dptr
   0279 FB                 1318 	mov	r3,a
                           1319 ;	genCmpLt
                           1320 ;	genCmp
   027A C3                 1321 	clr	c
   027B EA                 1322 	mov	a,r2
   027C 94 BA              1323 	subb	a,#0xBA
   027E EB                 1324 	mov	a,r3
   027F 64 80              1325 	xrl	a,#0x80
   0281 94 80              1326 	subb	a,#0x80
                           1327 ;	genIfxJump
   0283 50 03              1328 	jnc	00176$
   0285 02s03r82           1329 	ljmp	00116$
   0288                    1330 00176$:
                           1331 ;	main.c:281: lcdcmd(j);
                           1332 ;	genCast
                           1333 ;	genCall
   0288 8A 82              1334 	mov	dpl,r2
   028A 12s00rAE           1335 	lcall	_lcdcmd
                           1336 ;	main.c:282: for(i=k;i>=k-15;i--)        //ROWS part- writing done column by column
                           1337 ;	genAssign
   028D 90s00r06           1338 	mov	dptr,#_k
   0290 E0                 1339 	movx	a,@dptr
   0291 FA                 1340 	mov	r2,a
   0292 A3                 1341 	inc	dptr
   0293 E0                 1342 	movx	a,@dptr
   0294 FB                 1343 	mov	r3,a
                           1344 ;	genAssign
   0295 90s00r02           1345 	mov	dptr,#_i
   0298 EA                 1346 	mov	a,r2
   0299 F0                 1347 	movx	@dptr,a
   029A A3                 1348 	inc	dptr
   029B EB                 1349 	mov	a,r3
   029C F0                 1350 	movx	@dptr,a
   029D                    1351 00104$:
                           1352 ;	genAssign
   029D 90s00r06           1353 	mov	dptr,#_k
   02A0 E0                 1354 	movx	a,@dptr
   02A1 FA                 1355 	mov	r2,a
   02A2 A3                 1356 	inc	dptr
   02A3 E0                 1357 	movx	a,@dptr
   02A4 FB                 1358 	mov	r3,a
                           1359 ;	genMinus
   02A5 EA                 1360 	mov	a,r2
   02A6 24 F1              1361 	add	a,#0xf1
   02A8 FA                 1362 	mov	r2,a
   02A9 EB                 1363 	mov	a,r3
   02AA 34 FF              1364 	addc	a,#0xff
   02AC FB                 1365 	mov	r3,a
                           1366 ;	genAssign
   02AD 90s00r02           1367 	mov	dptr,#_i
   02B0 E0                 1368 	movx	a,@dptr
   02B1 FC                 1369 	mov	r4,a
   02B2 A3                 1370 	inc	dptr
   02B3 E0                 1371 	movx	a,@dptr
   02B4 FD                 1372 	mov	r5,a
                           1373 ;	genCmpLt
                           1374 ;	genCmp
   02B5 C3                 1375 	clr	c
   02B6 EC                 1376 	mov	a,r4
   02B7 9A                 1377 	subb	a,r2
   02B8 ED                 1378 	mov	a,r5
   02B9 64 80              1379 	xrl	a,#0x80
   02BB 8B F0              1380 	mov	b,r3
   02BD 63 F0 80           1381 	xrl	b,#0x80
   02C0 95 F0              1382 	subb	a,b
                           1383 ;	genIfxJump
   02C2 50 03              1384 	jnc	00177$
   02C4 02s03r64           1385 	ljmp	00107$
   02C7                    1386 00177$:
                           1387 ;	main.c:284: lcdcmd(i);
                           1388 ;	genCast
                           1389 ;	genCall
   02C7 8C 82              1390 	mov	dpl,r4
   02C9 12s00rAE           1391 	lcall	_lcdcmd
                           1392 ;	main.c:285: if(!(block[next_block][k-i][0xBD-j]))
                           1393 ;	genAssign
   02CC 90s00r0C           1394 	mov	dptr,#_next_block
   02CF E0                 1395 	movx	a,@dptr
   02D0 FA                 1396 	mov	r2,a
   02D1 A3                 1397 	inc	dptr
   02D2 E0                 1398 	movx	a,@dptr
                           1399 ;	genLeftShift
                           1400 ;	genLeftShiftLiteral
                           1401 ;	genlshTwo
   02D3 FB                 1402 	mov	r3,a
                           1403 ;	Peephole 105	removed redundant mov
   02D4 54 03              1404 	anl	a,#0x03
   02D6 A2 E0              1405 	mov	c,acc.0
   02D8 CA                 1406 	xch	a,r2
   02D9 13                 1407 	rrc	a
   02DA CA                 1408 	xch	a,r2
   02DB 13                 1409 	rrc	a
   02DC A2 E0              1410 	mov	c,acc.0
   02DE CA                 1411 	xch	a,r2
   02DF 13                 1412 	rrc	a
   02E0 CA                 1413 	xch	a,r2
   02E1 13                 1414 	rrc	a
   02E2 CA                 1415 	xch	a,r2
   02E3 FB                 1416 	mov	r3,a
                           1417 ;	genPlus
                           1418 ;	Peephole 236.g	used r2 instead of ar2
   02E4 EA                 1419 	mov	a,r2
   02E5 24r00              1420 	add	a,#_block
   02E7 FC                 1421 	mov	r4,a
                           1422 ;	Peephole 236.g	used r3 instead of ar3
   02E8 EB                 1423 	mov	a,r3
   02E9 34s00              1424 	addc	a,#(_block >> 8)
   02EB FD                 1425 	mov	r5,a
                           1426 ;	genAssign
   02EC 90s00r06           1427 	mov	dptr,#_k
   02EF E0                 1428 	movx	a,@dptr
   02F0 FE                 1429 	mov	r6,a
   02F1 A3                 1430 	inc	dptr
   02F2 E0                 1431 	movx	a,@dptr
   02F3 FF                 1432 	mov	r7,a
                           1433 ;	genCast
                           1434 ;	genAssign
   02F4 90s00r02           1435 	mov	dptr,#_i
   02F7 E0                 1436 	movx	a,@dptr
   02F8 FF                 1437 	mov	r7,a
   02F9 A3                 1438 	inc	dptr
   02FA E0                 1439 	movx	a,@dptr
   02FB F8                 1440 	mov	r0,a
                           1441 ;	genCast
                           1442 ;	genMinus
   02FC EE                 1443 	mov	a,r6
   02FD C3                 1444 	clr	c
                           1445 ;	Peephole 236.l	used r7 instead of ar7
   02FE 9F                 1446 	subb	a,r7
                           1447 ;	genLeftShift
                           1448 ;	genLeftShiftLiteral
                           1449 ;	genlshOne
   02FF F8                 1450 	mov	r0,a
                           1451 ;	Peephole 105	removed redundant mov
   0300 25 E0              1452 	add	a,acc
   0302 25 E0              1453 	add	a,acc
                           1454 ;	genPlus
   0304 F8                 1455 	mov	r0,a
                           1456 ;	Peephole 177.b	removed redundant mov
                           1457 ;	Peephole 236.a	used r4 instead of ar4
   0305 2C                 1458 	add	a,r4
   0306 FC                 1459 	mov	r4,a
                           1460 ;	Peephole 181	changed mov to clr
   0307 E4                 1461 	clr	a
                           1462 ;	Peephole 236.b	used r5 instead of ar5
   0308 3D                 1463 	addc	a,r5
   0309 FD                 1464 	mov	r5,a
                           1465 ;	genAssign
   030A 90s00r04           1466 	mov	dptr,#_j
   030D E0                 1467 	movx	a,@dptr
   030E F8                 1468 	mov	r0,a
   030F A3                 1469 	inc	dptr
   0310 E0                 1470 	movx	a,@dptr
   0311 F9                 1471 	mov	r1,a
                           1472 ;	genCast
                           1473 ;	genMinus
   0312 74 BD              1474 	mov	a,#0xBD
   0314 C3                 1475 	clr	c
                           1476 ;	Peephole 236.l	used r0 instead of ar0
   0315 98                 1477 	subb	a,r0
                           1478 ;	genPlus
                           1479 ;	Peephole 236.a	used r4 instead of ar4
   0316 2C                 1480 	add	a,r4
   0317 FC                 1481 	mov	r4,a
                           1482 ;	Peephole 236.g	used r5 instead of ar5
                           1483 ;	Peephole 240	use clr instead of addc a,#0
   0318 E4                 1484 	clr	a
   0319 3D                 1485 	addc	a,r5
   031A FD                 1486 	mov	r5,a
                           1487 ;	genPointerGet
                           1488 ;	genCodePointerGet
   031B 8C 82              1489 	mov	dpl,r4
   031D 8D 83              1490 	mov	dph,r5
   031F E4                 1491 	clr	a
   0320 93                 1492 	movc	a,@a+dptr
                           1493 ;	genIfxJump
                           1494 ;	Peephole 108.c	removed ljmp by inverse jump logic
   0321 60 29              1495 	jz	00106$
                           1496 ;	Peephole 300	removed redundant label 00178$
                           1497 ;	main.c:288: lcddata_b(block[next_block][k-i][0xBD-j]);
                           1498 ;	genPlus
                           1499 ;	Peephole 236.g	used r2 instead of ar2
   0323 EA                 1500 	mov	a,r2
   0324 24r00              1501 	add	a,#_block
   0326 FA                 1502 	mov	r2,a
                           1503 ;	Peephole 236.g	used r3 instead of ar3
   0327 EB                 1504 	mov	a,r3
   0328 34s00              1505 	addc	a,#(_block >> 8)
   032A FB                 1506 	mov	r3,a
                           1507 ;	genMinus
   032B EE                 1508 	mov	a,r6
   032C C3                 1509 	clr	c
                           1510 ;	Peephole 236.l	used r7 instead of ar7
   032D 9F                 1511 	subb	a,r7
                           1512 ;	genLeftShift
                           1513 ;	genLeftShiftLiteral
                           1514 ;	genlshOne
   032E FE                 1515 	mov	r6,a
                           1516 ;	Peephole 105	removed redundant mov
   032F 25 E0              1517 	add	a,acc
   0331 25 E0              1518 	add	a,acc
                           1519 ;	genPlus
   0333 FE                 1520 	mov	r6,a
                           1521 ;	Peephole 177.b	removed redundant mov
                           1522 ;	Peephole 236.a	used r2 instead of ar2
   0334 2A                 1523 	add	a,r2
   0335 FA                 1524 	mov	r2,a
                           1525 ;	Peephole 181	changed mov to clr
   0336 E4                 1526 	clr	a
                           1527 ;	Peephole 236.b	used r3 instead of ar3
   0337 3B                 1528 	addc	a,r3
   0338 FB                 1529 	mov	r3,a
                           1530 ;	genMinus
   0339 74 BD              1531 	mov	a,#0xBD
   033B C3                 1532 	clr	c
                           1533 ;	Peephole 236.l	used r0 instead of ar0
   033C 98                 1534 	subb	a,r0
                           1535 ;	genPlus
                           1536 ;	Peephole 236.a	used r2 instead of ar2
   033D 2A                 1537 	add	a,r2
   033E F5 82              1538 	mov	dpl,a
                           1539 ;	Peephole 236.g	used r3 instead of ar3
                           1540 ;	Peephole 240	use clr instead of addc a,#0
   0340 E4                 1541 	clr	a
   0341 3B                 1542 	addc	a,r3
   0342 F5 83              1543 	mov	dph,a
                           1544 ;	genPointerGet
                           1545 ;	genCodePointerGet
   0344 E4                 1546 	clr	a
   0345 93                 1547 	movc	a,@a+dptr
                           1548 ;	genCall
   0346 FA                 1549 	mov	r2,a
                           1550 ;	Peephole 244.c	loading dpl from a instead of r2
   0347 F5 82              1551 	mov	dpl,a
   0349 12s00rC9           1552 	lcall	_lcddata_b
   034C                    1553 00106$:
                           1554 ;	main.c:282: for(i=k;i>=k-15;i--)        //ROWS part- writing done column by column
                           1555 ;	genAssign
   034C 90s00r02           1556 	mov	dptr,#_i
   034F E0                 1557 	movx	a,@dptr
   0350 FA                 1558 	mov	r2,a
   0351 A3                 1559 	inc	dptr
   0352 E0                 1560 	movx	a,@dptr
   0353 FB                 1561 	mov	r3,a
                           1562 ;	genMinus
                           1563 ;	genMinusDec
   0354 1A                 1564 	dec	r2
   0355 BA FF 01           1565 	cjne	r2,#0xff,00179$
   0358 1B                 1566 	dec	r3
   0359                    1567 00179$:
                           1568 ;	genAssign
   0359 90s00r02           1569 	mov	dptr,#_i
   035C EA                 1570 	mov	a,r2
   035D F0                 1571 	movx	@dptr,a
   035E A3                 1572 	inc	dptr
   035F EB                 1573 	mov	a,r3
   0360 F0                 1574 	movx	@dptr,a
   0361 02s02r9D           1575 	ljmp	00104$
   0364                    1576 00107$:
                           1577 ;	main.c:290: delay(50);
                           1578 ;	genCall
                           1579 ;	Peephole 182.b	used 16 bit load of dptr
   0364 90 00 32           1580 	mov	dptr,#0x0032
   0367 12s00r05           1581 	lcall	_delay
                           1582 ;	main.c:279: for(j=0xBD;j>=0xBA;j--)     //Individual colum part
                           1583 ;	genAssign
   036A 90s00r04           1584 	mov	dptr,#_j
   036D E0                 1585 	movx	a,@dptr
   036E FA                 1586 	mov	r2,a
   036F A3                 1587 	inc	dptr
   0370 E0                 1588 	movx	a,@dptr
   0371 FB                 1589 	mov	r3,a
                           1590 ;	genMinus
                           1591 ;	genMinusDec
   0372 1A                 1592 	dec	r2
   0373 BA FF 01           1593 	cjne	r2,#0xff,00180$
   0376 1B                 1594 	dec	r3
   0377                    1595 00180$:
                           1596 ;	genAssign
   0377 90s00r04           1597 	mov	dptr,#_j
   037A EA                 1598 	mov	a,r2
   037B F0                 1599 	movx	@dptr,a
   037C A3                 1600 	inc	dptr
   037D EB                 1601 	mov	a,r3
   037E F0                 1602 	movx	@dptr,a
   037F 02s02r72           1603 	ljmp	00113$
   0382                    1604 00116$:
                           1605 ;	main.c:292: delay(2000);
                           1606 ;	genCall
                           1607 ;	Peephole 182.b	used 16 bit load of dptr
   0382 90 07 D0           1608 	mov	dptr,#0x07D0
   0385 12s00r05           1609 	lcall	_delay
                           1610 ;	main.c:294: for(j=0xBD;j>=0xBA;j--)
                           1611 ;	genAssign
   0388 90s00r04           1612 	mov	dptr,#_j
   038B 74 BD              1613 	mov	a,#0xBD
   038D F0                 1614 	movx	@dptr,a
   038E E4                 1615 	clr	a
   038F A3                 1616 	inc	dptr
   0390 F0                 1617 	movx	@dptr,a
   0391                    1618 00121$:
                           1619 ;	genAssign
   0391 90s00r04           1620 	mov	dptr,#_j
   0394 E0                 1621 	movx	a,@dptr
   0395 FA                 1622 	mov	r2,a
   0396 A3                 1623 	inc	dptr
   0397 E0                 1624 	movx	a,@dptr
   0398 FB                 1625 	mov	r3,a
                           1626 ;	genCmpLt
                           1627 ;	genCmp
   0399 C3                 1628 	clr	c
   039A EA                 1629 	mov	a,r2
   039B 94 BA              1630 	subb	a,#0xBA
   039D EB                 1631 	mov	a,r3
   039E 64 80              1632 	xrl	a,#0x80
   03A0 94 80              1633 	subb	a,#0x80
                           1634 ;	genIfxJump
   03A2 50 03              1635 	jnc	00181$
   03A4 02s04r57           1636 	ljmp	00127$
   03A7                    1637 00181$:
                           1638 ;	main.c:296: lcdcmd(j);
                           1639 ;	genCast
                           1640 ;	genCall
   03A7 8A 82              1641 	mov	dpl,r2
   03A9 12s00rAE           1642 	lcall	_lcdcmd
                           1643 ;	main.c:297: for(i=k;i>=k-15;i--)
                           1644 ;	genAssign
   03AC 90s00r06           1645 	mov	dptr,#_k
   03AF E0                 1646 	movx	a,@dptr
   03B0 FA                 1647 	mov	r2,a
   03B1 A3                 1648 	inc	dptr
   03B2 E0                 1649 	movx	a,@dptr
   03B3 FB                 1650 	mov	r3,a
                           1651 ;	genAssign
   03B4 90s00r02           1652 	mov	dptr,#_i
   03B7 EA                 1653 	mov	a,r2
   03B8 F0                 1654 	movx	@dptr,a
   03B9 A3                 1655 	inc	dptr
   03BA EB                 1656 	mov	a,r3
   03BB F0                 1657 	movx	@dptr,a
   03BC                    1658 00117$:
                           1659 ;	genAssign
   03BC 90s00r06           1660 	mov	dptr,#_k
   03BF E0                 1661 	movx	a,@dptr
   03C0 FA                 1662 	mov	r2,a
   03C1 A3                 1663 	inc	dptr
   03C2 E0                 1664 	movx	a,@dptr
   03C3 FB                 1665 	mov	r3,a
                           1666 ;	genMinus
   03C4 EA                 1667 	mov	a,r2
   03C5 24 F1              1668 	add	a,#0xf1
   03C7 FA                 1669 	mov	r2,a
   03C8 EB                 1670 	mov	a,r3
   03C9 34 FF              1671 	addc	a,#0xff
   03CB FB                 1672 	mov	r3,a
                           1673 ;	genAssign
   03CC 90s00r02           1674 	mov	dptr,#_i
   03CF E0                 1675 	movx	a,@dptr
   03D0 FC                 1676 	mov	r4,a
   03D1 A3                 1677 	inc	dptr
   03D2 E0                 1678 	movx	a,@dptr
   03D3 FD                 1679 	mov	r5,a
                           1680 ;	genCmpLt
                           1681 ;	genCmp
   03D4 C3                 1682 	clr	c
   03D5 EC                 1683 	mov	a,r4
   03D6 9A                 1684 	subb	a,r2
   03D7 ED                 1685 	mov	a,r5
   03D8 64 80              1686 	xrl	a,#0x80
   03DA 8B F0              1687 	mov	b,r3
   03DC 63 F0 80           1688 	xrl	b,#0x80
   03DF 95 F0              1689 	subb	a,b
                           1690 ;	genIfxJump
                           1691 ;	Peephole 112.b	changed ljmp to sjmp
                           1692 ;	Peephole 160.a	removed sjmp by inverse jump logic
   03E1 40 56              1693 	jc	00120$
                           1694 ;	Peephole 300	removed redundant label 00182$
                           1695 ;	main.c:299: lcdcmd(i);
                           1696 ;	genCast
                           1697 ;	genCall
   03E3 8C 82              1698 	mov	dpl,r4
   03E5 12s00rAE           1699 	lcall	_lcdcmd
                           1700 ;	main.c:300: lcddata_b(block[0][k-i][0xBD-j]);
                           1701 ;	genAssign
   03E8 90s00r06           1702 	mov	dptr,#_k
   03EB E0                 1703 	movx	a,@dptr
   03EC FA                 1704 	mov	r2,a
   03ED A3                 1705 	inc	dptr
   03EE E0                 1706 	movx	a,@dptr
   03EF FB                 1707 	mov	r3,a
                           1708 ;	genCast
                           1709 ;	genAssign
   03F0 90s00r02           1710 	mov	dptr,#_i
   03F3 E0                 1711 	movx	a,@dptr
   03F4 FB                 1712 	mov	r3,a
   03F5 A3                 1713 	inc	dptr
   03F6 E0                 1714 	movx	a,@dptr
   03F7 FC                 1715 	mov	r4,a
                           1716 ;	genCast
                           1717 ;	genMinus
   03F8 EA                 1718 	mov	a,r2
   03F9 C3                 1719 	clr	c
                           1720 ;	Peephole 236.l	used r3 instead of ar3
   03FA 9B                 1721 	subb	a,r3
                           1722 ;	genLeftShift
                           1723 ;	genLeftShiftLiteral
                           1724 ;	genlshOne
   03FB FA                 1725 	mov	r2,a
                           1726 ;	Peephole 105	removed redundant mov
   03FC 25 E0              1727 	add	a,acc
   03FE 25 E0              1728 	add	a,acc
                           1729 ;	genPlus
                           1730 ;	Peephole 177.b	removed redundant mov
                           1731 ;	Peephole 215	removed some moves
   0400 24r00              1732 	add	a,#_block
   0402 FA                 1733 	mov	r2,a
                           1734 ;	Peephole 181	changed mov to clr
   0403 E4                 1735 	clr	a
   0404 34s00              1736 	addc	a,#(_block >> 8)
   0406 FB                 1737 	mov	r3,a
                           1738 ;	genAssign
   0407 90s00r04           1739 	mov	dptr,#_j
   040A E0                 1740 	movx	a,@dptr
   040B FC                 1741 	mov	r4,a
   040C A3                 1742 	inc	dptr
   040D E0                 1743 	movx	a,@dptr
   040E FD                 1744 	mov	r5,a
                           1745 ;	genCast
                           1746 ;	genMinus
   040F 74 BD              1747 	mov	a,#0xBD
   0411 C3                 1748 	clr	c
                           1749 ;	Peephole 236.l	used r4 instead of ar4
   0412 9C                 1750 	subb	a,r4
                           1751 ;	genPlus
                           1752 ;	Peephole 236.a	used r2 instead of ar2
   0413 2A                 1753 	add	a,r2
   0414 F5 82              1754 	mov	dpl,a
                           1755 ;	Peephole 236.g	used r3 instead of ar3
                           1756 ;	Peephole 240	use clr instead of addc a,#0
   0416 E4                 1757 	clr	a
   0417 3B                 1758 	addc	a,r3
   0418 F5 83              1759 	mov	dph,a
                           1760 ;	genPointerGet
                           1761 ;	genCodePointerGet
   041A E4                 1762 	clr	a
   041B 93                 1763 	movc	a,@a+dptr
                           1764 ;	genCall
   041C FA                 1765 	mov	r2,a
                           1766 ;	Peephole 244.c	loading dpl from a instead of r2
   041D F5 82              1767 	mov	dpl,a
   041F 12s00rC9           1768 	lcall	_lcddata_b
                           1769 ;	main.c:297: for(i=k;i>=k-15;i--)
                           1770 ;	genAssign
   0422 90s00r02           1771 	mov	dptr,#_i
   0425 E0                 1772 	movx	a,@dptr
   0426 FA                 1773 	mov	r2,a
   0427 A3                 1774 	inc	dptr
   0428 E0                 1775 	movx	a,@dptr
   0429 FB                 1776 	mov	r3,a
                           1777 ;	genMinus
                           1778 ;	genMinusDec
   042A 1A                 1779 	dec	r2
   042B BA FF 01           1780 	cjne	r2,#0xff,00183$
   042E 1B                 1781 	dec	r3
   042F                    1782 00183$:
                           1783 ;	genAssign
   042F 90s00r02           1784 	mov	dptr,#_i
   0432 EA                 1785 	mov	a,r2
   0433 F0                 1786 	movx	@dptr,a
   0434 A3                 1787 	inc	dptr
   0435 EB                 1788 	mov	a,r3
   0436 F0                 1789 	movx	@dptr,a
                           1790 ;	Peephole 112.b	changed ljmp to sjmp
   0437 80 83              1791 	sjmp	00117$
   0439                    1792 00120$:
                           1793 ;	main.c:302: delay(50);
                           1794 ;	genCall
                           1795 ;	Peephole 182.b	used 16 bit load of dptr
   0439 90 00 32           1796 	mov	dptr,#0x0032
   043C 12s00r05           1797 	lcall	_delay
                           1798 ;	main.c:294: for(j=0xBD;j>=0xBA;j--)
                           1799 ;	genAssign
   043F 90s00r04           1800 	mov	dptr,#_j
   0442 E0                 1801 	movx	a,@dptr
   0443 FA                 1802 	mov	r2,a
   0444 A3                 1803 	inc	dptr
   0445 E0                 1804 	movx	a,@dptr
   0446 FB                 1805 	mov	r3,a
                           1806 ;	genMinus
                           1807 ;	genMinusDec
   0447 1A                 1808 	dec	r2
   0448 BA FF 01           1809 	cjne	r2,#0xff,00184$
   044B 1B                 1810 	dec	r3
   044C                    1811 00184$:
                           1812 ;	genAssign
   044C 90s00r04           1813 	mov	dptr,#_j
   044F EA                 1814 	mov	a,r2
   0450 F0                 1815 	movx	@dptr,a
   0451 A3                 1816 	inc	dptr
   0452 EB                 1817 	mov	a,r3
   0453 F0                 1818 	movx	@dptr,a
   0454 02s03r91           1819 	ljmp	00121$
   0457                    1820 00127$:
                           1821 ;	main.c:277: for(k=0x7F;k>=0x40;k=k-8)
                           1822 ;	genAssign
   0457 90s00r06           1823 	mov	dptr,#_k
   045A E0                 1824 	movx	a,@dptr
   045B FA                 1825 	mov	r2,a
   045C A3                 1826 	inc	dptr
   045D E0                 1827 	movx	a,@dptr
   045E FB                 1828 	mov	r3,a
                           1829 ;	genMinus
   045F EA                 1830 	mov	a,r2
   0460 24 F8              1831 	add	a,#0xf8
   0462 FA                 1832 	mov	r2,a
   0463 EB                 1833 	mov	a,r3
   0464 34 FF              1834 	addc	a,#0xff
   0466 FB                 1835 	mov	r3,a
                           1836 ;	genAssign
   0467 90s00r06           1837 	mov	dptr,#_k
   046A EA                 1838 	mov	a,r2
   046B F0                 1839 	movx	@dptr,a
   046C A3                 1840 	inc	dptr
   046D EB                 1841 	mov	a,r3
   046E F0                 1842 	movx	@dptr,a
   046F 02s02r53           1843 	ljmp	00125$
   0472                    1844 00128$:
                           1845 ;	main.c:317: if(chip==0)
                           1846 ;	genAssign
   0472 90s00r0A           1847 	mov	dptr,#_chip
   0475 E0                 1848 	movx	a,@dptr
   0476 FA                 1849 	mov	r2,a
   0477 A3                 1850 	inc	dptr
   0478 E0                 1851 	movx	a,@dptr
                           1852 ;	genIfx
   0479 FB                 1853 	mov	r3,a
                           1854 ;	Peephole 135	removed redundant mov
   047A 4A                 1855 	orl	a,r2
                           1856 ;	genIfxJump
                           1857 ;	Peephole 108.b	removed ljmp by inverse jump logic
   047B 70 0A              1858 	jnz	00131$
                           1859 ;	Peephole 300	removed redundant label 00185$
                           1860 ;	main.c:319: lcdcmd(0x3F);    //Display on
                           1861 ;	genCall
   047D 75 82 3F           1862 	mov	dpl,#0x3F
   0480 12s00rAE           1863 	lcall	_lcdcmd
                           1864 ;	main.c:320: cs1=0;
                           1865 ;	genAssign
   0483 C2 95              1866 	clr	_P1_5
                           1867 ;	main.c:321: cs2=1;
                           1868 ;	genAssign
   0485 D2 94              1869 	setb	_P1_4
   0487                    1870 00131$:
                           1871 ;	main.c:275: for(chip=0;chip<2;chip++)
                           1872 ;	genAssign
   0487 90s00r0A           1873 	mov	dptr,#_chip
   048A E0                 1874 	movx	a,@dptr
   048B FA                 1875 	mov	r2,a
   048C A3                 1876 	inc	dptr
   048D E0                 1877 	movx	a,@dptr
   048E FB                 1878 	mov	r3,a
                           1879 ;	genPlus
   048F 90s00r0A           1880 	mov	dptr,#_chip
                           1881 ;     genPlusIncr
   0492 74 01              1882 	mov	a,#0x01
                           1883 ;	Peephole 236.a	used r2 instead of ar2
   0494 2A                 1884 	add	a,r2
   0495 F0                 1885 	movx	@dptr,a
                           1886 ;	Peephole 181	changed mov to clr
   0496 E4                 1887 	clr	a
                           1888 ;	Peephole 236.b	used r3 instead of ar3
   0497 3B                 1889 	addc	a,r3
   0498 A3                 1890 	inc	dptr
   0499 F0                 1891 	movx	@dptr,a
   049A 02s02r34           1892 	ljmp	00129$
   049D                    1893 00132$:
                           1894 ;	main.c:326: for(j=0;j<16;j++)              //Copy the rows--Copying done row by row(entire row first
                           1895 ;	genAssign
   049D 90s00r04           1896 	mov	dptr,#_j
   04A0 E4                 1897 	clr	a
   04A1 F0                 1898 	movx	@dptr,a
   04A2 A3                 1899 	inc	dptr
   04A3 F0                 1900 	movx	@dptr,a
   04A4                    1901 00137$:
                           1902 ;	genAssign
   04A4 90s00r04           1903 	mov	dptr,#_j
   04A7 E0                 1904 	movx	a,@dptr
   04A8 FA                 1905 	mov	r2,a
   04A9 A3                 1906 	inc	dptr
   04AA E0                 1907 	movx	a,@dptr
   04AB FB                 1908 	mov	r3,a
                           1909 ;	genCmpLt
                           1910 ;	genCmp
   04AC C3                 1911 	clr	c
   04AD EA                 1912 	mov	a,r2
   04AE 94 10              1913 	subb	a,#0x10
   04B0 EB                 1914 	mov	a,r3
   04B1 64 80              1915 	xrl	a,#0x80
   04B3 94 80              1916 	subb	a,#0x80
                           1917 ;	genIfxJump
   04B5 40 03              1918 	jc	00186$
   04B7 02s05r4E           1919 	ljmp	00140$
   04BA                    1920 00186$:
                           1921 ;	main.c:328: for(i=0;i<4;i++)        //Copy the columns in the rows
                           1922 ;	genAssign
   04BA 90s00r02           1923 	mov	dptr,#_i
   04BD E4                 1924 	clr	a
   04BE F0                 1925 	movx	@dptr,a
   04BF A3                 1926 	inc	dptr
   04C0 F0                 1927 	movx	@dptr,a
   04C1                    1928 00133$:
                           1929 ;	genAssign
   04C1 90s00r02           1930 	mov	dptr,#_i
   04C4 E0                 1931 	movx	a,@dptr
   04C5 FA                 1932 	mov	r2,a
   04C6 A3                 1933 	inc	dptr
   04C7 E0                 1934 	movx	a,@dptr
   04C8 FB                 1935 	mov	r3,a
                           1936 ;	genCmpLt
                           1937 ;	genCmp
   04C9 C3                 1938 	clr	c
   04CA EA                 1939 	mov	a,r2
   04CB 94 04              1940 	subb	a,#0x04
   04CD EB                 1941 	mov	a,r3
   04CE 64 80              1942 	xrl	a,#0x80
   04D0 94 80              1943 	subb	a,#0x80
                           1944 ;	genIfxJump
                           1945 ;	Peephole 108.a	removed ljmp by inverse jump logic
   04D2 50 64              1946 	jnc	00139$
                           1947 ;	Peephole 300	removed redundant label 00187$
                           1948 ;	main.c:330: fixed_blocks[j][i]=block[next_block][j][i];
                           1949 ;	genAssign
   04D4 90s00r04           1950 	mov	dptr,#_j
   04D7 E0                 1951 	movx	a,@dptr
   04D8 FC                 1952 	mov	r4,a
   04D9 A3                 1953 	inc	dptr
   04DA E0                 1954 	movx	a,@dptr
                           1955 ;	genLeftShift
                           1956 ;	genLeftShiftLiteral
                           1957 ;	genlshTwo
   04DB FD                 1958 	mov	r5,a
                           1959 ;	Peephole 105	removed redundant mov
   04DC CC                 1960 	xch	a,r4
   04DD 25 E0              1961 	add	a,acc
   04DF CC                 1962 	xch	a,r4
   04E0 33                 1963 	rlc	a
   04E1 CC                 1964 	xch	a,r4
   04E2 25 E0              1965 	add	a,acc
   04E4 CC                 1966 	xch	a,r4
   04E5 33                 1967 	rlc	a
   04E6 FD                 1968 	mov	r5,a
                           1969 ;	genPlus
                           1970 ;	Peephole 236.g	used r4 instead of ar4
   04E7 EC                 1971 	mov	a,r4
   04E8 24r00              1972 	add	a,#_fixed_blocks
   04EA FE                 1973 	mov	r6,a
                           1974 ;	Peephole 236.g	used r5 instead of ar5
   04EB ED                 1975 	mov	a,r5
   04EC 34s00              1976 	addc	a,#(_fixed_blocks >> 8)
   04EE FF                 1977 	mov	r7,a
                           1978 ;	genPlus
                           1979 ;	Peephole 236.g	used r2 instead of ar2
   04EF EA                 1980 	mov	a,r2
                           1981 ;	Peephole 236.a	used r6 instead of ar6
   04F0 2E                 1982 	add	a,r6
   04F1 FE                 1983 	mov	r6,a
                           1984 ;	Peephole 236.g	used r3 instead of ar3
   04F2 EB                 1985 	mov	a,r3
                           1986 ;	Peephole 236.b	used r7 instead of ar7
   04F3 3F                 1987 	addc	a,r7
   04F4 FF                 1988 	mov	r7,a
                           1989 ;	genAssign
   04F5 90s00r0C           1990 	mov	dptr,#_next_block
   04F8 E0                 1991 	movx	a,@dptr
   04F9 F8                 1992 	mov	r0,a
   04FA A3                 1993 	inc	dptr
   04FB E0                 1994 	movx	a,@dptr
                           1995 ;	genLeftShift
                           1996 ;	genLeftShiftLiteral
                           1997 ;	genlshTwo
   04FC F9                 1998 	mov	r1,a
                           1999 ;	Peephole 105	removed redundant mov
   04FD 54 03              2000 	anl	a,#0x03
   04FF A2 E0              2001 	mov	c,acc.0
   0501 C8                 2002 	xch	a,r0
   0502 13                 2003 	rrc	a
   0503 C8                 2004 	xch	a,r0
   0504 13                 2005 	rrc	a
   0505 A2 E0              2006 	mov	c,acc.0
   0507 C8                 2007 	xch	a,r0
   0508 13                 2008 	rrc	a
   0509 C8                 2009 	xch	a,r0
   050A 13                 2010 	rrc	a
   050B C8                 2011 	xch	a,r0
   050C F9                 2012 	mov	r1,a
                           2013 ;	genPlus
                           2014 ;	Peephole 236.g	used r0 instead of ar0
   050D E8                 2015 	mov	a,r0
   050E 24r00              2016 	add	a,#_block
   0510 F8                 2017 	mov	r0,a
                           2018 ;	Peephole 236.g	used r1 instead of ar1
   0511 E9                 2019 	mov	a,r1
   0512 34s00              2020 	addc	a,#(_block >> 8)
   0514 F9                 2021 	mov	r1,a
                           2022 ;	genPlus
                           2023 ;	Peephole 236.g	used r4 instead of ar4
   0515 EC                 2024 	mov	a,r4
                           2025 ;	Peephole 236.a	used r0 instead of ar0
   0516 28                 2026 	add	a,r0
   0517 FC                 2027 	mov	r4,a
                           2028 ;	Peephole 236.g	used r5 instead of ar5
   0518 ED                 2029 	mov	a,r5
                           2030 ;	Peephole 236.b	used r1 instead of ar1
   0519 39                 2031 	addc	a,r1
   051A FD                 2032 	mov	r5,a
                           2033 ;	genPlus
                           2034 ;	Peephole 236.g	used r2 instead of ar2
   051B EA                 2035 	mov	a,r2
                           2036 ;	Peephole 236.a	used r4 instead of ar4
   051C 2C                 2037 	add	a,r4
   051D F5 82              2038 	mov	dpl,a
                           2039 ;	Peephole 236.g	used r3 instead of ar3
   051F EB                 2040 	mov	a,r3
                           2041 ;	Peephole 236.b	used r5 instead of ar5
   0520 3D                 2042 	addc	a,r5
   0521 F5 83              2043 	mov	dph,a
                           2044 ;	genPointerGet
                           2045 ;	genCodePointerGet
   0523 E4                 2046 	clr	a
   0524 93                 2047 	movc	a,@a+dptr
                           2048 ;	genPointerSet
                           2049 ;     genFarPointerSet
   0525 FC                 2050 	mov	r4,a
   0526 8E 82              2051 	mov	dpl,r6
   0528 8F 83              2052 	mov	dph,r7
                           2053 ;	Peephole 136	removed redundant move
   052A F0                 2054 	movx	@dptr,a
                           2055 ;	main.c:328: for(i=0;i<4;i++)        //Copy the columns in the rows
                           2056 ;	genPlus
   052B 90s00r02           2057 	mov	dptr,#_i
                           2058 ;     genPlusIncr
   052E 74 01              2059 	mov	a,#0x01
                           2060 ;	Peephole 236.a	used r2 instead of ar2
   0530 2A                 2061 	add	a,r2
   0531 F0                 2062 	movx	@dptr,a
                           2063 ;	Peephole 181	changed mov to clr
   0532 E4                 2064 	clr	a
                           2065 ;	Peephole 236.b	used r3 instead of ar3
   0533 3B                 2066 	addc	a,r3
   0534 A3                 2067 	inc	dptr
   0535 F0                 2068 	movx	@dptr,a
                           2069 ;	Peephole 112.b	changed ljmp to sjmp
   0536 80 89              2070 	sjmp	00133$
   0538                    2071 00139$:
                           2072 ;	main.c:326: for(j=0;j<16;j++)              //Copy the rows--Copying done row by row(entire row first
                           2073 ;	genAssign
   0538 90s00r04           2074 	mov	dptr,#_j
   053B E0                 2075 	movx	a,@dptr
   053C FA                 2076 	mov	r2,a
   053D A3                 2077 	inc	dptr
   053E E0                 2078 	movx	a,@dptr
   053F FB                 2079 	mov	r3,a
                           2080 ;	genPlus
   0540 90s00r04           2081 	mov	dptr,#_j
                           2082 ;     genPlusIncr
   0543 74 01              2083 	mov	a,#0x01
                           2084 ;	Peephole 236.a	used r2 instead of ar2
   0545 2A                 2085 	add	a,r2
   0546 F0                 2086 	movx	@dptr,a
                           2087 ;	Peephole 181	changed mov to clr
   0547 E4                 2088 	clr	a
                           2089 ;	Peephole 236.b	used r3 instead of ar3
   0548 3B                 2090 	addc	a,r3
   0549 A3                 2091 	inc	dptr
   054A F0                 2092 	movx	@dptr,a
   054B 02s04rA4           2093 	ljmp	00137$
   054E                    2094 00140$:
                           2095 ;	main.c:337: for(j=0xBD,m=0;j>=0xBA;j--,m++)     //Individual colum part
                           2096 ;	genAssign
   054E 90s00r04           2097 	mov	dptr,#_j
   0551 74 BD              2098 	mov	a,#0xBD
   0553 F0                 2099 	movx	@dptr,a
   0554 E4                 2100 	clr	a
   0555 A3                 2101 	inc	dptr
   0556 F0                 2102 	movx	@dptr,a
                           2103 ;	genAssign
   0557 90s00r08           2104 	mov	dptr,#_m
   055A E4                 2105 	clr	a
   055B F0                 2106 	movx	@dptr,a
   055C A3                 2107 	inc	dptr
   055D F0                 2108 	movx	@dptr,a
   055E                    2109 00145$:
                           2110 ;	genAssign
   055E 90s00r04           2111 	mov	dptr,#_j
   0561 E0                 2112 	movx	a,@dptr
   0562 FA                 2113 	mov	r2,a
   0563 A3                 2114 	inc	dptr
   0564 E0                 2115 	movx	a,@dptr
   0565 FB                 2116 	mov	r3,a
                           2117 ;	genCmpLt
                           2118 ;	genCmp
   0566 C3                 2119 	clr	c
   0567 EA                 2120 	mov	a,r2
   0568 94 BA              2121 	subb	a,#0xBA
   056A EB                 2122 	mov	a,r3
   056B 64 80              2123 	xrl	a,#0x80
   056D 94 80              2124 	subb	a,#0x80
                           2125 ;	genIfxJump
   056F 50 03              2126 	jnc	00188$
   0571 02s02r1A           2127 	ljmp	00111$
   0574                    2128 00188$:
                           2129 ;	main.c:339: lcdcmd(j);
                           2130 ;	genCast
                           2131 ;	genCall
   0574 8A 82              2132 	mov	dpl,r2
   0576 12s00rAE           2133 	lcall	_lcdcmd
                           2134 ;	main.c:340: for(i=0x40,k=15;i<=0x4F;i++,k--)        //ROWS part- writing done column by column
                           2135 ;	genAssign
   0579 90s00r02           2136 	mov	dptr,#_i
   057C 74 40              2137 	mov	a,#0x40
   057E F0                 2138 	movx	@dptr,a
   057F E4                 2139 	clr	a
   0580 A3                 2140 	inc	dptr
   0581 F0                 2141 	movx	@dptr,a
                           2142 ;	genAssign
   0582 90s00r06           2143 	mov	dptr,#_k
   0585 74 0F              2144 	mov	a,#0x0F
   0587 F0                 2145 	movx	@dptr,a
   0588 E4                 2146 	clr	a
   0589 A3                 2147 	inc	dptr
   058A F0                 2148 	movx	@dptr,a
   058B                    2149 00141$:
                           2150 ;	genAssign
   058B 90s00r02           2151 	mov	dptr,#_i
   058E E0                 2152 	movx	a,@dptr
   058F FA                 2153 	mov	r2,a
   0590 A3                 2154 	inc	dptr
   0591 E0                 2155 	movx	a,@dptr
   0592 FB                 2156 	mov	r3,a
                           2157 ;	genCmpGt
                           2158 ;	genCmp
   0593 C3                 2159 	clr	c
   0594 74 4F              2160 	mov	a,#0x4F
   0596 9A                 2161 	subb	a,r2
                           2162 ;	Peephole 159	avoided xrl during execution
   0597 74 80              2163 	mov	a,#(0x00 ^ 0x80)
   0599 8B F0              2164 	mov	b,r3
   059B 63 F0 80           2165 	xrl	b,#0x80
   059E 95 F0              2166 	subb	a,b
                           2167 ;	genIfxJump
                           2168 ;	Peephole 112.b	changed ljmp to sjmp
                           2169 ;	Peephole 160.a	removed sjmp by inverse jump logic
   05A0 40 61              2170 	jc	00144$
                           2171 ;	Peephole 300	removed redundant label 00189$
                           2172 ;	main.c:342: lcdcmd(i);
                           2173 ;	genCast
                           2174 ;	genCall
   05A2 8A 82              2175 	mov	dpl,r2
   05A4 12s00rAE           2176 	lcall	_lcdcmd
                           2177 ;	main.c:343: lcddata_b(fixed_blocks[k][m]);
                           2178 ;	genAssign
   05A7 90s00r06           2179 	mov	dptr,#_k
   05AA E0                 2180 	movx	a,@dptr
   05AB FA                 2181 	mov	r2,a
   05AC A3                 2182 	inc	dptr
   05AD E0                 2183 	movx	a,@dptr
                           2184 ;	genLeftShift
                           2185 ;	genLeftShiftLiteral
                           2186 ;	genlshTwo
   05AE FB                 2187 	mov	r3,a
                           2188 ;	Peephole 105	removed redundant mov
   05AF CA                 2189 	xch	a,r2
   05B0 25 E0              2190 	add	a,acc
   05B2 CA                 2191 	xch	a,r2
   05B3 33                 2192 	rlc	a
   05B4 CA                 2193 	xch	a,r2
   05B5 25 E0              2194 	add	a,acc
   05B7 CA                 2195 	xch	a,r2
   05B8 33                 2196 	rlc	a
   05B9 FB                 2197 	mov	r3,a
                           2198 ;	genPlus
                           2199 ;	Peephole 236.g	used r2 instead of ar2
   05BA EA                 2200 	mov	a,r2
   05BB 24r00              2201 	add	a,#_fixed_blocks
   05BD FA                 2202 	mov	r2,a
                           2203 ;	Peephole 236.g	used r3 instead of ar3
   05BE EB                 2204 	mov	a,r3
   05BF 34s00              2205 	addc	a,#(_fixed_blocks >> 8)
   05C1 FB                 2206 	mov	r3,a
                           2207 ;	genAssign
   05C2 90s00r08           2208 	mov	dptr,#_m
   05C5 E0                 2209 	movx	a,@dptr
   05C6 FC                 2210 	mov	r4,a
   05C7 A3                 2211 	inc	dptr
   05C8 E0                 2212 	movx	a,@dptr
   05C9 FD                 2213 	mov	r5,a
                           2214 ;	genPlus
                           2215 ;	Peephole 236.g	used r4 instead of ar4
   05CA EC                 2216 	mov	a,r4
                           2217 ;	Peephole 236.a	used r2 instead of ar2
   05CB 2A                 2218 	add	a,r2
   05CC F5 82              2219 	mov	dpl,a
                           2220 ;	Peephole 236.g	used r5 instead of ar5
   05CE ED                 2221 	mov	a,r5
                           2222 ;	Peephole 236.b	used r3 instead of ar3
   05CF 3B                 2223 	addc	a,r3
   05D0 F5 83              2224 	mov	dph,a
                           2225 ;	genPointerGet
                           2226 ;	genFarPointerGet
   05D2 E0                 2227 	movx	a,@dptr
                           2228 ;	genCall
   05D3 FA                 2229 	mov	r2,a
                           2230 ;	Peephole 244.c	loading dpl from a instead of r2
   05D4 F5 82              2231 	mov	dpl,a
   05D6 12s00rC9           2232 	lcall	_lcddata_b
                           2233 ;	main.c:340: for(i=0x40,k=15;i<=0x4F;i++,k--)        //ROWS part- writing done column by column
                           2234 ;	genAssign
   05D9 90s00r02           2235 	mov	dptr,#_i
   05DC E0                 2236 	movx	a,@dptr
   05DD FA                 2237 	mov	r2,a
   05DE A3                 2238 	inc	dptr
   05DF E0                 2239 	movx	a,@dptr
   05E0 FB                 2240 	mov	r3,a
                           2241 ;	genPlus
   05E1 90s00r02           2242 	mov	dptr,#_i
                           2243 ;     genPlusIncr
   05E4 74 01              2244 	mov	a,#0x01
                           2245 ;	Peephole 236.a	used r2 instead of ar2
   05E6 2A                 2246 	add	a,r2
   05E7 F0                 2247 	movx	@dptr,a
                           2248 ;	Peephole 181	changed mov to clr
   05E8 E4                 2249 	clr	a
                           2250 ;	Peephole 236.b	used r3 instead of ar3
   05E9 3B                 2251 	addc	a,r3
   05EA A3                 2252 	inc	dptr
   05EB F0                 2253 	movx	@dptr,a
                           2254 ;	genAssign
   05EC 90s00r06           2255 	mov	dptr,#_k
   05EF E0                 2256 	movx	a,@dptr
   05F0 FA                 2257 	mov	r2,a
   05F1 A3                 2258 	inc	dptr
   05F2 E0                 2259 	movx	a,@dptr
   05F3 FB                 2260 	mov	r3,a
                           2261 ;	genMinus
                           2262 ;	genMinusDec
   05F4 1A                 2263 	dec	r2
   05F5 BA FF 01           2264 	cjne	r2,#0xff,00190$
   05F8 1B                 2265 	dec	r3
   05F9                    2266 00190$:
                           2267 ;	genAssign
   05F9 90s00r06           2268 	mov	dptr,#_k
   05FC EA                 2269 	mov	a,r2
   05FD F0                 2270 	movx	@dptr,a
   05FE A3                 2271 	inc	dptr
   05FF EB                 2272 	mov	a,r3
   0600 F0                 2273 	movx	@dptr,a
                           2274 ;	Peephole 112.b	changed ljmp to sjmp
   0601 80 88              2275 	sjmp	00141$
   0603                    2276 00144$:
                           2277 ;	main.c:345: delay(50);
                           2278 ;	genCall
                           2279 ;	Peephole 182.b	used 16 bit load of dptr
   0603 90 00 32           2280 	mov	dptr,#0x0032
   0606 12s00r05           2281 	lcall	_delay
                           2282 ;	main.c:337: for(j=0xBD,m=0;j>=0xBA;j--,m++)     //Individual colum part
                           2283 ;	genAssign
   0609 90s00r04           2284 	mov	dptr,#_j
   060C E0                 2285 	movx	a,@dptr
   060D FA                 2286 	mov	r2,a
   060E A3                 2287 	inc	dptr
   060F E0                 2288 	movx	a,@dptr
   0610 FB                 2289 	mov	r3,a
                           2290 ;	genMinus
                           2291 ;	genMinusDec
   0611 1A                 2292 	dec	r2
   0612 BA FF 01           2293 	cjne	r2,#0xff,00191$
   0615 1B                 2294 	dec	r3
   0616                    2295 00191$:
                           2296 ;	genAssign
   0616 90s00r04           2297 	mov	dptr,#_j
   0619 EA                 2298 	mov	a,r2
   061A F0                 2299 	movx	@dptr,a
   061B A3                 2300 	inc	dptr
   061C EB                 2301 	mov	a,r3
   061D F0                 2302 	movx	@dptr,a
                           2303 ;	genAssign
   061E 90s00r08           2304 	mov	dptr,#_m
   0621 E0                 2305 	movx	a,@dptr
   0622 FA                 2306 	mov	r2,a
   0623 A3                 2307 	inc	dptr
   0624 E0                 2308 	movx	a,@dptr
   0625 FB                 2309 	mov	r3,a
                           2310 ;	genPlus
   0626 90s00r08           2311 	mov	dptr,#_m
                           2312 ;     genPlusIncr
   0629 74 01              2313 	mov	a,#0x01
                           2314 ;	Peephole 236.a	used r2 instead of ar2
   062B 2A                 2315 	add	a,r2
   062C F0                 2316 	movx	@dptr,a
                           2317 ;	Peephole 181	changed mov to clr
   062D E4                 2318 	clr	a
                           2319 ;	Peephole 236.b	used r3 instead of ar3
   062E 3B                 2320 	addc	a,r3
   062F A3                 2321 	inc	dptr
   0630 F0                 2322 	movx	@dptr,a
   0631 02s05r5E           2323 	ljmp	00145$
                           2324 ;	Peephole 259.b	removed redundant label 00149$ and ret
                           2325 ;
                           2326 	.area CSEG    (CODE)
                           2327 	.area CONST   (CODE)
   0000                    2328 _block:
   0000 00                 2329 	.db #0x00
   0001 00                 2330 	.db #0x00
   0002 00                 2331 	.db #0x00
   0003 00                 2332 	.db #0x00
   0004 00                 2333 	.db #0x00
   0005 00                 2334 	.db #0x00
   0006 00                 2335 	.db #0x00
   0007 00                 2336 	.db #0x00
   0008 00                 2337 	.db #0x00
   0009 00                 2338 	.db #0x00
   000A 00                 2339 	.db #0x00
   000B 00                 2340 	.db #0x00
   000C 00                 2341 	.db #0x00
   000D 00                 2342 	.db #0x00
   000E 00                 2343 	.db #0x00
   000F 00                 2344 	.db #0x00
   0010 00                 2345 	.db #0x00
   0011 00                 2346 	.db #0x00
   0012 00                 2347 	.db #0x00
   0013 00                 2348 	.db #0x00
   0014 00                 2349 	.db #0x00
   0015 00                 2350 	.db #0x00
   0016 00                 2351 	.db #0x00
   0017 00                 2352 	.db #0x00
   0018 00                 2353 	.db #0x00
   0019 00                 2354 	.db #0x00
   001A 00                 2355 	.db #0x00
   001B 00                 2356 	.db #0x00
   001C 00                 2357 	.db #0x00
   001D 00                 2358 	.db #0x00
   001E 00                 2359 	.db #0x00
   001F 00                 2360 	.db #0x00
   0020 00                 2361 	.db #0x00
   0021 00                 2362 	.db #0x00
   0022 00                 2363 	.db #0x00
   0023 00                 2364 	.db #0x00
   0024 00                 2365 	.db #0x00
   0025 00                 2366 	.db #0x00
   0026 00                 2367 	.db #0x00
   0027 00                 2368 	.db #0x00
   0028 00                 2369 	.db #0x00
   0029 00                 2370 	.db #0x00
   002A 00                 2371 	.db #0x00
   002B 00                 2372 	.db #0x00
   002C 00                 2373 	.db #0x00
   002D 00                 2374 	.db #0x00
   002E 00                 2375 	.db #0x00
   002F 00                 2376 	.db #0x00
   0030 00                 2377 	.db #0x00
   0031 00                 2378 	.db #0x00
   0032 00                 2379 	.db #0x00
   0033 00                 2380 	.db #0x00
   0034 00                 2381 	.db #0x00
   0035 00                 2382 	.db #0x00
   0036 00                 2383 	.db #0x00
   0037 00                 2384 	.db #0x00
   0038 00                 2385 	.db #0x00
   0039 00                 2386 	.db #0x00
   003A 00                 2387 	.db #0x00
   003B 00                 2388 	.db #0x00
   003C 00                 2389 	.db #0x00
   003D 00                 2390 	.db #0x00
   003E 00                 2391 	.db #0x00
   003F 00                 2392 	.db #0x00
   0040 00                 2393 	.db #0x00
   0041 00                 2394 	.db #0x00
   0042 00                 2395 	.db #0x00
   0043 00                 2396 	.db #0x00
   0044 00                 2397 	.db #0x00
   0045 00                 2398 	.db #0x00
   0046 00                 2399 	.db #0x00
   0047 00                 2400 	.db #0x00
   0048 00                 2401 	.db #0x00
   0049 00                 2402 	.db #0x00
   004A 00                 2403 	.db #0x00
   004B 00                 2404 	.db #0x00
   004C 00                 2405 	.db #0x00
   004D 00                 2406 	.db #0x00
   004E 00                 2407 	.db #0x00
   004F 00                 2408 	.db #0x00
   0050 00                 2409 	.db #0x00
   0051 00                 2410 	.db #0x00
   0052 00                 2411 	.db #0x00
   0053 00                 2412 	.db #0x00
   0054 00                 2413 	.db #0x00
   0055 00                 2414 	.db #0x00
   0056 00                 2415 	.db #0x00
   0057 00                 2416 	.db #0x00
   0058 00                 2417 	.db #0x00
   0059 00                 2418 	.db #0x00
   005A 00                 2419 	.db #0x00
   005B 00                 2420 	.db #0x00
   005C 00                 2421 	.db #0x00
   005D 00                 2422 	.db #0x00
   005E 00                 2423 	.db #0x00
   005F 00                 2424 	.db #0x00
   0060 00                 2425 	.db #0x00
   0061 0F                 2426 	.db #0x0F
   0062 F0                 2427 	.db #0xF0
   0063 00                 2428 	.db #0x00
   0064 00                 2429 	.db #0x00
   0065 0F                 2430 	.db #0x0F
   0066 F0                 2431 	.db #0xF0
   0067 00                 2432 	.db #0x00
   0068 00                 2433 	.db #0x00
   0069 0F                 2434 	.db #0x0F
   006A F0                 2435 	.db #0xF0
   006B 00                 2436 	.db #0x00
   006C 00                 2437 	.db #0x00
   006D 0F                 2438 	.db #0x0F
   006E F0                 2439 	.db #0xF0
   006F 00                 2440 	.db #0x00
   0070 00                 2441 	.db #0x00
   0071 0F                 2442 	.db #0x0F
   0072 F0                 2443 	.db #0xF0
   0073 00                 2444 	.db #0x00
   0074 00                 2445 	.db #0x00
   0075 0F                 2446 	.db #0x0F
   0076 F0                 2447 	.db #0xF0
   0077 00                 2448 	.db #0x00
   0078 00                 2449 	.db #0x00
   0079 0F                 2450 	.db #0x0F
   007A F0                 2451 	.db #0xF0
   007B 00                 2452 	.db #0x00
   007C 00                 2453 	.db #0x00
   007D 0F                 2454 	.db #0x0F
   007E F0                 2455 	.db #0xF0
   007F 00                 2456 	.db #0x00
   0080 00                 2457 	.db #0x00
   0081 03                 2458 	.db #0x03
   0082 C0                 2459 	.db #0xC0
   0083 00                 2460 	.db #0x00
   0084 00                 2461 	.db #0x00
   0085 03                 2462 	.db #0x03
   0086 C0                 2463 	.db #0xC0
   0087 00                 2464 	.db #0x00
   0088 00                 2465 	.db #0x00
   0089 03                 2466 	.db #0x03
   008A C0                 2467 	.db #0xC0
   008B 00                 2468 	.db #0x00
   008C 00                 2469 	.db #0x00
   008D 03                 2470 	.db #0x03
   008E C0                 2471 	.db #0xC0
   008F 00                 2472 	.db #0x00
   0090 00                 2473 	.db #0x00
   0091 03                 2474 	.db #0x03
   0092 C0                 2475 	.db #0xC0
   0093 00                 2476 	.db #0x00
   0094 00                 2477 	.db #0x00
   0095 03                 2478 	.db #0x03
   0096 C0                 2479 	.db #0xC0
   0097 00                 2480 	.db #0x00
   0098 00                 2481 	.db #0x00
   0099 03                 2482 	.db #0x03
   009A C0                 2483 	.db #0xC0
   009B 00                 2484 	.db #0x00
   009C 00                 2485 	.db #0x00
   009D 03                 2486 	.db #0x03
   009E C0                 2487 	.db #0xC0
   009F 00                 2488 	.db #0x00
   00A0 00                 2489 	.db #0x00
   00A1 03                 2490 	.db #0x03
   00A2 C0                 2491 	.db #0xC0
   00A3 00                 2492 	.db #0x00
   00A4 00                 2493 	.db #0x00
   00A5 03                 2494 	.db #0x03
   00A6 C0                 2495 	.db #0xC0
   00A7 00                 2496 	.db #0x00
   00A8 00                 2497 	.db #0x00
   00A9 03                 2498 	.db #0x03
   00AA C0                 2499 	.db #0xC0
   00AB 00                 2500 	.db #0x00
   00AC 00                 2501 	.db #0x00
   00AD 03                 2502 	.db #0x03
   00AE C0                 2503 	.db #0xC0
   00AF 00                 2504 	.db #0x00
   00B0 00                 2505 	.db #0x00
   00B1 03                 2506 	.db #0x03
   00B2 C0                 2507 	.db #0xC0
   00B3 00                 2508 	.db #0x00
   00B4 00                 2509 	.db #0x00
   00B5 03                 2510 	.db #0x03
   00B6 C0                 2511 	.db #0xC0
   00B7 00                 2512 	.db #0x00
   00B8 00                 2513 	.db #0x00
   00B9 03                 2514 	.db #0x03
   00BA C0                 2515 	.db #0xC0
   00BB 00                 2516 	.db #0x00
   00BC 00                 2517 	.db #0x00
   00BD 03                 2518 	.db #0x03
   00BE C0                 2519 	.db #0xC0
   00BF 00                 2520 	.db #0x00
   00C0 00                 2521 	.db #0x00
   00C1 00                 2522 	.db #0x00
   00C2 00                 2523 	.db #0x00
   00C3 00                 2524 	.db #0x00
   00C4 00                 2525 	.db #0x00
   00C5 00                 2526 	.db #0x00
   00C6 00                 2527 	.db #0x00
   00C7 00                 2528 	.db #0x00
   00C8 00                 2529 	.db #0x00
   00C9 00                 2530 	.db #0x00
   00CA 00                 2531 	.db #0x00
   00CB 00                 2532 	.db #0x00
   00CC 00                 2533 	.db #0x00
   00CD 00                 2534 	.db #0x00
   00CE 00                 2535 	.db #0x00
   00CF 00                 2536 	.db #0x00
   00D0 00                 2537 	.db #0x00
   00D1 00                 2538 	.db #0x00
   00D2 00                 2539 	.db #0x00
   00D3 00                 2540 	.db #0x00
   00D4 00                 2541 	.db #0x00
   00D5 00                 2542 	.db #0x00
   00D6 00                 2543 	.db #0x00
   00D7 00                 2544 	.db #0x00
   00D8 00                 2545 	.db #0x00
   00D9 00                 2546 	.db #0x00
   00DA 00                 2547 	.db #0x00
   00DB 00                 2548 	.db #0x00
   00DC 00                 2549 	.db #0x00
   00DD 00                 2550 	.db #0x00
   00DE 00                 2551 	.db #0x00
   00DF 00                 2552 	.db #0x00
   00E0 00                 2553 	.db #0x00
   00E1 00                 2554 	.db #0x00
   00E2 00                 2555 	.db #0x00
   00E3 00                 2556 	.db #0x00
   00E4 00                 2557 	.db #0x00
   00E5 00                 2558 	.db #0x00
   00E6 00                 2559 	.db #0x00
   00E7 00                 2560 	.db #0x00
   00E8 00                 2561 	.db #0x00
   00E9 00                 2562 	.db #0x00
   00EA 00                 2563 	.db #0x00
   00EB 00                 2564 	.db #0x00
   00EC 00                 2565 	.db #0x00
   00ED FF                 2566 	.db #0xFF
   00EE FF                 2567 	.db #0xFF
   00EF 00                 2568 	.db #0x00
   00F0 00                 2569 	.db #0x00
   00F1 FF                 2570 	.db #0xFF
   00F2 FF                 2571 	.db #0xFF
   00F3 00                 2572 	.db #0x00
   00F4 00                 2573 	.db #0x00
   00F5 FF                 2574 	.db #0xFF
   00F6 FF                 2575 	.db #0xFF
   00F7 00                 2576 	.db #0x00
   00F8 00                 2577 	.db #0x00
   00F9 FF                 2578 	.db #0xFF
   00FA FF                 2579 	.db #0xFF
   00FB 00                 2580 	.db #0x00
   00FC 00                 2581 	.db 0x00
   00FD 00                 2582 	.db 0x00
   00FE 00                 2583 	.db 0x00
   00FF 00                 2584 	.db 0x00
   0100 0F                 2585 	.db #0x0F
   0101 0F                 2586 	.db #0x0F
   0102 00                 2587 	.db #0x00
   0103 00                 2588 	.db #0x00
   0104 00                 2589 	.db #0x00
   0105 00                 2590 	.db #0x00
   0106 00                 2591 	.db #0x00
   0107 00                 2592 	.db #0x00
   0108 00                 2593 	.db #0x00
   0109 00                 2594 	.db #0x00
   010A 00                 2595 	.db #0x00
   010B 00                 2596 	.db #0x00
   010C 00                 2597 	.db #0x00
   010D 00                 2598 	.db #0x00
   010E 00                 2599 	.db #0x00
   010F 00                 2600 	.db #0x00
   0110 00                 2601 	.db #0x00
   0111 00                 2602 	.db #0x00
   0112 00                 2603 	.db #0x00
   0113 00                 2604 	.db #0x00
   0114 00                 2605 	.db #0x00
   0115 00                 2606 	.db #0x00
   0116 00                 2607 	.db #0x00
   0117 00                 2608 	.db #0x00
   0118 00                 2609 	.db #0x00
   0119 00                 2610 	.db #0x00
   011A 00                 2611 	.db #0x00
   011B 00                 2612 	.db #0x00
   011C 00                 2613 	.db #0x00
   011D 00                 2614 	.db #0x00
   011E 00                 2615 	.db #0x00
   011F 00                 2616 	.db #0x00
   0120 00                 2617 	.db #0x00
   0121 00                 2618 	.db #0x00
   0122 00                 2619 	.db #0x00
   0123 00                 2620 	.db #0x00
   0124 00                 2621 	.db #0x00
   0125 00                 2622 	.db #0x00
   0126 00                 2623 	.db #0x00
   0127 00                 2624 	.db #0x00
   0128 00                 2625 	.db #0x00
   0129 00                 2626 	.db #0x00
   012A 00                 2627 	.db #0x00
   012B 00                 2628 	.db #0x00
   012C 00                 2629 	.db #0x00
   012D 00                 2630 	.db #0x00
   012E 00                 2631 	.db #0x00
   012F 00                 2632 	.db #0x00
   0130 00                 2633 	.db #0x00
   0131 00                 2634 	.db #0x00
   0132 00                 2635 	.db #0x00
   0133 00                 2636 	.db #0x00
   0134 00                 2637 	.db #0x00
   0135 00                 2638 	.db #0x00
   0136 00                 2639 	.db #0x00
   0137 00                 2640 	.db #0x00
   0138 00                 2641 	.db #0x00
   0139 00                 2642 	.db #0x00
   013A 00                 2643 	.db #0x00
   013B 00                 2644 	.db #0x00
   013C 00                 2645 	.db #0x00
   013D 00                 2646 	.db #0x00
   013E FF                 2647 	.db #0xFF
   013F FF                 2648 	.db #0xFF
                           2649 	.area XINIT   (CODE)
   0000                    2650 __xinit__fixed_blocks:
   0000 00                 2651 	.db #0x00
   0001 00                 2652 	.db 0x00
   0002 00                 2653 	.db 0x00
   0003 00                 2654 	.db 0x00
   0004 00                 2655 	.db 0x00
   0005 00                 2656 	.db 0x00
   0006 00                 2657 	.db 0x00
   0007 00                 2658 	.db 0x00
   0008 00                 2659 	.db 0x00
   0009 00                 2660 	.db 0x00
   000A 00                 2661 	.db 0x00
   000B 00                 2662 	.db 0x00
   000C 00                 2663 	.db 0x00
   000D 00                 2664 	.db 0x00
   000E 00                 2665 	.db 0x00
   000F 00                 2666 	.db 0x00
   0010 00                 2667 	.db 0x00
   0011 00                 2668 	.db 0x00
   0012 00                 2669 	.db 0x00
   0013 00                 2670 	.db 0x00
   0014 00                 2671 	.db 0x00
   0015 00                 2672 	.db 0x00
   0016 00                 2673 	.db 0x00
   0017 00                 2674 	.db 0x00
   0018 00                 2675 	.db 0x00
   0019 00                 2676 	.db 0x00
   001A 00                 2677 	.db 0x00
   001B 00                 2678 	.db 0x00
   001C 00                 2679 	.db 0x00
   001D 00                 2680 	.db 0x00
   001E 00                 2681 	.db 0x00
   001F 00                 2682 	.db 0x00
   0020 00                 2683 	.db 0x00
   0021 00                 2684 	.db 0x00
   0022 00                 2685 	.db 0x00
   0023 00                 2686 	.db 0x00
   0024 00                 2687 	.db 0x00
   0025 00                 2688 	.db 0x00
   0026 00                 2689 	.db 0x00
   0027 00                 2690 	.db 0x00
   0028 00                 2691 	.db 0x00
   0029 00                 2692 	.db 0x00
   002A 00                 2693 	.db 0x00
   002B 00                 2694 	.db 0x00
   002C 00                 2695 	.db 0x00
   002D 00                 2696 	.db 0x00
   002E 00                 2697 	.db 0x00
   002F 00                 2698 	.db 0x00
   0030 00                 2699 	.db 0x00
   0031 00                 2700 	.db 0x00
   0032 00                 2701 	.db 0x00
   0033 00                 2702 	.db 0x00
   0034 00                 2703 	.db 0x00
   0035 00                 2704 	.db 0x00
   0036 00                 2705 	.db 0x00
   0037 00                 2706 	.db 0x00
   0038 00                 2707 	.db 0x00
   0039 00                 2708 	.db 0x00
   003A 00                 2709 	.db 0x00
   003B 00                 2710 	.db 0x00
   003C 00                 2711 	.db 0x00
   003D 00                 2712 	.db 0x00
   003E 00                 2713 	.db 0x00
   003F 00                 2714 	.db 0x00
